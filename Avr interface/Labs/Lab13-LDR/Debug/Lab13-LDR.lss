
Lab13-LDR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d50  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002d50  00002dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fc8  00000000  00000000  00002ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ff3  00000000  00000000  00004e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00005e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  00006027  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  00006217  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  00008623  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  0000999a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000ab74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  0000ad34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000b027  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b9f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <main>
      7a:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	e8 59       	subi	r30, 0x98	; 152
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <HLCD_voidInit>:
#include "HLCD_private.h"
#include "HLCD_interface.h"
#include<util/delay.h>

void HLCD_voidInit(void)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	ee 97       	sbiw	r28, 0x3e	; 62
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
	MDIO_stderrorSetPortDirection(LCD_DATA_PORT,0xFF);
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	6f ef       	ldi	r22, 0xFF	; 255
     e00:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <MDIO_stderrorSetPortDirection>
	MDIO_stderrorSetPortValue(LCD_DATA_PORT,MDIO_LOW);
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <MDIO_stderrorSetPortValue>
	MDIO_stderrorSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,MDIO_OUTPUT);
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	0e 94 94 10 	call	0x2128	; 0x2128 <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,MDIO_OUTPUT);
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	62 e0       	ldi	r22, 0x02	; 2
     e1a:	41 e0       	ldi	r20, 0x01	; 1
     e1c:	0e 94 94 10 	call	0x2128	; 0x2128 <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_OUTPUT);
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	63 e0       	ldi	r22, 0x03	; 3
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	0e 94 94 10 	call	0x2128	; 0x2128 <MDIO_stderrorSetPinDirection>
	HLCD_voidSendCmd(0x33);   /* Send command 0x33*/
     e2a:	83 e3       	ldi	r24, 0x33	; 51
     e2c:	0e 94 12 0b 	call	0x1624	; 0x1624 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x32);   /* Send command 0x32*/
     e30:	82 e3       	ldi	r24, 0x32	; 50
     e32:	0e 94 12 0b 	call	0x1624	; 0x1624 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x38);
     e36:	88 e3       	ldi	r24, 0x38	; 56
     e38:	0e 94 12 0b 	call	0x1624	; 0x1624 <HLCD_voidSendCmd>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a8 e4       	ldi	r26, 0x48	; 72
     e42:	b2 e4       	ldi	r27, 0x42	; 66
     e44:	8b af       	std	Y+59, r24	; 0x3b
     e46:	9c af       	std	Y+60, r25	; 0x3c
     e48:	ad af       	std	Y+61, r26	; 0x3d
     e4a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e4c:	6b ad       	ldd	r22, Y+59	; 0x3b
     e4e:	7c ad       	ldd	r23, Y+60	; 0x3c
     e50:	8d ad       	ldd	r24, Y+61	; 0x3d
     e52:	9e ad       	ldd	r25, Y+62	; 0x3e
     e54:	2b ea       	ldi	r18, 0xAB	; 171
     e56:	3a ea       	ldi	r19, 0xAA	; 170
     e58:	4a e2       	ldi	r20, 0x2A	; 42
     e5a:	50 e4       	ldi	r21, 0x40	; 64
     e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	8f ab       	std	Y+55, r24	; 0x37
     e66:	98 af       	std	Y+56, r25	; 0x38
     e68:	a9 af       	std	Y+57, r26	; 0x39
     e6a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     e6c:	6f a9       	ldd	r22, Y+55	; 0x37
     e6e:	78 ad       	ldd	r23, Y+56	; 0x38
     e70:	89 ad       	ldd	r24, Y+57	; 0x39
     e72:	9a ad       	ldd	r25, Y+58	; 0x3a
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e8       	ldi	r20, 0x80	; 128
     e7a:	5f e3       	ldi	r21, 0x3F	; 63
     e7c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e80:	88 23       	and	r24, r24
     e82:	1c f4       	brge	.+6      	; 0xe8a <HLCD_voidInit+0xa2>
		__ticks = 1;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	8e ab       	std	Y+54, r24	; 0x36
     e88:	91 c0       	rjmp	.+290    	; 0xfac <HLCD_voidInit+0x1c4>
	else if (__tmp > 255)
     e8a:	6f a9       	ldd	r22, Y+55	; 0x37
     e8c:	78 ad       	ldd	r23, Y+56	; 0x38
     e8e:	89 ad       	ldd	r24, Y+57	; 0x39
     e90:	9a ad       	ldd	r25, Y+58	; 0x3a
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	53 e4       	ldi	r21, 0x43	; 67
     e9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	0c f0       	brlt	.+2      	; 0xea4 <HLCD_voidInit+0xbc>
     ea2:	7b c0       	rjmp	.+246    	; 0xf9a <HLCD_voidInit+0x1b2>
	{
		_delay_ms(__us / 1000.0);
     ea4:	6b ad       	ldd	r22, Y+59	; 0x3b
     ea6:	7c ad       	ldd	r23, Y+60	; 0x3c
     ea8:	8d ad       	ldd	r24, Y+61	; 0x3d
     eaa:	9e ad       	ldd	r25, Y+62	; 0x3e
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	4a e7       	ldi	r20, 0x7A	; 122
     eb2:	54 e4       	ldi	r21, 0x44	; 68
     eb4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	8a ab       	std	Y+50, r24	; 0x32
     ebe:	9b ab       	std	Y+51, r25	; 0x33
     ec0:	ac ab       	std	Y+52, r26	; 0x34
     ec2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec4:	6a a9       	ldd	r22, Y+50	; 0x32
     ec6:	7b a9       	ldd	r23, Y+51	; 0x33
     ec8:	8c a9       	ldd	r24, Y+52	; 0x34
     eca:	9d a9       	ldd	r25, Y+53	; 0x35
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	4a ef       	ldi	r20, 0xFA	; 250
     ed2:	54 e4       	ldi	r21, 0x44	; 68
     ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	8e a7       	std	Y+46, r24	; 0x2e
     ede:	9f a7       	std	Y+47, r25	; 0x2f
     ee0:	a8 ab       	std	Y+48, r26	; 0x30
     ee2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     ee4:	6e a5       	ldd	r22, Y+46	; 0x2e
     ee6:	7f a5       	ldd	r23, Y+47	; 0x2f
     ee8:	88 a9       	ldd	r24, Y+48	; 0x30
     eea:	99 a9       	ldd	r25, Y+49	; 0x31
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e8       	ldi	r20, 0x80	; 128
     ef2:	5f e3       	ldi	r21, 0x3F	; 63
     ef4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ef8:	88 23       	and	r24, r24
     efa:	2c f4       	brge	.+10     	; 0xf06 <HLCD_voidInit+0x11e>
		__ticks = 1;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9d a7       	std	Y+45, r25	; 0x2d
     f02:	8c a7       	std	Y+44, r24	; 0x2c
     f04:	3f c0       	rjmp	.+126    	; 0xf84 <HLCD_voidInit+0x19c>
	else if (__tmp > 65535)
     f06:	6e a5       	ldd	r22, Y+46	; 0x2e
     f08:	7f a5       	ldd	r23, Y+47	; 0x2f
     f0a:	88 a9       	ldd	r24, Y+48	; 0x30
     f0c:	99 a9       	ldd	r25, Y+49	; 0x31
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	3f ef       	ldi	r19, 0xFF	; 255
     f12:	4f e7       	ldi	r20, 0x7F	; 127
     f14:	57 e4       	ldi	r21, 0x47	; 71
     f16:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f1a:	18 16       	cp	r1, r24
     f1c:	4c f5       	brge	.+82     	; 0xf70 <HLCD_voidInit+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1e:	6a a9       	ldd	r22, Y+50	; 0x32
     f20:	7b a9       	ldd	r23, Y+51	; 0x33
     f22:	8c a9       	ldd	r24, Y+52	; 0x34
     f24:	9d a9       	ldd	r25, Y+53	; 0x35
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e2       	ldi	r20, 0x20	; 32
     f2c:	51 e4       	ldi	r21, 0x41	; 65
     f2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	bc 01       	movw	r22, r24
     f38:	cd 01       	movw	r24, r26
     f3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	9d a7       	std	Y+45, r25	; 0x2d
     f44:	8c a7       	std	Y+44, r24	; 0x2c
     f46:	0f c0       	rjmp	.+30     	; 0xf66 <HLCD_voidInit+0x17e>
     f48:	88 ec       	ldi	r24, 0xC8	; 200
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	9b a7       	std	Y+43, r25	; 0x2b
     f4e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f50:	8a a5       	ldd	r24, Y+42	; 0x2a
     f52:	9b a5       	ldd	r25, Y+43	; 0x2b
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <HLCD_voidInit+0x16c>
     f58:	9b a7       	std	Y+43, r25	; 0x2b
     f5a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5c:	8c a5       	ldd	r24, Y+44	; 0x2c
     f5e:	9d a5       	ldd	r25, Y+45	; 0x2d
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	9d a7       	std	Y+45, r25	; 0x2d
     f64:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f66:	8c a5       	ldd	r24, Y+44	; 0x2c
     f68:	9d a5       	ldd	r25, Y+45	; 0x2d
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	69 f7       	brne	.-38     	; 0xf48 <HLCD_voidInit+0x160>
     f6e:	24 c0       	rjmp	.+72     	; 0xfb8 <HLCD_voidInit+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f70:	6e a5       	ldd	r22, Y+46	; 0x2e
     f72:	7f a5       	ldd	r23, Y+47	; 0x2f
     f74:	88 a9       	ldd	r24, Y+48	; 0x30
     f76:	99 a9       	ldd	r25, Y+49	; 0x31
     f78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	9d a7       	std	Y+45, r25	; 0x2d
     f82:	8c a7       	std	Y+44, r24	; 0x2c
     f84:	8c a5       	ldd	r24, Y+44	; 0x2c
     f86:	9d a5       	ldd	r25, Y+45	; 0x2d
     f88:	99 a7       	std	Y+41, r25	; 0x29
     f8a:	88 a7       	std	Y+40, r24	; 0x28
     f8c:	88 a5       	ldd	r24, Y+40	; 0x28
     f8e:	99 a5       	ldd	r25, Y+41	; 0x29
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <HLCD_voidInit+0x1a8>
     f94:	99 a7       	std	Y+41, r25	; 0x29
     f96:	88 a7       	std	Y+40, r24	; 0x28
     f98:	0f c0       	rjmp	.+30     	; 0xfb8 <HLCD_voidInit+0x1d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f9a:	6f a9       	ldd	r22, Y+55	; 0x37
     f9c:	78 ad       	ldd	r23, Y+56	; 0x38
     f9e:	89 ad       	ldd	r24, Y+57	; 0x39
     fa0:	9a ad       	ldd	r25, Y+58	; 0x3a
     fa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	8e ab       	std	Y+54, r24	; 0x36
     fac:	8e a9       	ldd	r24, Y+54	; 0x36
     fae:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fb0:	8f a1       	ldd	r24, Y+39	; 0x27
     fb2:	8a 95       	dec	r24
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <HLCD_voidInit+0x1ca>
     fb6:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	HLCD_voidSendCmd(0x0C);
     fb8:	8c e0       	ldi	r24, 0x0C	; 12
     fba:	0e 94 12 0b 	call	0x1624	; 0x1624 <HLCD_voidSendCmd>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a8 e4       	ldi	r26, 0x48	; 72
     fc4:	b2 e4       	ldi	r27, 0x42	; 66
     fc6:	8b a3       	std	Y+35, r24	; 0x23
     fc8:	9c a3       	std	Y+36, r25	; 0x24
     fca:	ad a3       	std	Y+37, r26	; 0x25
     fcc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fce:	6b a1       	ldd	r22, Y+35	; 0x23
     fd0:	7c a1       	ldd	r23, Y+36	; 0x24
     fd2:	8d a1       	ldd	r24, Y+37	; 0x25
     fd4:	9e a1       	ldd	r25, Y+38	; 0x26
     fd6:	2b ea       	ldi	r18, 0xAB	; 171
     fd8:	3a ea       	ldi	r19, 0xAA	; 170
     fda:	4a e2       	ldi	r20, 0x2A	; 42
     fdc:	50 e4       	ldi	r21, 0x40	; 64
     fde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	8f 8f       	std	Y+31, r24	; 0x1f
     fe8:	98 a3       	std	Y+32, r25	; 0x20
     fea:	a9 a3       	std	Y+33, r26	; 0x21
     fec:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     fee:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ff0:	78 a1       	ldd	r23, Y+32	; 0x20
     ff2:	89 a1       	ldd	r24, Y+33	; 0x21
     ff4:	9a a1       	ldd	r25, Y+34	; 0x22
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e8       	ldi	r20, 0x80	; 128
     ffc:	5f e3       	ldi	r21, 0x3F	; 63
     ffe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1002:	88 23       	and	r24, r24
    1004:	1c f4       	brge	.+6      	; 0x100c <HLCD_voidInit+0x224>
		__ticks = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	8e 8f       	std	Y+30, r24	; 0x1e
    100a:	91 c0       	rjmp	.+290    	; 0x112e <HLCD_voidInit+0x346>
	else if (__tmp > 255)
    100c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    100e:	78 a1       	ldd	r23, Y+32	; 0x20
    1010:	89 a1       	ldd	r24, Y+33	; 0x21
    1012:	9a a1       	ldd	r25, Y+34	; 0x22
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	53 e4       	ldi	r21, 0x43	; 67
    101c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1020:	18 16       	cp	r1, r24
    1022:	0c f0       	brlt	.+2      	; 0x1026 <HLCD_voidInit+0x23e>
    1024:	7b c0       	rjmp	.+246    	; 0x111c <HLCD_voidInit+0x334>
	{
		_delay_ms(__us / 1000.0);
    1026:	6b a1       	ldd	r22, Y+35	; 0x23
    1028:	7c a1       	ldd	r23, Y+36	; 0x24
    102a:	8d a1       	ldd	r24, Y+37	; 0x25
    102c:	9e a1       	ldd	r25, Y+38	; 0x26
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	4a e7       	ldi	r20, 0x7A	; 122
    1034:	54 e4       	ldi	r21, 0x44	; 68
    1036:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	8a 8f       	std	Y+26, r24	; 0x1a
    1040:	9b 8f       	std	Y+27, r25	; 0x1b
    1042:	ac 8f       	std	Y+28, r26	; 0x1c
    1044:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1046:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1048:	7b 8d       	ldd	r23, Y+27	; 0x1b
    104a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    104c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	4a ef       	ldi	r20, 0xFA	; 250
    1054:	54 e4       	ldi	r21, 0x44	; 68
    1056:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	8e 8b       	std	Y+22, r24	; 0x16
    1060:	9f 8b       	std	Y+23, r25	; 0x17
    1062:	a8 8f       	std	Y+24, r26	; 0x18
    1064:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1066:	6e 89       	ldd	r22, Y+22	; 0x16
    1068:	7f 89       	ldd	r23, Y+23	; 0x17
    106a:	88 8d       	ldd	r24, Y+24	; 0x18
    106c:	99 8d       	ldd	r25, Y+25	; 0x19
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e8       	ldi	r20, 0x80	; 128
    1074:	5f e3       	ldi	r21, 0x3F	; 63
    1076:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    107a:	88 23       	and	r24, r24
    107c:	2c f4       	brge	.+10     	; 0x1088 <HLCD_voidInit+0x2a0>
		__ticks = 1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9d 8b       	std	Y+21, r25	; 0x15
    1084:	8c 8b       	std	Y+20, r24	; 0x14
    1086:	3f c0       	rjmp	.+126    	; 0x1106 <HLCD_voidInit+0x31e>
	else if (__tmp > 65535)
    1088:	6e 89       	ldd	r22, Y+22	; 0x16
    108a:	7f 89       	ldd	r23, Y+23	; 0x17
    108c:	88 8d       	ldd	r24, Y+24	; 0x18
    108e:	99 8d       	ldd	r25, Y+25	; 0x19
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	3f ef       	ldi	r19, 0xFF	; 255
    1094:	4f e7       	ldi	r20, 0x7F	; 127
    1096:	57 e4       	ldi	r21, 0x47	; 71
    1098:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    109c:	18 16       	cp	r1, r24
    109e:	4c f5       	brge	.+82     	; 0x10f2 <HLCD_voidInit+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    10a2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    10a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e2       	ldi	r20, 0x20	; 32
    10ae:	51 e4       	ldi	r21, 0x41	; 65
    10b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	9d 8b       	std	Y+21, r25	; 0x15
    10c6:	8c 8b       	std	Y+20, r24	; 0x14
    10c8:	0f c0       	rjmp	.+30     	; 0x10e8 <HLCD_voidInit+0x300>
    10ca:	88 ec       	ldi	r24, 0xC8	; 200
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9b 8b       	std	Y+19, r25	; 0x13
    10d0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10d2:	8a 89       	ldd	r24, Y+18	; 0x12
    10d4:	9b 89       	ldd	r25, Y+19	; 0x13
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <HLCD_voidInit+0x2ee>
    10da:	9b 8b       	std	Y+19, r25	; 0x13
    10dc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10de:	8c 89       	ldd	r24, Y+20	; 0x14
    10e0:	9d 89       	ldd	r25, Y+21	; 0x15
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	9d 8b       	std	Y+21, r25	; 0x15
    10e6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e8:	8c 89       	ldd	r24, Y+20	; 0x14
    10ea:	9d 89       	ldd	r25, Y+21	; 0x15
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	69 f7       	brne	.-38     	; 0x10ca <HLCD_voidInit+0x2e2>
    10f0:	24 c0       	rjmp	.+72     	; 0x113a <HLCD_voidInit+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f2:	6e 89       	ldd	r22, Y+22	; 0x16
    10f4:	7f 89       	ldd	r23, Y+23	; 0x17
    10f6:	88 8d       	ldd	r24, Y+24	; 0x18
    10f8:	99 8d       	ldd	r25, Y+25	; 0x19
    10fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9d 8b       	std	Y+21, r25	; 0x15
    1104:	8c 8b       	std	Y+20, r24	; 0x14
    1106:	8c 89       	ldd	r24, Y+20	; 0x14
    1108:	9d 89       	ldd	r25, Y+21	; 0x15
    110a:	99 8b       	std	Y+17, r25	; 0x11
    110c:	88 8b       	std	Y+16, r24	; 0x10
    110e:	88 89       	ldd	r24, Y+16	; 0x10
    1110:	99 89       	ldd	r25, Y+17	; 0x11
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <HLCD_voidInit+0x32a>
    1116:	99 8b       	std	Y+17, r25	; 0x11
    1118:	88 8b       	std	Y+16, r24	; 0x10
    111a:	0f c0       	rjmp	.+30     	; 0x113a <HLCD_voidInit+0x352>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    111c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    111e:	78 a1       	ldd	r23, Y+32	; 0x20
    1120:	89 a1       	ldd	r24, Y+33	; 0x21
    1122:	9a a1       	ldd	r25, Y+34	; 0x22
    1124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	8e 8f       	std	Y+30, r24	; 0x1e
    112e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1130:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1132:	8f 85       	ldd	r24, Y+15	; 0x0f
    1134:	8a 95       	dec	r24
    1136:	f1 f7       	brne	.-4      	; 0x1134 <HLCD_voidInit+0x34c>
    1138:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	HLCD_voidSendCmd(0x01);
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	0e 94 12 0b 	call	0x1624	; 0x1624 <HLCD_voidSendCmd>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a0 e0       	ldi	r26, 0x00	; 0
    1146:	b0 e4       	ldi	r27, 0x40	; 64
    1148:	8b 87       	std	Y+11, r24	; 0x0b
    114a:	9c 87       	std	Y+12, r25	; 0x0c
    114c:	ad 87       	std	Y+13, r26	; 0x0d
    114e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	6b 85       	ldd	r22, Y+11	; 0x0b
    1152:	7c 85       	ldd	r23, Y+12	; 0x0c
    1154:	8d 85       	ldd	r24, Y+13	; 0x0d
    1156:	9e 85       	ldd	r25, Y+14	; 0x0e
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a ef       	ldi	r20, 0xFA	; 250
    115e:	54 e4       	ldi	r21, 0x44	; 68
    1160:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	8f 83       	std	Y+7, r24	; 0x07
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	a9 87       	std	Y+9, r26	; 0x09
    116e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	2c f4       	brge	.+10     	; 0x1192 <HLCD_voidInit+0x3aa>
		__ticks = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <HLCD_voidInit+0x428>
	else if (__tmp > 65535)
    1192:	6f 81       	ldd	r22, Y+7	; 0x07
    1194:	78 85       	ldd	r23, Y+8	; 0x08
    1196:	89 85       	ldd	r24, Y+9	; 0x09
    1198:	9a 85       	ldd	r25, Y+10	; 0x0a
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	57 e4       	ldi	r21, 0x47	; 71
    11a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	4c f5       	brge	.+82     	; 0x11fc <HLCD_voidInit+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <HLCD_voidInit+0x40a>
    11d4:	88 ec       	ldi	r24, 0xC8	; 200
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9c 83       	std	Y+4, r25	; 0x04
    11da:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <HLCD_voidInit+0x3f8>
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	9e 83       	std	Y+6, r25	; 0x06
    11f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <HLCD_voidInit+0x3ec>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <HLCD_voidInit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	6f 81       	ldd	r22, Y+7	; 0x07
    11fe:	78 85       	ldd	r23, Y+8	; 0x08
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	8d 83       	std	Y+5, r24	; 0x05
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <HLCD_voidInit+0x434>
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidSendCmd(0x06);
    1224:	86 e0       	ldi	r24, 0x06	; 6
    1226:	0e 94 12 0b 	call	0x1624	; 0x1624 <HLCD_voidSendCmd>
}
    122a:	ee 96       	adiw	r28, 0x3e	; 62
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <HLCD_voidSendChar>:
void HLCD_voidSendChar(char ARG_u8Data)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	e9 97       	sbiw	r28, 0x39	; 57
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	89 af       	std	Y+57, r24	; 0x39
	/*control preparation*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,MDIO_HIGH);
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	61 e0       	ldi	r22, 0x01	; 1
    1256:	42 e0       	ldi	r20, 0x02	; 2
    1258:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,MDIO_LOW);
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	62 e0       	ldi	r22, 0x02	; 2
    1260:	41 e0       	ldi	r20, 0x01	; 1
    1262:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a0 e8       	ldi	r26, 0x80	; 128
    126c:	bf e3       	ldi	r27, 0x3F	; 63
    126e:	8d ab       	std	Y+53, r24	; 0x35
    1270:	9e ab       	std	Y+54, r25	; 0x36
    1272:	af ab       	std	Y+55, r26	; 0x37
    1274:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1276:	6d a9       	ldd	r22, Y+53	; 0x35
    1278:	7e a9       	ldd	r23, Y+54	; 0x36
    127a:	8f a9       	ldd	r24, Y+55	; 0x37
    127c:	98 ad       	ldd	r25, Y+56	; 0x38
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	4a ef       	ldi	r20, 0xFA	; 250
    1284:	54 e4       	ldi	r21, 0x44	; 68
    1286:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	89 ab       	std	Y+49, r24	; 0x31
    1290:	9a ab       	std	Y+50, r25	; 0x32
    1292:	ab ab       	std	Y+51, r26	; 0x33
    1294:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1296:	69 a9       	ldd	r22, Y+49	; 0x31
    1298:	7a a9       	ldd	r23, Y+50	; 0x32
    129a:	8b a9       	ldd	r24, Y+51	; 0x33
    129c:	9c a9       	ldd	r25, Y+52	; 0x34
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e8       	ldi	r20, 0x80	; 128
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12aa:	88 23       	and	r24, r24
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <HLCD_voidSendChar+0x7c>
		__ticks = 1;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	98 ab       	std	Y+48, r25	; 0x30
    12b4:	8f a7       	std	Y+47, r24	; 0x2f
    12b6:	3f c0       	rjmp	.+126    	; 0x1336 <HLCD_voidSendChar+0xfa>
	else if (__tmp > 65535)
    12b8:	69 a9       	ldd	r22, Y+49	; 0x31
    12ba:	7a a9       	ldd	r23, Y+50	; 0x32
    12bc:	8b a9       	ldd	r24, Y+51	; 0x33
    12be:	9c a9       	ldd	r25, Y+52	; 0x34
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	3f ef       	ldi	r19, 0xFF	; 255
    12c4:	4f e7       	ldi	r20, 0x7F	; 127
    12c6:	57 e4       	ldi	r21, 0x47	; 71
    12c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12cc:	18 16       	cp	r1, r24
    12ce:	4c f5       	brge	.+82     	; 0x1322 <HLCD_voidSendChar+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d0:	6d a9       	ldd	r22, Y+53	; 0x35
    12d2:	7e a9       	ldd	r23, Y+54	; 0x36
    12d4:	8f a9       	ldd	r24, Y+55	; 0x37
    12d6:	98 ad       	ldd	r25, Y+56	; 0x38
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e2       	ldi	r20, 0x20	; 32
    12de:	51 e4       	ldi	r21, 0x41	; 65
    12e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	98 ab       	std	Y+48, r25	; 0x30
    12f6:	8f a7       	std	Y+47, r24	; 0x2f
    12f8:	0f c0       	rjmp	.+30     	; 0x1318 <HLCD_voidSendChar+0xdc>
    12fa:	88 ec       	ldi	r24, 0xC8	; 200
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9e a7       	std	Y+46, r25	; 0x2e
    1300:	8d a7       	std	Y+45, r24	; 0x2d
    1302:	8d a5       	ldd	r24, Y+45	; 0x2d
    1304:	9e a5       	ldd	r25, Y+46	; 0x2e
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <HLCD_voidSendChar+0xca>
    130a:	9e a7       	std	Y+46, r25	; 0x2e
    130c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1310:	98 a9       	ldd	r25, Y+48	; 0x30
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	98 ab       	std	Y+48, r25	; 0x30
    1316:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1318:	8f a5       	ldd	r24, Y+47	; 0x2f
    131a:	98 a9       	ldd	r25, Y+48	; 0x30
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	69 f7       	brne	.-38     	; 0x12fa <HLCD_voidSendChar+0xbe>
    1320:	14 c0       	rjmp	.+40     	; 0x134a <HLCD_voidSendChar+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1322:	69 a9       	ldd	r22, Y+49	; 0x31
    1324:	7a a9       	ldd	r23, Y+50	; 0x32
    1326:	8b a9       	ldd	r24, Y+51	; 0x33
    1328:	9c a9       	ldd	r25, Y+52	; 0x34
    132a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	98 ab       	std	Y+48, r25	; 0x30
    1334:	8f a7       	std	Y+47, r24	; 0x2f
    1336:	8f a5       	ldd	r24, Y+47	; 0x2f
    1338:	98 a9       	ldd	r25, Y+48	; 0x30
    133a:	9c a7       	std	Y+44, r25	; 0x2c
    133c:	8b a7       	std	Y+43, r24	; 0x2b
    133e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1340:	9c a5       	ldd	r25, Y+44	; 0x2c
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <HLCD_voidSendChar+0x106>
    1346:	9c a7       	std	Y+44, r25	; 0x2c
    1348:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/*enable preparation & send Data*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_HIGH);
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	63 e0       	ldi	r22, 0x03	; 3
    134e:	42 e0       	ldi	r20, 0x02	; 2
    1350:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a0 e8       	ldi	r26, 0x80	; 128
    135a:	bf e3       	ldi	r27, 0x3F	; 63
    135c:	8f a3       	std	Y+39, r24	; 0x27
    135e:	98 a7       	std	Y+40, r25	; 0x28
    1360:	a9 a7       	std	Y+41, r26	; 0x29
    1362:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1364:	6f a1       	ldd	r22, Y+39	; 0x27
    1366:	78 a5       	ldd	r23, Y+40	; 0x28
    1368:	89 a5       	ldd	r24, Y+41	; 0x29
    136a:	9a a5       	ldd	r25, Y+42	; 0x2a
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	4a ef       	ldi	r20, 0xFA	; 250
    1372:	54 e4       	ldi	r21, 0x44	; 68
    1374:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	8b a3       	std	Y+35, r24	; 0x23
    137e:	9c a3       	std	Y+36, r25	; 0x24
    1380:	ad a3       	std	Y+37, r26	; 0x25
    1382:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1384:	6b a1       	ldd	r22, Y+35	; 0x23
    1386:	7c a1       	ldd	r23, Y+36	; 0x24
    1388:	8d a1       	ldd	r24, Y+37	; 0x25
    138a:	9e a1       	ldd	r25, Y+38	; 0x26
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e8       	ldi	r20, 0x80	; 128
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1398:	88 23       	and	r24, r24
    139a:	2c f4       	brge	.+10     	; 0x13a6 <HLCD_voidSendChar+0x16a>
		__ticks = 1;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9a a3       	std	Y+34, r25	; 0x22
    13a2:	89 a3       	std	Y+33, r24	; 0x21
    13a4:	3f c0       	rjmp	.+126    	; 0x1424 <HLCD_voidSendChar+0x1e8>
	else if (__tmp > 65535)
    13a6:	6b a1       	ldd	r22, Y+35	; 0x23
    13a8:	7c a1       	ldd	r23, Y+36	; 0x24
    13aa:	8d a1       	ldd	r24, Y+37	; 0x25
    13ac:	9e a1       	ldd	r25, Y+38	; 0x26
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	3f ef       	ldi	r19, 0xFF	; 255
    13b2:	4f e7       	ldi	r20, 0x7F	; 127
    13b4:	57 e4       	ldi	r21, 0x47	; 71
    13b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13ba:	18 16       	cp	r1, r24
    13bc:	4c f5       	brge	.+82     	; 0x1410 <HLCD_voidSendChar+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13be:	6f a1       	ldd	r22, Y+39	; 0x27
    13c0:	78 a5       	ldd	r23, Y+40	; 0x28
    13c2:	89 a5       	ldd	r24, Y+41	; 0x29
    13c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e2       	ldi	r20, 0x20	; 32
    13cc:	51 e4       	ldi	r21, 0x41	; 65
    13ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	bc 01       	movw	r22, r24
    13d8:	cd 01       	movw	r24, r26
    13da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	9a a3       	std	Y+34, r25	; 0x22
    13e4:	89 a3       	std	Y+33, r24	; 0x21
    13e6:	0f c0       	rjmp	.+30     	; 0x1406 <HLCD_voidSendChar+0x1ca>
    13e8:	88 ec       	ldi	r24, 0xC8	; 200
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	98 a3       	std	Y+32, r25	; 0x20
    13ee:	8f 8f       	std	Y+31, r24	; 0x1f
    13f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13f2:	98 a1       	ldd	r25, Y+32	; 0x20
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <HLCD_voidSendChar+0x1b8>
    13f8:	98 a3       	std	Y+32, r25	; 0x20
    13fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fc:	89 a1       	ldd	r24, Y+33	; 0x21
    13fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	9a a3       	std	Y+34, r25	; 0x22
    1404:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1406:	89 a1       	ldd	r24, Y+33	; 0x21
    1408:	9a a1       	ldd	r25, Y+34	; 0x22
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	69 f7       	brne	.-38     	; 0x13e8 <HLCD_voidSendChar+0x1ac>
    140e:	14 c0       	rjmp	.+40     	; 0x1438 <HLCD_voidSendChar+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1410:	6b a1       	ldd	r22, Y+35	; 0x23
    1412:	7c a1       	ldd	r23, Y+36	; 0x24
    1414:	8d a1       	ldd	r24, Y+37	; 0x25
    1416:	9e a1       	ldd	r25, Y+38	; 0x26
    1418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	9a a3       	std	Y+34, r25	; 0x22
    1422:	89 a3       	std	Y+33, r24	; 0x21
    1424:	89 a1       	ldd	r24, Y+33	; 0x21
    1426:	9a a1       	ldd	r25, Y+34	; 0x22
    1428:	9e 8f       	std	Y+30, r25	; 0x1e
    142a:	8d 8f       	std	Y+29, r24	; 0x1d
    142c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    142e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <HLCD_voidSendChar+0x1f4>
    1434:	9e 8f       	std	Y+30, r25	; 0x1e
    1436:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MDIO_stderrorSetPortValue(LCD_DATA_PORT,ARG_u8Data);
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	69 ad       	ldd	r22, Y+57	; 0x39
    143c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <MDIO_stderrorSetPortValue>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a0 e8       	ldi	r26, 0x80	; 128
    1446:	bf e3       	ldi	r27, 0x3F	; 63
    1448:	89 8f       	std	Y+25, r24	; 0x19
    144a:	9a 8f       	std	Y+26, r25	; 0x1a
    144c:	ab 8f       	std	Y+27, r26	; 0x1b
    144e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1450:	69 8d       	ldd	r22, Y+25	; 0x19
    1452:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1454:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1456:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	4a ef       	ldi	r20, 0xFA	; 250
    145e:	54 e4       	ldi	r21, 0x44	; 68
    1460:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	8d 8b       	std	Y+21, r24	; 0x15
    146a:	9e 8b       	std	Y+22, r25	; 0x16
    146c:	af 8b       	std	Y+23, r26	; 0x17
    146e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1470:	6d 89       	ldd	r22, Y+21	; 0x15
    1472:	7e 89       	ldd	r23, Y+22	; 0x16
    1474:	8f 89       	ldd	r24, Y+23	; 0x17
    1476:	98 8d       	ldd	r25, Y+24	; 0x18
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e8       	ldi	r20, 0x80	; 128
    147e:	5f e3       	ldi	r21, 0x3F	; 63
    1480:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1484:	88 23       	and	r24, r24
    1486:	2c f4       	brge	.+10     	; 0x1492 <HLCD_voidSendChar+0x256>
		__ticks = 1;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	9c 8b       	std	Y+20, r25	; 0x14
    148e:	8b 8b       	std	Y+19, r24	; 0x13
    1490:	3f c0       	rjmp	.+126    	; 0x1510 <HLCD_voidSendChar+0x2d4>
	else if (__tmp > 65535)
    1492:	6d 89       	ldd	r22, Y+21	; 0x15
    1494:	7e 89       	ldd	r23, Y+22	; 0x16
    1496:	8f 89       	ldd	r24, Y+23	; 0x17
    1498:	98 8d       	ldd	r25, Y+24	; 0x18
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	3f ef       	ldi	r19, 0xFF	; 255
    149e:	4f e7       	ldi	r20, 0x7F	; 127
    14a0:	57 e4       	ldi	r21, 0x47	; 71
    14a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14a6:	18 16       	cp	r1, r24
    14a8:	4c f5       	brge	.+82     	; 0x14fc <HLCD_voidSendChar+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14aa:	69 8d       	ldd	r22, Y+25	; 0x19
    14ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e2       	ldi	r20, 0x20	; 32
    14b8:	51 e4       	ldi	r21, 0x41	; 65
    14ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	9c 8b       	std	Y+20, r25	; 0x14
    14d0:	8b 8b       	std	Y+19, r24	; 0x13
    14d2:	0f c0       	rjmp	.+30     	; 0x14f2 <HLCD_voidSendChar+0x2b6>
    14d4:	88 ec       	ldi	r24, 0xC8	; 200
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9a 8b       	std	Y+18, r25	; 0x12
    14da:	89 8b       	std	Y+17, r24	; 0x11
    14dc:	89 89       	ldd	r24, Y+17	; 0x11
    14de:	9a 89       	ldd	r25, Y+18	; 0x12
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <HLCD_voidSendChar+0x2a4>
    14e4:	9a 8b       	std	Y+18, r25	; 0x12
    14e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ea:	9c 89       	ldd	r25, Y+20	; 0x14
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f2:	8b 89       	ldd	r24, Y+19	; 0x13
    14f4:	9c 89       	ldd	r25, Y+20	; 0x14
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	69 f7       	brne	.-38     	; 0x14d4 <HLCD_voidSendChar+0x298>
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <HLCD_voidSendChar+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fc:	6d 89       	ldd	r22, Y+21	; 0x15
    14fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1500:	8f 89       	ldd	r24, Y+23	; 0x17
    1502:	98 8d       	ldd	r25, Y+24	; 0x18
    1504:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	9c 8b       	std	Y+20, r25	; 0x14
    150e:	8b 8b       	std	Y+19, r24	; 0x13
    1510:	8b 89       	ldd	r24, Y+19	; 0x13
    1512:	9c 89       	ldd	r25, Y+20	; 0x14
    1514:	98 8b       	std	Y+16, r25	; 0x10
    1516:	8f 87       	std	Y+15, r24	; 0x0f
    1518:	8f 85       	ldd	r24, Y+15	; 0x0f
    151a:	98 89       	ldd	r25, Y+16	; 0x10
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <HLCD_voidSendChar+0x2e0>
    1520:	98 8b       	std	Y+16, r25	; 0x10
    1522:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_LOW);
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	63 e0       	ldi	r22, 0x03	; 3
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a0 e0       	ldi	r26, 0x00	; 0
    1534:	b0 e4       	ldi	r27, 0x40	; 64
    1536:	8b 87       	std	Y+11, r24	; 0x0b
    1538:	9c 87       	std	Y+12, r25	; 0x0c
    153a:	ad 87       	std	Y+13, r26	; 0x0d
    153c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1540:	7c 85       	ldd	r23, Y+12	; 0x0c
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	9e 85       	ldd	r25, Y+14	; 0x0e
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	4a ef       	ldi	r20, 0xFA	; 250
    154c:	54 e4       	ldi	r21, 0x44	; 68
    154e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	8f 83       	std	Y+7, r24	; 0x07
    1558:	98 87       	std	Y+8, r25	; 0x08
    155a:	a9 87       	std	Y+9, r26	; 0x09
    155c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    155e:	6f 81       	ldd	r22, Y+7	; 0x07
    1560:	78 85       	ldd	r23, Y+8	; 0x08
    1562:	89 85       	ldd	r24, Y+9	; 0x09
    1564:	9a 85       	ldd	r25, Y+10	; 0x0a
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e8       	ldi	r20, 0x80	; 128
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1572:	88 23       	and	r24, r24
    1574:	2c f4       	brge	.+10     	; 0x1580 <HLCD_voidSendChar+0x344>
		__ticks = 1;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	8d 83       	std	Y+5, r24	; 0x05
    157e:	3f c0       	rjmp	.+126    	; 0x15fe <HLCD_voidSendChar+0x3c2>
	else if (__tmp > 65535)
    1580:	6f 81       	ldd	r22, Y+7	; 0x07
    1582:	78 85       	ldd	r23, Y+8	; 0x08
    1584:	89 85       	ldd	r24, Y+9	; 0x09
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	3f ef       	ldi	r19, 0xFF	; 255
    158c:	4f e7       	ldi	r20, 0x7F	; 127
    158e:	57 e4       	ldi	r21, 0x47	; 71
    1590:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1594:	18 16       	cp	r1, r24
    1596:	4c f5       	brge	.+82     	; 0x15ea <HLCD_voidSendChar+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1598:	6b 85       	ldd	r22, Y+11	; 0x0b
    159a:	7c 85       	ldd	r23, Y+12	; 0x0c
    159c:	8d 85       	ldd	r24, Y+13	; 0x0d
    159e:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e2       	ldi	r20, 0x20	; 32
    15a6:	51 e4       	ldi	r21, 0x41	; 65
    15a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	0f c0       	rjmp	.+30     	; 0x15e0 <HLCD_voidSendChar+0x3a4>
    15c2:	88 ec       	ldi	r24, 0xC8	; 200
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9c 83       	std	Y+4, r25	; 0x04
    15c8:	8b 83       	std	Y+3, r24	; 0x03
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <HLCD_voidSendChar+0x392>
    15d2:	9c 83       	std	Y+4, r25	; 0x04
    15d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	9e 83       	std	Y+6, r25	; 0x06
    15de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	69 f7       	brne	.-38     	; 0x15c2 <HLCD_voidSendChar+0x386>
    15e8:	14 c0       	rjmp	.+40     	; 0x1612 <HLCD_voidSendChar+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ea:	6f 81       	ldd	r22, Y+7	; 0x07
    15ec:	78 85       	ldd	r23, Y+8	; 0x08
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <HLCD_voidSendChar+0x3ce>
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1612:	e9 96       	adiw	r28, 0x39	; 57
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <HLCD_voidSendCmd>:

void HLCD_voidSendCmd(u8 ARG_u8Cmd)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	6d 97       	sbiw	r28, 0x1d	; 29
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	8d 8f       	std	Y+29, r24	; 0x1d
	/*control preparation*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,MDIO_LOW);
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,MDIO_LOW);
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	62 e0       	ldi	r22, 0x02	; 2
    1648:	41 e0       	ldi	r20, 0x01	; 1
    164a:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>

	/*enable preparation & send cmd*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_HIGH);
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	63 e0       	ldi	r22, 0x03	; 3
    1652:	42 e0       	ldi	r20, 0x02	; 2
    1654:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a0 e8       	ldi	r26, 0x80	; 128
    165e:	bf e3       	ldi	r27, 0x3F	; 63
    1660:	89 8f       	std	Y+25, r24	; 0x19
    1662:	9a 8f       	std	Y+26, r25	; 0x1a
    1664:	ab 8f       	std	Y+27, r26	; 0x1b
    1666:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1668:	69 8d       	ldd	r22, Y+25	; 0x19
    166a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    166c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    166e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a ef       	ldi	r20, 0xFA	; 250
    1676:	54 e4       	ldi	r21, 0x44	; 68
    1678:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	8d 8b       	std	Y+21, r24	; 0x15
    1682:	9e 8b       	std	Y+22, r25	; 0x16
    1684:	af 8b       	std	Y+23, r26	; 0x17
    1686:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1688:	6d 89       	ldd	r22, Y+21	; 0x15
    168a:	7e 89       	ldd	r23, Y+22	; 0x16
    168c:	8f 89       	ldd	r24, Y+23	; 0x17
    168e:	98 8d       	ldd	r25, Y+24	; 0x18
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e8       	ldi	r20, 0x80	; 128
    1696:	5f e3       	ldi	r21, 0x3F	; 63
    1698:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    169c:	88 23       	and	r24, r24
    169e:	2c f4       	brge	.+10     	; 0x16aa <HLCD_voidSendCmd+0x86>
		__ticks = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9c 8b       	std	Y+20, r25	; 0x14
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
    16a8:	3f c0       	rjmp	.+126    	; 0x1728 <HLCD_voidSendCmd+0x104>
	else if (__tmp > 65535)
    16aa:	6d 89       	ldd	r22, Y+21	; 0x15
    16ac:	7e 89       	ldd	r23, Y+22	; 0x16
    16ae:	8f 89       	ldd	r24, Y+23	; 0x17
    16b0:	98 8d       	ldd	r25, Y+24	; 0x18
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	3f ef       	ldi	r19, 0xFF	; 255
    16b6:	4f e7       	ldi	r20, 0x7F	; 127
    16b8:	57 e4       	ldi	r21, 0x47	; 71
    16ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16be:	18 16       	cp	r1, r24
    16c0:	4c f5       	brge	.+82     	; 0x1714 <HLCD_voidSendCmd+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c2:	69 8d       	ldd	r22, Y+25	; 0x19
    16c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e2       	ldi	r20, 0x20	; 32
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9c 8b       	std	Y+20, r25	; 0x14
    16e8:	8b 8b       	std	Y+19, r24	; 0x13
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <HLCD_voidSendCmd+0xe6>
    16ec:	88 ec       	ldi	r24, 0xC8	; 200
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9a 8b       	std	Y+18, r25	; 0x12
    16f2:	89 8b       	std	Y+17, r24	; 0x11
    16f4:	89 89       	ldd	r24, Y+17	; 0x11
    16f6:	9a 89       	ldd	r25, Y+18	; 0x12
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <HLCD_voidSendCmd+0xd4>
    16fc:	9a 8b       	std	Y+18, r25	; 0x12
    16fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1700:	8b 89       	ldd	r24, Y+19	; 0x13
    1702:	9c 89       	ldd	r25, Y+20	; 0x14
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170a:	8b 89       	ldd	r24, Y+19	; 0x13
    170c:	9c 89       	ldd	r25, Y+20	; 0x14
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	69 f7       	brne	.-38     	; 0x16ec <HLCD_voidSendCmd+0xc8>
    1712:	14 c0       	rjmp	.+40     	; 0x173c <HLCD_voidSendCmd+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1714:	6d 89       	ldd	r22, Y+21	; 0x15
    1716:	7e 89       	ldd	r23, Y+22	; 0x16
    1718:	8f 89       	ldd	r24, Y+23	; 0x17
    171a:	98 8d       	ldd	r25, Y+24	; 0x18
    171c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9c 8b       	std	Y+20, r25	; 0x14
    1726:	8b 8b       	std	Y+19, r24	; 0x13
    1728:	8b 89       	ldd	r24, Y+19	; 0x13
    172a:	9c 89       	ldd	r25, Y+20	; 0x14
    172c:	98 8b       	std	Y+16, r25	; 0x10
    172e:	8f 87       	std	Y+15, r24	; 0x0f
    1730:	8f 85       	ldd	r24, Y+15	; 0x0f
    1732:	98 89       	ldd	r25, Y+16	; 0x10
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <HLCD_voidSendCmd+0x110>
    1738:	98 8b       	std	Y+16, r25	; 0x10
    173a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_stderrorSetPortValue(LCD_DATA_PORT,ARG_u8Cmd);
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1740:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <MDIO_stderrorSetPortValue>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a0 e8       	ldi	r26, 0x80	; 128
    174a:	bf e3       	ldi	r27, 0x3F	; 63
    174c:	8b 87       	std	Y+11, r24	; 0x0b
    174e:	9c 87       	std	Y+12, r25	; 0x0c
    1750:	ad 87       	std	Y+13, r26	; 0x0d
    1752:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1754:	6b 85       	ldd	r22, Y+11	; 0x0b
    1756:	7c 85       	ldd	r23, Y+12	; 0x0c
    1758:	8d 85       	ldd	r24, Y+13	; 0x0d
    175a:	9e 85       	ldd	r25, Y+14	; 0x0e
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4a ef       	ldi	r20, 0xFA	; 250
    1762:	54 e4       	ldi	r21, 0x44	; 68
    1764:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	8f 83       	std	Y+7, r24	; 0x07
    176e:	98 87       	std	Y+8, r25	; 0x08
    1770:	a9 87       	std	Y+9, r26	; 0x09
    1772:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1774:	6f 81       	ldd	r22, Y+7	; 0x07
    1776:	78 85       	ldd	r23, Y+8	; 0x08
    1778:	89 85       	ldd	r24, Y+9	; 0x09
    177a:	9a 85       	ldd	r25, Y+10	; 0x0a
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e8       	ldi	r20, 0x80	; 128
    1782:	5f e3       	ldi	r21, 0x3F	; 63
    1784:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1788:	88 23       	and	r24, r24
    178a:	2c f4       	brge	.+10     	; 0x1796 <HLCD_voidSendCmd+0x172>
		__ticks = 1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
    1794:	3f c0       	rjmp	.+126    	; 0x1814 <HLCD_voidSendCmd+0x1f0>
	else if (__tmp > 65535)
    1796:	6f 81       	ldd	r22, Y+7	; 0x07
    1798:	78 85       	ldd	r23, Y+8	; 0x08
    179a:	89 85       	ldd	r24, Y+9	; 0x09
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	3f ef       	ldi	r19, 0xFF	; 255
    17a2:	4f e7       	ldi	r20, 0x7F	; 127
    17a4:	57 e4       	ldi	r21, 0x47	; 71
    17a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17aa:	18 16       	cp	r1, r24
    17ac:	4c f5       	brge	.+82     	; 0x1800 <HLCD_voidSendCmd+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e2       	ldi	r20, 0x20	; 32
    17bc:	51 e4       	ldi	r21, 0x41	; 65
    17be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	bc 01       	movw	r22, r24
    17c8:	cd 01       	movw	r24, r26
    17ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <HLCD_voidSendCmd+0x1d2>
    17d8:	88 ec       	ldi	r24, 0xC8	; 200
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9c 83       	std	Y+4, r25	; 0x04
    17de:	8b 83       	std	Y+3, r24	; 0x03
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <HLCD_voidSendCmd+0x1c0>
    17e8:	9c 83       	std	Y+4, r25	; 0x04
    17ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	9e 81       	ldd	r25, Y+6	; 0x06
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	69 f7       	brne	.-38     	; 0x17d8 <HLCD_voidSendCmd+0x1b4>
    17fe:	14 c0       	rjmp	.+40     	; 0x1828 <HLCD_voidSendCmd+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1800:	6f 81       	ldd	r22, Y+7	; 0x07
    1802:	78 85       	ldd	r23, Y+8	; 0x08
    1804:	89 85       	ldd	r24, Y+9	; 0x09
    1806:	9a 85       	ldd	r25, Y+10	; 0x0a
    1808:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	9a 81       	ldd	r25, Y+2	; 0x02
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <HLCD_voidSendCmd+0x1fc>
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_LOW);
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	63 e0       	ldi	r22, 0x03	; 3
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>

}
    1832:	6d 96       	adiw	r28, 0x1d	; 29
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <HLCD_voidSendString>:
void HLCD_voidSendString(const char * ARG_ccharpString)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <HLCD_voidSendString+0x6>
    184a:	0f 92       	push	r0
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	9b 83       	std	Y+3, r25	; 0x03
    1852:	8a 83       	std	Y+2, r24	; 0x02
	if(ARG_ccharpString != NULL_POINTER )
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	9b 81       	ldd	r25, Y+3	; 0x03
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	d1 f0       	breq	.+52     	; 0x1890 <HLCD_voidSendString+0x4c>
	{
		u8 L_u8i=0;
    185c:	19 82       	std	Y+1, r1	; 0x01
		do{
			HLCD_voidSendChar(ARG_ccharpString[L_u8i]);
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	9b 81       	ldd	r25, Y+3	; 0x03
    1868:	fc 01       	movw	r30, r24
    186a:	e2 0f       	add	r30, r18
    186c:	f3 1f       	adc	r31, r19
    186e:	80 81       	ld	r24, Z
    1870:	0e 94 1e 09 	call	0x123c	; 0x123c <HLCD_voidSendChar>
			L_u8i++;
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	8f 5f       	subi	r24, 0xFF	; 255
    1878:	89 83       	std	Y+1, r24	; 0x01
		}while(ARG_ccharpString[L_u8i] != '\0' );
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	9b 81       	ldd	r25, Y+3	; 0x03
    1884:	fc 01       	movw	r30, r24
    1886:	e2 0f       	add	r30, r18
    1888:	f3 1f       	adc	r31, r19
    188a:	80 81       	ld	r24, Z
    188c:	88 23       	and	r24, r24
    188e:	39 f7       	brne	.-50     	; 0x185e <HLCD_voidSendString+0x1a>
	}

}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <HLCD_voidSetCursor>:
void HLCD_voidSetCursor(u8 ARG_u8Row,u8 ARG_u8Col)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <HLCD_voidSetCursor+0x6>
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	6a 83       	std	Y+2, r22	; 0x02

	HLCD_voidSendCmd((0x80+ARG_u8Col+((ARG_u8Row*4)<<4)));
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	98 2f       	mov	r25, r24
    18ba:	92 95       	swap	r25
    18bc:	90 7f       	andi	r25, 0xF0	; 240
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	89 0f       	add	r24, r25
    18c2:	80 58       	subi	r24, 0x80	; 128
    18c4:	0e 94 12 0b 	call	0x1624	; 0x1624 <HLCD_voidSendCmd>
}
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <HLCD_voidWriteCustom>:
void HLCD_voidWriteCustom(const char * ARG_ccharpString,u8 ARG_u8Location)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <HLCD_voidWriteCustom+0x6>
    18d8:	00 d0       	rcall	.+0      	; 0x18da <HLCD_voidWriteCustom+0x8>
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	9c 83       	std	Y+4, r25	; 0x04
    18e2:	8b 83       	std	Y+3, r24	; 0x03
    18e4:	6d 83       	std	Y+5, r22	; 0x05
	u8 L_u8address =0;
    18e6:	1a 82       	std	Y+2, r1	; 0x02


	if(ARG_u8Location<8)
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	88 30       	cpi	r24, 0x08	; 8
    18ec:	30 f5       	brcc	.+76     	; 0x193a <HLCD_voidWriteCustom+0x68>
	{
		L_u8address=ARG_u8Location*8;
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	8a 83       	std	Y+2, r24	; 0x02
		/*0-1-D5-D4-D3-D2-D1-D0 TO GO TO CGRAM D5-D0 LOCATION 0-7*/
		SET_BIT(L_u8address,6);
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	80 64       	ori	r24, 0x40	; 64
    1906:	8a 83       	std	Y+2, r24	; 0x02
		HLCD_voidSendCmd(L_u8address);
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	0e 94 12 0b 	call	0x1624	; 0x1624 <HLCD_voidSendCmd>
		u8 L_u8i;
		for(L_u8i=0;L_u8i<8;L_u8i++)
    190e:	19 82       	std	Y+1, r1	; 0x01
    1910:	0e c0       	rjmp	.+28     	; 0x192e <HLCD_voidWriteCustom+0x5c>
		{
			HLCD_voidSendChar(ARG_ccharpString[L_u8i]);
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	fc 01       	movw	r30, r24
    191e:	e2 0f       	add	r30, r18
    1920:	f3 1f       	adc	r31, r19
    1922:	80 81       	ld	r24, Z
    1924:	0e 94 1e 09 	call	0x123c	; 0x123c <HLCD_voidSendChar>
		L_u8address=ARG_u8Location*8;
		/*0-1-D5-D4-D3-D2-D1-D0 TO GO TO CGRAM D5-D0 LOCATION 0-7*/
		SET_BIT(L_u8address,6);
		HLCD_voidSendCmd(L_u8address);
		u8 L_u8i;
		for(L_u8i=0;L_u8i<8;L_u8i++)
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	8f 5f       	subi	r24, 0xFF	; 255
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	88 30       	cpi	r24, 0x08	; 8
    1932:	78 f3       	brcs	.-34     	; 0x1912 <HLCD_voidWriteCustom+0x40>
		{
			HLCD_voidSendChar(ARG_ccharpString[L_u8i]);
		}
		HLCD_voidSendCmd(0x02);/*return home*/
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	0e 94 12 0b 	call	0x1624	; 0x1624 <HLCD_voidSendCmd>
	{


	}

}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCmd(0x01);//clear
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	0e 94 12 0b 	call	0x1624	; 0x1624 <HLCD_voidSendCmd>
}
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <HLCD_voidDisplayNumber>:



void HLCD_voidDisplayNumber(u8 ARG_u8Num)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	66 97       	sbiw	r28, 0x16	; 22
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	8e 8b       	std	Y+22, r24	; 0x16

	/* String to hold the ascii result */
	char Result[21];
	 /* 10 for decimal */
	itoa((int)ARG_u8Num,Result,10);
    1974:	8e 89       	ldd	r24, Y+22	; 0x16
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9e 01       	movw	r18, r28
    197c:	2f 5f       	subi	r18, 0xFF	; 255
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	b9 01       	movw	r22, r18
    1982:	4a e0       	ldi	r20, 0x0A	; 10
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <itoa>
	/* Display The Result */
	HLCD_voidSendString(Result);
    198a:	ce 01       	movw	r24, r28
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	0e 94 22 0c 	call	0x1844	; 0x1844 <HLCD_voidSendString>
}
    1992:	66 96       	adiw	r28, 0x16	; 22
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <MADC_stderrorInit>:
STD_error_t MADC_stderrorInit
(
	u8 ARG_u8RefVoltage, 
	u8 ARG_u8PreScalar
)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	27 97       	sbiw	r28, 0x07	; 7
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	8a 83       	std	Y+2, r24	; 0x02
    19ba:	6b 83       	std	Y+3, r22	; 0x03
	
	STD_error_t L_stderrorError=E_NOK;
    19bc:	19 82       	std	Y+1, r1	; 0x01
	
	if(((ARG_u8RefVoltage>=1)&&(ARG_u8RefVoltage<=3))&&((ARG_u8PreScalar>=1)&&(ARG_u8PreScalar<=7)))
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	88 23       	and	r24, r24
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <MADC_stderrorInit+0x22>
    19c4:	04 c1       	rjmp	.+520    	; 0x1bce <MADC_stderrorInit+0x22a>
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	84 30       	cpi	r24, 0x04	; 4
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <MADC_stderrorInit+0x2a>
    19cc:	00 c1       	rjmp	.+512    	; 0x1bce <MADC_stderrorInit+0x22a>
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 23       	and	r24, r24
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <MADC_stderrorInit+0x32>
    19d4:	fc c0       	rjmp	.+504    	; 0x1bce <MADC_stderrorInit+0x22a>
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	88 30       	cpi	r24, 0x08	; 8
    19da:	08 f0       	brcs	.+2      	; 0x19de <MADC_stderrorInit+0x3a>
    19dc:	f8 c0       	rjmp	.+496    	; 0x1bce <MADC_stderrorInit+0x22a>
	{
		
		switch(ARG_u8PreScalar)
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	3f 83       	std	Y+7, r19	; 0x07
    19e6:	2e 83       	std	Y+6, r18	; 0x06
    19e8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ea:	9f 81       	ldd	r25, Y+7	; 0x07
    19ec:	84 30       	cpi	r24, 0x04	; 4
    19ee:	91 05       	cpc	r25, r1
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <MADC_stderrorInit+0x50>
    19f2:	5e c0       	rjmp	.+188    	; 0x1ab0 <MADC_stderrorInit+0x10c>
    19f4:	2e 81       	ldd	r18, Y+6	; 0x06
    19f6:	3f 81       	ldd	r19, Y+7	; 0x07
    19f8:	25 30       	cpi	r18, 0x05	; 5
    19fa:	31 05       	cpc	r19, r1
    19fc:	84 f4       	brge	.+32     	; 0x1a1e <MADC_stderrorInit+0x7a>
    19fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1a00:	9f 81       	ldd	r25, Y+7	; 0x07
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	91 05       	cpc	r25, r1
    1a06:	81 f1       	breq	.+96     	; 0x1a68 <MADC_stderrorInit+0xc4>
    1a08:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0c:	23 30       	cpi	r18, 0x03	; 3
    1a0e:	31 05       	cpc	r19, r1
    1a10:	ec f5       	brge	.+122    	; 0x1a8c <MADC_stderrorInit+0xe8>
    1a12:	8e 81       	ldd	r24, Y+6	; 0x06
    1a14:	9f 81       	ldd	r25, Y+7	; 0x07
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	91 05       	cpc	r25, r1
    1a1a:	a1 f0       	breq	.+40     	; 0x1a44 <MADC_stderrorInit+0xa0>
    1a1c:	91 c0       	rjmp	.+290    	; 0x1b40 <MADC_stderrorInit+0x19c>
    1a1e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a20:	3f 81       	ldd	r19, Y+7	; 0x07
    1a22:	26 30       	cpi	r18, 0x06	; 6
    1a24:	31 05       	cpc	r19, r1
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <MADC_stderrorInit+0x86>
    1a28:	67 c0       	rjmp	.+206    	; 0x1af8 <MADC_stderrorInit+0x154>
    1a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2e:	86 30       	cpi	r24, 0x06	; 6
    1a30:	91 05       	cpc	r25, r1
    1a32:	0c f4       	brge	.+2      	; 0x1a36 <MADC_stderrorInit+0x92>
    1a34:	4f c0       	rjmp	.+158    	; 0x1ad4 <MADC_stderrorInit+0x130>
    1a36:	2e 81       	ldd	r18, Y+6	; 0x06
    1a38:	3f 81       	ldd	r19, Y+7	; 0x07
    1a3a:	27 30       	cpi	r18, 0x07	; 7
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <MADC_stderrorInit+0x9e>
    1a40:	6d c0       	rjmp	.+218    	; 0x1b1c <MADC_stderrorInit+0x178>
    1a42:	7e c0       	rjmp	.+252    	; 0x1b40 <MADC_stderrorInit+0x19c>
		{
			case MADC_PreScalar_2   : ADPS2=0;ADPS1=0;ADPS0=1;L_stderrorError = E_OK;break;
    1a44:	e6 e2       	ldi	r30, 0x26	; 38
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8b 7f       	andi	r24, 0xFB	; 251
    1a4c:	80 83       	st	Z, r24
    1a4e:	e6 e2       	ldi	r30, 0x26	; 38
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	8d 7f       	andi	r24, 0xFD	; 253
    1a56:	80 83       	st	Z, r24
    1a58:	e6 e2       	ldi	r30, 0x26	; 38
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	81 60       	ori	r24, 0x01	; 1
    1a60:	80 83       	st	Z, r24
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	6d c0       	rjmp	.+218    	; 0x1b42 <MADC_stderrorInit+0x19e>
			case MADC_PreScalar_4   : ADPS2=0;ADPS1=1;ADPS0=0;L_stderrorError = E_OK;break;
    1a68:	e6 e2       	ldi	r30, 0x26	; 38
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8b 7f       	andi	r24, 0xFB	; 251
    1a70:	80 83       	st	Z, r24
    1a72:	e6 e2       	ldi	r30, 0x26	; 38
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	82 60       	ori	r24, 0x02	; 2
    1a7a:	80 83       	st	Z, r24
    1a7c:	e6 e2       	ldi	r30, 0x26	; 38
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8e 7f       	andi	r24, 0xFE	; 254
    1a84:	80 83       	st	Z, r24
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	5b c0       	rjmp	.+182    	; 0x1b42 <MADC_stderrorInit+0x19e>
			case MADC_PreScalar_8   : ADPS2=0;ADPS1=1;ADPS0=1;L_stderrorError = E_OK;break;
    1a8c:	e6 e2       	ldi	r30, 0x26	; 38
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	8b 7f       	andi	r24, 0xFB	; 251
    1a94:	80 83       	st	Z, r24
    1a96:	e6 e2       	ldi	r30, 0x26	; 38
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	82 60       	ori	r24, 0x02	; 2
    1a9e:	80 83       	st	Z, r24
    1aa0:	e6 e2       	ldi	r30, 0x26	; 38
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	81 60       	ori	r24, 0x01	; 1
    1aa8:	80 83       	st	Z, r24
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	49 c0       	rjmp	.+146    	; 0x1b42 <MADC_stderrorInit+0x19e>
			case MADC_PreScalar_16  : ADPS2=1;ADPS1=0;ADPS0=0;L_stderrorError = E_OK;break;
    1ab0:	e6 e2       	ldi	r30, 0x26	; 38
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	84 60       	ori	r24, 0x04	; 4
    1ab8:	80 83       	st	Z, r24
    1aba:	e6 e2       	ldi	r30, 0x26	; 38
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	8d 7f       	andi	r24, 0xFD	; 253
    1ac2:	80 83       	st	Z, r24
    1ac4:	e6 e2       	ldi	r30, 0x26	; 38
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	8e 7f       	andi	r24, 0xFE	; 254
    1acc:	80 83       	st	Z, r24
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	37 c0       	rjmp	.+110    	; 0x1b42 <MADC_stderrorInit+0x19e>
			case MADC_PreScalar_32  : ADPS2=1;ADPS1=0;ADPS0=1;L_stderrorError = E_OK;break;
    1ad4:	e6 e2       	ldi	r30, 0x26	; 38
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	84 60       	ori	r24, 0x04	; 4
    1adc:	80 83       	st	Z, r24
    1ade:	e6 e2       	ldi	r30, 0x26	; 38
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8d 7f       	andi	r24, 0xFD	; 253
    1ae6:	80 83       	st	Z, r24
    1ae8:	e6 e2       	ldi	r30, 0x26	; 38
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	81 60       	ori	r24, 0x01	; 1
    1af0:	80 83       	st	Z, r24
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	25 c0       	rjmp	.+74     	; 0x1b42 <MADC_stderrorInit+0x19e>
			case MADC_PreScalar_64  : ADPS2=1;ADPS1=1;ADPS0=0;L_stderrorError = E_OK;break;
    1af8:	e6 e2       	ldi	r30, 0x26	; 38
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	84 60       	ori	r24, 0x04	; 4
    1b00:	80 83       	st	Z, r24
    1b02:	e6 e2       	ldi	r30, 0x26	; 38
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	82 60       	ori	r24, 0x02	; 2
    1b0a:	80 83       	st	Z, r24
    1b0c:	e6 e2       	ldi	r30, 0x26	; 38
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	8e 7f       	andi	r24, 0xFE	; 254
    1b14:	80 83       	st	Z, r24
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	13 c0       	rjmp	.+38     	; 0x1b42 <MADC_stderrorInit+0x19e>
			case MADC_PreScalar_128 : ADPS2=1;ADPS1=1;ADPS0=1;L_stderrorError = E_OK;break;
    1b1c:	e6 e2       	ldi	r30, 0x26	; 38
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	84 60       	ori	r24, 0x04	; 4
    1b24:	80 83       	st	Z, r24
    1b26:	e6 e2       	ldi	r30, 0x26	; 38
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	82 60       	ori	r24, 0x02	; 2
    1b2e:	80 83       	st	Z, r24
    1b30:	e6 e2       	ldi	r30, 0x26	; 38
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	81 60       	ori	r24, 0x01	; 1
    1b38:	80 83       	st	Z, r24
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <MADC_stderrorInit+0x19e>
			default :L_stderrorError=E_NOK;break;
    1b40:	19 82       	std	Y+1, r1	; 0x01
		}
		
		
		switch(ARG_u8RefVoltage)
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	3d 83       	std	Y+5, r19	; 0x05
    1b4a:	2c 83       	std	Y+4, r18	; 0x04
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	91 05       	cpc	r25, r1
    1b54:	b9 f0       	breq	.+46     	; 0x1b84 <MADC_stderrorInit+0x1e0>
    1b56:	2c 81       	ldd	r18, Y+4	; 0x04
    1b58:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5a:	23 30       	cpi	r18, 0x03	; 3
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	f9 f0       	breq	.+62     	; 0x1b9e <MADC_stderrorInit+0x1fa>
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	9d 81       	ldd	r25, Y+5	; 0x05
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	91 05       	cpc	r25, r1
    1b68:	39 f5       	brne	.+78     	; 0x1bb8 <MADC_stderrorInit+0x214>
		{
			
			case MADC_VREF_AREF  : REFS0=0;REFS0=0;L_stderrorError = E_OK;break;
    1b6a:	e7 e2       	ldi	r30, 0x27	; 39
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	8f 7b       	andi	r24, 0xBF	; 191
    1b72:	80 83       	st	Z, r24
    1b74:	e7 e2       	ldi	r30, 0x27	; 39
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	8f 7b       	andi	r24, 0xBF	; 191
    1b7c:	80 83       	st	Z, r24
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	1b c0       	rjmp	.+54     	; 0x1bba <MADC_stderrorInit+0x216>
			case MADC_VREF_AVCC  : REFS0=0;REFS0=1;L_stderrorError = E_OK;break;
    1b84:	e7 e2       	ldi	r30, 0x27	; 39
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	8f 7b       	andi	r24, 0xBF	; 191
    1b8c:	80 83       	st	Z, r24
    1b8e:	e7 e2       	ldi	r30, 0x27	; 39
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 64       	ori	r24, 0x40	; 64
    1b96:	80 83       	st	Z, r24
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	0e c0       	rjmp	.+28     	; 0x1bba <MADC_stderrorInit+0x216>
			case MADC_VREF_2_56V : REFS0=1;REFS0=1;L_stderrorError = E_OK;break;
    1b9e:	e7 e2       	ldi	r30, 0x27	; 39
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 64       	ori	r24, 0x40	; 64
    1ba6:	80 83       	st	Z, r24
    1ba8:	e7 e2       	ldi	r30, 0x27	; 39
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	80 64       	ori	r24, 0x40	; 64
    1bb0:	80 83       	st	Z, r24
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <MADC_stderrorInit+0x216>
			default :L_stderrorError=E_NOK;break;
    1bb8:	19 82       	std	Y+1, r1	; 0x01
		}
		
		ADLAR=MADC_Enable;
    1bba:	e7 e2       	ldi	r30, 0x27	; 39
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 62       	ori	r24, 0x20	; 32
    1bc2:	80 83       	st	Z, r24
		ADATE=MADC_Enable;
    1bc4:	e6 e2       	ldi	r30, 0x26	; 38
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	80 62       	ori	r24, 0x20	; 32
    1bcc:	80 83       	st	Z, r24

	}
	
	return L_stderrorError;
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1bd0:	27 96       	adiw	r28, 0x07	; 7
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <MADC_voidEnableADC>:

void MADC_voidEnableADC
(
	void
)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
	
	ADEN=MADC_Enable;
    1bea:	e6 e2       	ldi	r30, 0x26	; 38
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 68       	ori	r24, 0x80	; 128
    1bf2:	80 83       	st	Z, r24
}
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <MADC_voidDisableADC>:

void MADC_voidDisableADC
(
	void
)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
	
	ADEN=MADC_Disable;
    1c02:	e6 e2       	ldi	r30, 0x26	; 38
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	8f 77       	andi	r24, 0x7F	; 127
    1c0a:	80 83       	st	Z, r24
}
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <MADC_voidEnableInterrupt>:

void MADC_voidEnableInterrupt
(
	void
)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
	
	ADIE=MADC_Enable;
    1c1a:	e6 e2       	ldi	r30, 0x26	; 38
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	88 60       	ori	r24, 0x08	; 8
    1c22:	80 83       	st	Z, r24
}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <MADC_voidDisableInterrupt>:

void MADC_voidDisableInterrupt
(
	void
)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
	
	ADIE=MADC_Disable;
    1c32:	e6 e2       	ldi	r30, 0x26	; 38
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	87 7f       	andi	r24, 0xF7	; 247
    1c3a:	80 83       	st	Z, r24
}
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <MADC_stderrorStartConversion>:

STD_error_t	MADC_stderrorStartConversion
(
	u8 ARG_u8Channel
)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <MADC_stderrorStartConversion+0x6>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <MADC_stderrorStartConversion+0x8>
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
	
	STD_error_t L_stderrorError=E_NOK;
    1c50:	19 82       	std	Y+1, r1	; 0x01
	
	if(ARG_u8Channel>=1&&ARG_u8Channel<=31)
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	88 23       	and	r24, r24
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <MADC_stderrorStartConversion+0x18>
    1c58:	26 c1       	rjmp	.+588    	; 0x1ea6 <MADC_stderrorStartConversion+0x264>
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	80 32       	cpi	r24, 0x20	; 32
    1c5e:	08 f0       	brcs	.+2      	; 0x1c62 <MADC_stderrorStartConversion+0x20>
    1c60:	22 c1       	rjmp	.+580    	; 0x1ea6 <MADC_stderrorStartConversion+0x264>
	{

		switch(ARG_u8Channel)
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	3c 83       	std	Y+4, r19	; 0x04
    1c6a:	2b 83       	std	Y+3, r18	; 0x03
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	84 30       	cpi	r24, 0x04	; 4
    1c72:	91 05       	cpc	r25, r1
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <MADC_stderrorStartConversion+0x36>
    1c76:	84 c0       	rjmp	.+264    	; 0x1d80 <MADC_stderrorStartConversion+0x13e>
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	25 30       	cpi	r18, 0x05	; 5
    1c7e:	31 05       	cpc	r19, r1
    1c80:	94 f4       	brge	.+36     	; 0x1ca6 <MADC_stderrorStartConversion+0x64>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	82 30       	cpi	r24, 0x02	; 2
    1c88:	91 05       	cpc	r25, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <MADC_stderrorStartConversion+0x4c>
    1c8c:	41 c0       	rjmp	.+130    	; 0x1d10 <MADC_stderrorStartConversion+0xce>
    1c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c90:	3c 81       	ldd	r19, Y+4	; 0x04
    1c92:	23 30       	cpi	r18, 0x03	; 3
    1c94:	31 05       	cpc	r19, r1
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <MADC_stderrorStartConversion+0x58>
    1c98:	57 c0       	rjmp	.+174    	; 0x1d48 <MADC_stderrorStartConversion+0x106>
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	d1 f0       	breq	.+52     	; 0x1cd8 <MADC_stderrorStartConversion+0x96>
    1ca4:	f9 c0       	rjmp	.+498    	; 0x1e98 <MADC_stderrorStartConversion+0x256>
    1ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    1caa:	26 30       	cpi	r18, 0x06	; 6
    1cac:	31 05       	cpc	r19, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <MADC_stderrorStartConversion+0x70>
    1cb0:	9f c0       	rjmp	.+318    	; 0x1df0 <MADC_stderrorStartConversion+0x1ae>
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	86 30       	cpi	r24, 0x06	; 6
    1cb8:	91 05       	cpc	r25, r1
    1cba:	0c f4       	brge	.+2      	; 0x1cbe <MADC_stderrorStartConversion+0x7c>
    1cbc:	7d c0       	rjmp	.+250    	; 0x1db8 <MADC_stderrorStartConversion+0x176>
    1cbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc2:	27 30       	cpi	r18, 0x07	; 7
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <MADC_stderrorStartConversion+0x88>
    1cc8:	af c0       	rjmp	.+350    	; 0x1e28 <MADC_stderrorStartConversion+0x1e6>
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	88 30       	cpi	r24, 0x08	; 8
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <MADC_stderrorStartConversion+0x94>
    1cd4:	c5 c0       	rjmp	.+394    	; 0x1e60 <MADC_stderrorStartConversion+0x21e>
    1cd6:	e0 c0       	rjmp	.+448    	; 0x1e98 <MADC_stderrorStartConversion+0x256>
		{
			case MADC_CHANNEL_ADC0 : MUX4=0;MUX3=0;MUX2=0;MUX1=0;MUX0=0;L_stderrorError = E_OK;break;
    1cd8:	e7 e2       	ldi	r30, 0x27	; 39
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8f 7e       	andi	r24, 0xEF	; 239
    1ce0:	80 83       	st	Z, r24
    1ce2:	e7 e2       	ldi	r30, 0x27	; 39
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	87 7f       	andi	r24, 0xF7	; 247
    1cea:	80 83       	st	Z, r24
    1cec:	e7 e2       	ldi	r30, 0x27	; 39
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8b 7f       	andi	r24, 0xFB	; 251
    1cf4:	80 83       	st	Z, r24
    1cf6:	e7 e2       	ldi	r30, 0x27	; 39
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8d 7f       	andi	r24, 0xFD	; 253
    1cfe:	80 83       	st	Z, r24
    1d00:	e7 e2       	ldi	r30, 0x27	; 39
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	8e 7f       	andi	r24, 0xFE	; 254
    1d08:	80 83       	st	Z, r24
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	c5 c0       	rjmp	.+394    	; 0x1e9a <MADC_stderrorStartConversion+0x258>
			case MADC_CHANNEL_ADC1 : MUX4=0;MUX3=0;MUX2=0;MUX1=0;MUX0=1;L_stderrorError = E_OK;break;
    1d10:	e7 e2       	ldi	r30, 0x27	; 39
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	8f 7e       	andi	r24, 0xEF	; 239
    1d18:	80 83       	st	Z, r24
    1d1a:	e7 e2       	ldi	r30, 0x27	; 39
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	87 7f       	andi	r24, 0xF7	; 247
    1d22:	80 83       	st	Z, r24
    1d24:	e7 e2       	ldi	r30, 0x27	; 39
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8b 7f       	andi	r24, 0xFB	; 251
    1d2c:	80 83       	st	Z, r24
    1d2e:	e7 e2       	ldi	r30, 0x27	; 39
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8d 7f       	andi	r24, 0xFD	; 253
    1d36:	80 83       	st	Z, r24
    1d38:	e7 e2       	ldi	r30, 0x27	; 39
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	81 60       	ori	r24, 0x01	; 1
    1d40:	80 83       	st	Z, r24
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	a9 c0       	rjmp	.+338    	; 0x1e9a <MADC_stderrorStartConversion+0x258>
			case MADC_CHANNEL_ADC2 : MUX4=0;MUX3=0;MUX2=0;MUX1=1;MUX0=0;L_stderrorError = E_OK;break;
    1d48:	e7 e2       	ldi	r30, 0x27	; 39
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8f 7e       	andi	r24, 0xEF	; 239
    1d50:	80 83       	st	Z, r24
    1d52:	e7 e2       	ldi	r30, 0x27	; 39
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	87 7f       	andi	r24, 0xF7	; 247
    1d5a:	80 83       	st	Z, r24
    1d5c:	e7 e2       	ldi	r30, 0x27	; 39
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8b 7f       	andi	r24, 0xFB	; 251
    1d64:	80 83       	st	Z, r24
    1d66:	e7 e2       	ldi	r30, 0x27	; 39
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	82 60       	ori	r24, 0x02	; 2
    1d6e:	80 83       	st	Z, r24
    1d70:	e7 e2       	ldi	r30, 0x27	; 39
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8e 7f       	andi	r24, 0xFE	; 254
    1d78:	80 83       	st	Z, r24
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	8d c0       	rjmp	.+282    	; 0x1e9a <MADC_stderrorStartConversion+0x258>
			case MADC_CHANNEL_ADC3 : MUX4=0;MUX3=0;MUX2=0;MUX1=1;MUX0=1;L_stderrorError = E_OK;break;
    1d80:	e7 e2       	ldi	r30, 0x27	; 39
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 7e       	andi	r24, 0xEF	; 239
    1d88:	80 83       	st	Z, r24
    1d8a:	e7 e2       	ldi	r30, 0x27	; 39
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	87 7f       	andi	r24, 0xF7	; 247
    1d92:	80 83       	st	Z, r24
    1d94:	e7 e2       	ldi	r30, 0x27	; 39
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	8b 7f       	andi	r24, 0xFB	; 251
    1d9c:	80 83       	st	Z, r24
    1d9e:	e7 e2       	ldi	r30, 0x27	; 39
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	82 60       	ori	r24, 0x02	; 2
    1da6:	80 83       	st	Z, r24
    1da8:	e7 e2       	ldi	r30, 0x27	; 39
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	81 60       	ori	r24, 0x01	; 1
    1db0:	80 83       	st	Z, r24
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	71 c0       	rjmp	.+226    	; 0x1e9a <MADC_stderrorStartConversion+0x258>
			case MADC_CHANNEL_ADC4 : MUX4=0;MUX3=0;MUX2=1;MUX1=0;MUX0=0;L_stderrorError = E_OK;break;
    1db8:	e7 e2       	ldi	r30, 0x27	; 39
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8f 7e       	andi	r24, 0xEF	; 239
    1dc0:	80 83       	st	Z, r24
    1dc2:	e7 e2       	ldi	r30, 0x27	; 39
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	87 7f       	andi	r24, 0xF7	; 247
    1dca:	80 83       	st	Z, r24
    1dcc:	e7 e2       	ldi	r30, 0x27	; 39
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	84 60       	ori	r24, 0x04	; 4
    1dd4:	80 83       	st	Z, r24
    1dd6:	e7 e2       	ldi	r30, 0x27	; 39
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	8d 7f       	andi	r24, 0xFD	; 253
    1dde:	80 83       	st	Z, r24
    1de0:	e7 e2       	ldi	r30, 0x27	; 39
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8e 7f       	andi	r24, 0xFE	; 254
    1de8:	80 83       	st	Z, r24
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	55 c0       	rjmp	.+170    	; 0x1e9a <MADC_stderrorStartConversion+0x258>
			case MADC_CHANNEL_ADC5 : MUX4=0;MUX3=0;MUX2=1;MUX1=0;MUX0=1;L_stderrorError = E_OK;break;
    1df0:	e7 e2       	ldi	r30, 0x27	; 39
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8f 7e       	andi	r24, 0xEF	; 239
    1df8:	80 83       	st	Z, r24
    1dfa:	e7 e2       	ldi	r30, 0x27	; 39
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	87 7f       	andi	r24, 0xF7	; 247
    1e02:	80 83       	st	Z, r24
    1e04:	e7 e2       	ldi	r30, 0x27	; 39
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	84 60       	ori	r24, 0x04	; 4
    1e0c:	80 83       	st	Z, r24
    1e0e:	e7 e2       	ldi	r30, 0x27	; 39
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	8d 7f       	andi	r24, 0xFD	; 253
    1e16:	80 83       	st	Z, r24
    1e18:	e7 e2       	ldi	r30, 0x27	; 39
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	81 60       	ori	r24, 0x01	; 1
    1e20:	80 83       	st	Z, r24
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	39 c0       	rjmp	.+114    	; 0x1e9a <MADC_stderrorStartConversion+0x258>
			case MADC_CHANNEL_ADC6 : MUX4=0;MUX3=0;MUX2=1;MUX1=1;MUX0=0;L_stderrorError = E_OK;break;
    1e28:	e7 e2       	ldi	r30, 0x27	; 39
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8f 7e       	andi	r24, 0xEF	; 239
    1e30:	80 83       	st	Z, r24
    1e32:	e7 e2       	ldi	r30, 0x27	; 39
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	87 7f       	andi	r24, 0xF7	; 247
    1e3a:	80 83       	st	Z, r24
    1e3c:	e7 e2       	ldi	r30, 0x27	; 39
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	84 60       	ori	r24, 0x04	; 4
    1e44:	80 83       	st	Z, r24
    1e46:	e7 e2       	ldi	r30, 0x27	; 39
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	82 60       	ori	r24, 0x02	; 2
    1e4e:	80 83       	st	Z, r24
    1e50:	e7 e2       	ldi	r30, 0x27	; 39
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	8e 7f       	andi	r24, 0xFE	; 254
    1e58:	80 83       	st	Z, r24
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	1d c0       	rjmp	.+58     	; 0x1e9a <MADC_stderrorStartConversion+0x258>
			case MADC_CHANNEL_ADC7 : MUX4=0;MUX3=0;MUX2=1;MUX1=1;MUX0=1;L_stderrorError = E_OK;break;
    1e60:	e7 e2       	ldi	r30, 0x27	; 39
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	8f 7e       	andi	r24, 0xEF	; 239
    1e68:	80 83       	st	Z, r24
    1e6a:	e7 e2       	ldi	r30, 0x27	; 39
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	87 7f       	andi	r24, 0xF7	; 247
    1e72:	80 83       	st	Z, r24
    1e74:	e7 e2       	ldi	r30, 0x27	; 39
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	84 60       	ori	r24, 0x04	; 4
    1e7c:	80 83       	st	Z, r24
    1e7e:	e7 e2       	ldi	r30, 0x27	; 39
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	82 60       	ori	r24, 0x02	; 2
    1e86:	80 83       	st	Z, r24
    1e88:	e7 e2       	ldi	r30, 0x27	; 39
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	81 60       	ori	r24, 0x01	; 1
    1e90:	80 83       	st	Z, r24
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <MADC_stderrorStartConversion+0x258>
			default:L_stderrorError=E_NOK;break;
    1e98:	19 82       	std	Y+1, r1	; 0x01
		}
		
		ADSC=MADC_Enable;
    1e9a:	e6 e2       	ldi	r30, 0x26	; 38
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 64       	ori	r24, 0x40	; 64
    1ea2:	80 83       	st	Z, r24
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <MADC_stderrorStartConversion+0x266>
	}
	else
	{
		L_stderrorError=E_NOK;
    1ea6:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return L_stderrorError;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <MADC_voidFlagPolling>:

void MADC_voidFlagPolling
(
	void
)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
	
	while(!ADIF);
    1ec0:	e6 e2       	ldi	r30, 0x26	; 38
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	80 71       	andi	r24, 0x10	; 16
    1ec8:	88 23       	and	r24, r24
    1eca:	d1 f3       	breq	.-12     	; 0x1ec0 <MADC_voidFlagPolling+0x8>
}
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <MADC_voidClearFlag>:

void MADC_voidClearFlag
(
	void
)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	ADIF=MADC_Enable;
    1eda:	e6 e2       	ldi	r30, 0x26	; 38
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	80 61       	ori	r24, 0x10	; 16
    1ee2:	80 83       	st	Z, r24
}
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <MADC_stderrorReadADC>:
STD_error_t	MADC_stderrorReadADC
(
	u8* ARG_u8pADCReading,
	u8 ARG_u8Channel
)
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <MADC_stderrorReadADC+0x6>
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <MADC_stderrorReadADC+0x8>
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	9b 83       	std	Y+3, r25	; 0x03
    1ef8:	8a 83       	std	Y+2, r24	; 0x02
    1efa:	6c 83       	std	Y+4, r22	; 0x04
	
	STD_error_t L_stderrorError=E_NOK;
    1efc:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8pADCReading!=NULL_POINTER)
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	9b 81       	ldd	r25, Y+3	; 0x03
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	69 f0       	breq	.+26     	; 0x1f20 <MADC_stderrorReadADC+0x36>
	{
//		MADC_stderrorStartConversion(ARG_u8Channel);


		MADC_voidFlagPolling();
    1f06:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <MADC_voidFlagPolling>
		MADC_voidClearFlag();
    1f0a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <MADC_voidClearFlag>
		*ARG_u8pADCReading=ADCH_REG;
    1f0e:	e5 e2       	ldi	r30, 0x25	; 37
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	ea 81       	ldd	r30, Y+2	; 0x02
    1f16:	fb 81       	ldd	r31, Y+3	; 0x03
    1f18:	80 83       	st	Z, r24
		L_stderrorError = E_OK;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <MADC_stderrorReadADC+0x3a>
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return L_stderrorError;
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <MDIO_stderrorSetPortDirection>:
STD_error_t MDIO_stderrorSetPortDirection
(
	u8 ARG_u8Port,
	u8 ARG_u8Direction
)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <MDIO_stderrorSetPortDirection+0x6>
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <MDIO_stderrorSetPortDirection+0x8>
    1f3c:	0f 92       	push	r0
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	8a 83       	std	Y+2, r24	; 0x02
    1f44:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrorError=E_NOK;
    1f46:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3d 83       	std	Y+5, r19	; 0x05
    1f50:	2c 83       	std	Y+4, r18	; 0x04
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	82 30       	cpi	r24, 0x02	; 2
    1f58:	91 05       	cpc	r25, r1
    1f5a:	e9 f0       	breq	.+58     	; 0x1f96 <MDIO_stderrorSetPortDirection+0x62>
    1f5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f60:	23 30       	cpi	r18, 0x03	; 3
    1f62:	31 05       	cpc	r19, r1
    1f64:	34 f4       	brge	.+12     	; 0x1f72 <MDIO_stderrorSetPortDirection+0x3e>
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6a:	81 30       	cpi	r24, 0x01	; 1
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	61 f0       	breq	.+24     	; 0x1f88 <MDIO_stderrorSetPortDirection+0x54>
    1f70:	27 c0       	rjmp	.+78     	; 0x1fc0 <MDIO_stderrorSetPortDirection+0x8c>
    1f72:	2c 81       	ldd	r18, Y+4	; 0x04
    1f74:	3d 81       	ldd	r19, Y+5	; 0x05
    1f76:	23 30       	cpi	r18, 0x03	; 3
    1f78:	31 05       	cpc	r19, r1
    1f7a:	a1 f0       	breq	.+40     	; 0x1fa4 <MDIO_stderrorSetPortDirection+0x70>
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	91 05       	cpc	r25, r1
    1f84:	b1 f0       	breq	.+44     	; 0x1fb2 <MDIO_stderrorSetPortDirection+0x7e>
    1f86:	1c c0       	rjmp	.+56     	; 0x1fc0 <MDIO_stderrorSetPortDirection+0x8c>
	{
		case MDIO_PORTA:GPIOA->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1f88:	e9 e3       	ldi	r30, 0x39	; 57
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	81 83       	std	Z+1, r24	; 0x01
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	16 c0       	rjmp	.+44     	; 0x1fc2 <MDIO_stderrorSetPortDirection+0x8e>
		case MDIO_PORTB:GPIOB->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1f96:	e6 e3       	ldi	r30, 0x36	; 54
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	81 83       	std	Z+1, r24	; 0x01
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <MDIO_stderrorSetPortDirection+0x8e>
		case MDIO_PORTC:GPIOC->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1fa4:	e3 e3       	ldi	r30, 0x33	; 51
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	81 83       	std	Z+1, r24	; 0x01
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	08 c0       	rjmp	.+16     	; 0x1fc2 <MDIO_stderrorSetPortDirection+0x8e>
		case MDIO_PORTD:GPIOD->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1fb2:	e0 e3       	ldi	r30, 0x30	; 48
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	81 83       	std	Z+1, r24	; 0x01
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <MDIO_stderrorSetPortDirection+0x8e>
		default:L_stderrorError = E_NOK;break;
    1fc0:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <MDIO_stderrorSetPortValue>:
STD_error_t MDIO_stderrorSetPortValue
(
	u8 ARG_u8Port,
	u8 ARG_u8Value
)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <MDIO_stderrorSetPortValue+0x6>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <MDIO_stderrorSetPortValue+0x8>
    1fdc:	0f 92       	push	r0
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	8a 83       	std	Y+2, r24	; 0x02
    1fe4:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrorError=E_NOK;
    1fe6:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	3d 83       	std	Y+5, r19	; 0x05
    1ff0:	2c 83       	std	Y+4, r18	; 0x04
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	e9 f0       	breq	.+58     	; 0x2036 <MDIO_stderrorSetPortValue+0x62>
    1ffc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    2000:	23 30       	cpi	r18, 0x03	; 3
    2002:	31 05       	cpc	r19, r1
    2004:	34 f4       	brge	.+12     	; 0x2012 <MDIO_stderrorSetPortValue+0x3e>
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	9d 81       	ldd	r25, Y+5	; 0x05
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	91 05       	cpc	r25, r1
    200e:	61 f0       	breq	.+24     	; 0x2028 <MDIO_stderrorSetPortValue+0x54>
    2010:	27 c0       	rjmp	.+78     	; 0x2060 <MDIO_stderrorSetPortValue+0x8c>
    2012:	2c 81       	ldd	r18, Y+4	; 0x04
    2014:	3d 81       	ldd	r19, Y+5	; 0x05
    2016:	23 30       	cpi	r18, 0x03	; 3
    2018:	31 05       	cpc	r19, r1
    201a:	a1 f0       	breq	.+40     	; 0x2044 <MDIO_stderrorSetPortValue+0x70>
    201c:	8c 81       	ldd	r24, Y+4	; 0x04
    201e:	9d 81       	ldd	r25, Y+5	; 0x05
    2020:	84 30       	cpi	r24, 0x04	; 4
    2022:	91 05       	cpc	r25, r1
    2024:	b1 f0       	breq	.+44     	; 0x2052 <MDIO_stderrorSetPortValue+0x7e>
    2026:	1c c0       	rjmp	.+56     	; 0x2060 <MDIO_stderrorSetPortValue+0x8c>
	{
		case MDIO_PORTA:GPIOA->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    2028:	e9 e3       	ldi	r30, 0x39	; 57
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	82 83       	std	Z+2, r24	; 0x02
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	16 c0       	rjmp	.+44     	; 0x2062 <MDIO_stderrorSetPortValue+0x8e>
		case MDIO_PORTB:GPIOB->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    2036:	e6 e3       	ldi	r30, 0x36	; 54
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	82 83       	std	Z+2, r24	; 0x02
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <MDIO_stderrorSetPortValue+0x8e>
		case MDIO_PORTC:GPIOC->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    2044:	e3 e3       	ldi	r30, 0x33	; 51
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	82 83       	std	Z+2, r24	; 0x02
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	08 c0       	rjmp	.+16     	; 0x2062 <MDIO_stderrorSetPortValue+0x8e>
		case MDIO_PORTD:GPIOD->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    2052:	e0 e3       	ldi	r30, 0x30	; 48
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	82 83       	std	Z+2, r24	; 0x02
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	89 83       	std	Y+1, r24	; 0x01
    205e:	01 c0       	rjmp	.+2      	; 0x2062 <MDIO_stderrorSetPortValue+0x8e>
		default:L_stderrorError = E_NOK;break;
    2060:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    2062:	89 81       	ldd	r24, Y+1	; 0x01
}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <MDIO_stderrorGetPortValue>:
STD_error_t MDIO_stderrorGetPortValue
(
	u8 ARG_u8Port,
	u8* ARG_pu8Value
)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	00 d0       	rcall	.+0      	; 0x207a <MDIO_stderrorGetPortValue+0x6>
    207a:	00 d0       	rcall	.+0      	; 0x207c <MDIO_stderrorGetPortValue+0x8>
    207c:	00 d0       	rcall	.+0      	; 0x207e <MDIO_stderrorGetPortValue+0xa>
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	8a 83       	std	Y+2, r24	; 0x02
    2084:	7c 83       	std	Y+4, r23	; 0x04
    2086:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrorError=E_NOK;
    2088:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	3e 83       	std	Y+6, r19	; 0x06
    2092:	2d 83       	std	Y+5, r18	; 0x05
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	91 05       	cpc	r25, r1
    209c:	f9 f0       	breq	.+62     	; 0x20dc <MDIO_stderrorGetPortValue+0x68>
    209e:	2d 81       	ldd	r18, Y+5	; 0x05
    20a0:	3e 81       	ldd	r19, Y+6	; 0x06
    20a2:	23 30       	cpi	r18, 0x03	; 3
    20a4:	31 05       	cpc	r19, r1
    20a6:	34 f4       	brge	.+12     	; 0x20b4 <MDIO_stderrorGetPortValue+0x40>
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	61 f0       	breq	.+24     	; 0x20ca <MDIO_stderrorGetPortValue+0x56>
    20b2:	2f c0       	rjmp	.+94     	; 0x2112 <MDIO_stderrorGetPortValue+0x9e>
    20b4:	2d 81       	ldd	r18, Y+5	; 0x05
    20b6:	3e 81       	ldd	r19, Y+6	; 0x06
    20b8:	23 30       	cpi	r18, 0x03	; 3
    20ba:	31 05       	cpc	r19, r1
    20bc:	c1 f0       	breq	.+48     	; 0x20ee <MDIO_stderrorGetPortValue+0x7a>
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	84 30       	cpi	r24, 0x04	; 4
    20c4:	91 05       	cpc	r25, r1
    20c6:	e1 f0       	breq	.+56     	; 0x2100 <MDIO_stderrorGetPortValue+0x8c>
    20c8:	24 c0       	rjmp	.+72     	; 0x2112 <MDIO_stderrorGetPortValue+0x9e>
	{
		case MDIO_PORTA: *ARG_pu8Value= GPIOA->PIN;L_stderrorError = E_OK;break;
    20ca:	e9 e3       	ldi	r30, 0x39	; 57
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	eb 81       	ldd	r30, Y+3	; 0x03
    20d2:	fc 81       	ldd	r31, Y+4	; 0x04
    20d4:	80 83       	st	Z, r24
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	1c c0       	rjmp	.+56     	; 0x2114 <MDIO_stderrorGetPortValue+0xa0>
		case MDIO_PORTB: *ARG_pu8Value= GPIOB->PIN;L_stderrorError = E_OK;break;
    20dc:	e6 e3       	ldi	r30, 0x36	; 54
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	eb 81       	ldd	r30, Y+3	; 0x03
    20e4:	fc 81       	ldd	r31, Y+4	; 0x04
    20e6:	80 83       	st	Z, r24
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	13 c0       	rjmp	.+38     	; 0x2114 <MDIO_stderrorGetPortValue+0xa0>
		case MDIO_PORTC: *ARG_pu8Value= GPIOC->PIN;L_stderrorError = E_OK;break;
    20ee:	e3 e3       	ldi	r30, 0x33	; 51
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	eb 81       	ldd	r30, Y+3	; 0x03
    20f6:	fc 81       	ldd	r31, Y+4	; 0x04
    20f8:	80 83       	st	Z, r24
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	0a c0       	rjmp	.+20     	; 0x2114 <MDIO_stderrorGetPortValue+0xa0>
		case MDIO_PORTD: *ARG_pu8Value= GPIOD->PIN;L_stderrorError = E_OK;break;
    2100:	e0 e3       	ldi	r30, 0x30	; 48
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	eb 81       	ldd	r30, Y+3	; 0x03
    2108:	fc 81       	ldd	r31, Y+4	; 0x04
    210a:	80 83       	st	Z, r24
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <MDIO_stderrorGetPortValue+0xa0>
		default:L_stderrorError = E_NOK;break;
    2112:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    2114:	89 81       	ldd	r24, Y+1	; 0x01
}
    2116:	26 96       	adiw	r28, 0x06	; 6
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <MDIO_stderrorSetPinDirection>:
(
	u8 ARG_u8Port,
	u8 ARG_u8pin,
	MDIO_mode ARG_u8Mode
)
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	2a 97       	sbiw	r28, 0x0a	; 10
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	8a 83       	std	Y+2, r24	; 0x02
    213e:	6b 83       	std	Y+3, r22	; 0x03
    2140:	4c 83       	std	Y+4, r20	; 0x04
	
	STD_error_t L_stderrorError=E_NOK;
    2142:	19 82       	std	Y+1, r1	; 0x01
	if ((ARG_u8pin>=0)&&(ARG_u8pin<=7))
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	88 30       	cpi	r24, 0x08	; 8
    2148:	08 f0       	brcs	.+2      	; 0x214c <MDIO_stderrorSetPinDirection+0x24>
    214a:	ed c1       	rjmp	.+986    	; 0x2526 <MDIO_stderrorSetPinDirection+0x3fe>
	{
		if(ARG_u8Mode==MDIO_INPUT_FLOAT)
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	88 23       	and	r24, r24
    2150:	09 f0       	breq	.+2      	; 0x2154 <MDIO_stderrorSetPinDirection+0x2c>
    2152:	87 c0       	rjmp	.+270    	; 0x2262 <MDIO_stderrorSetPinDirection+0x13a>
		{
			switch(ARG_u8Port)
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	3a 87       	std	Y+10, r19	; 0x0a
    215c:	29 87       	std	Y+9, r18	; 0x09
    215e:	89 85       	ldd	r24, Y+9	; 0x09
    2160:	9a 85       	ldd	r25, Y+10	; 0x0a
    2162:	82 30       	cpi	r24, 0x02	; 2
    2164:	91 05       	cpc	r25, r1
    2166:	81 f1       	breq	.+96     	; 0x21c8 <MDIO_stderrorSetPinDirection+0xa0>
    2168:	29 85       	ldd	r18, Y+9	; 0x09
    216a:	3a 85       	ldd	r19, Y+10	; 0x0a
    216c:	23 30       	cpi	r18, 0x03	; 3
    216e:	31 05       	cpc	r19, r1
    2170:	34 f4       	brge	.+12     	; 0x217e <MDIO_stderrorSetPinDirection+0x56>
    2172:	89 85       	ldd	r24, Y+9	; 0x09
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	91 05       	cpc	r25, r1
    217a:	69 f0       	breq	.+26     	; 0x2196 <MDIO_stderrorSetPinDirection+0x6e>
    217c:	70 c0       	rjmp	.+224    	; 0x225e <MDIO_stderrorSetPinDirection+0x136>
    217e:	29 85       	ldd	r18, Y+9	; 0x09
    2180:	3a 85       	ldd	r19, Y+10	; 0x0a
    2182:	23 30       	cpi	r18, 0x03	; 3
    2184:	31 05       	cpc	r19, r1
    2186:	c9 f1       	breq	.+114    	; 0x21fa <MDIO_stderrorSetPinDirection+0xd2>
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	91 05       	cpc	r25, r1
    2190:	09 f4       	brne	.+2      	; 0x2194 <MDIO_stderrorSetPinDirection+0x6c>
    2192:	4c c0       	rjmp	.+152    	; 0x222c <MDIO_stderrorSetPinDirection+0x104>
    2194:	64 c0       	rjmp	.+200    	; 0x225e <MDIO_stderrorSetPinDirection+0x136>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    2196:	a9 e3       	ldi	r26, 0x39	; 57
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e9 e3       	ldi	r30, 0x39	; 57
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	81 81       	ldd	r24, Z+1	; 0x01
    21a0:	48 2f       	mov	r20, r24
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	02 2e       	mov	r0, r18
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <MDIO_stderrorSetPinDirection+0x8c>
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	0a 94       	dec	r0
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <MDIO_stderrorSetPinDirection+0x88>
    21b8:	80 95       	com	r24
    21ba:	84 23       	and	r24, r20
    21bc:	11 96       	adiw	r26, 0x01	; 1
    21be:	8c 93       	st	X, r24
    21c0:	11 97       	sbiw	r26, 0x01	; 1
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	b0 c1       	rjmp	.+864    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTB:CLEAR_BIT(GPIOB->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    21c8:	a6 e3       	ldi	r26, 0x36	; 54
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e6 e3       	ldi	r30, 0x36	; 54
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	81 81       	ldd	r24, Z+1	; 0x01
    21d2:	48 2f       	mov	r20, r24
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	02 2e       	mov	r0, r18
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <MDIO_stderrorSetPinDirection+0xbe>
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	0a 94       	dec	r0
    21e8:	e2 f7       	brpl	.-8      	; 0x21e2 <MDIO_stderrorSetPinDirection+0xba>
    21ea:	80 95       	com	r24
    21ec:	84 23       	and	r24, r20
    21ee:	11 96       	adiw	r26, 0x01	; 1
    21f0:	8c 93       	st	X, r24
    21f2:	11 97       	sbiw	r26, 0x01	; 1
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	89 83       	std	Y+1, r24	; 0x01
    21f8:	97 c1       	rjmp	.+814    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTC:CLEAR_BIT(GPIOC->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    21fa:	a3 e3       	ldi	r26, 0x33	; 51
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e3 e3       	ldi	r30, 0x33	; 51
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	81 81       	ldd	r24, Z+1	; 0x01
    2204:	48 2f       	mov	r20, r24
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 2e       	mov	r0, r18
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <MDIO_stderrorSetPinDirection+0xf0>
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	0a 94       	dec	r0
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <MDIO_stderrorSetPinDirection+0xec>
    221c:	80 95       	com	r24
    221e:	84 23       	and	r24, r20
    2220:	11 96       	adiw	r26, 0x01	; 1
    2222:	8c 93       	st	X, r24
    2224:	11 97       	sbiw	r26, 0x01	; 1
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	89 83       	std	Y+1, r24	; 0x01
    222a:	7e c1       	rjmp	.+764    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTD:CLEAR_BIT(GPIOD->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    222c:	a0 e3       	ldi	r26, 0x30	; 48
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e0 e3       	ldi	r30, 0x30	; 48
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	81 81       	ldd	r24, Z+1	; 0x01
    2236:	48 2f       	mov	r20, r24
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <MDIO_stderrorSetPinDirection+0x122>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <MDIO_stderrorSetPinDirection+0x11e>
    224e:	80 95       	com	r24
    2250:	84 23       	and	r24, r20
    2252:	11 96       	adiw	r26, 0x01	; 1
    2254:	8c 93       	st	X, r24
    2256:	11 97       	sbiw	r26, 0x01	; 1
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	65 c1       	rjmp	.+714    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				default:L_stderrorError = E_NOK;break;
    225e:	19 82       	std	Y+1, r1	; 0x01
    2260:	63 c1       	rjmp	.+710    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
			}
		}
		else if(ARG_u8Mode==MDIO_OUTPUT)
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	09 f0       	breq	.+2      	; 0x226a <MDIO_stderrorSetPinDirection+0x142>
    2268:	83 c0       	rjmp	.+262    	; 0x2370 <MDIO_stderrorSetPinDirection+0x248>
		{
			switch(ARG_u8Port)
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	38 87       	std	Y+8, r19	; 0x08
    2272:	2f 83       	std	Y+7, r18	; 0x07
    2274:	8f 81       	ldd	r24, Y+7	; 0x07
    2276:	98 85       	ldd	r25, Y+8	; 0x08
    2278:	82 30       	cpi	r24, 0x02	; 2
    227a:	91 05       	cpc	r25, r1
    227c:	79 f1       	breq	.+94     	; 0x22dc <MDIO_stderrorSetPinDirection+0x1b4>
    227e:	2f 81       	ldd	r18, Y+7	; 0x07
    2280:	38 85       	ldd	r19, Y+8	; 0x08
    2282:	23 30       	cpi	r18, 0x03	; 3
    2284:	31 05       	cpc	r19, r1
    2286:	34 f4       	brge	.+12     	; 0x2294 <MDIO_stderrorSetPinDirection+0x16c>
    2288:	8f 81       	ldd	r24, Y+7	; 0x07
    228a:	98 85       	ldd	r25, Y+8	; 0x08
    228c:	81 30       	cpi	r24, 0x01	; 1
    228e:	91 05       	cpc	r25, r1
    2290:	69 f0       	breq	.+26     	; 0x22ac <MDIO_stderrorSetPinDirection+0x184>
    2292:	6c c0       	rjmp	.+216    	; 0x236c <MDIO_stderrorSetPinDirection+0x244>
    2294:	2f 81       	ldd	r18, Y+7	; 0x07
    2296:	38 85       	ldd	r19, Y+8	; 0x08
    2298:	23 30       	cpi	r18, 0x03	; 3
    229a:	31 05       	cpc	r19, r1
    229c:	b9 f1       	breq	.+110    	; 0x230c <MDIO_stderrorSetPinDirection+0x1e4>
    229e:	8f 81       	ldd	r24, Y+7	; 0x07
    22a0:	98 85       	ldd	r25, Y+8	; 0x08
    22a2:	84 30       	cpi	r24, 0x04	; 4
    22a4:	91 05       	cpc	r25, r1
    22a6:	09 f4       	brne	.+2      	; 0x22aa <MDIO_stderrorSetPinDirection+0x182>
    22a8:	49 c0       	rjmp	.+146    	; 0x233c <MDIO_stderrorSetPinDirection+0x214>
    22aa:	60 c0       	rjmp	.+192    	; 0x236c <MDIO_stderrorSetPinDirection+0x244>
			{
				case MDIO_PORTA:SET_BIT(GPIOA->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    22ac:	a9 e3       	ldi	r26, 0x39	; 57
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e9 e3       	ldi	r30, 0x39	; 57
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	81 81       	ldd	r24, Z+1	; 0x01
    22b6:	48 2f       	mov	r20, r24
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <MDIO_stderrorSetPinDirection+0x1a2>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <MDIO_stderrorSetPinDirection+0x19e>
    22ce:	84 2b       	or	r24, r20
    22d0:	11 96       	adiw	r26, 0x01	; 1
    22d2:	8c 93       	st	X, r24
    22d4:	11 97       	sbiw	r26, 0x01	; 1
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	26 c1       	rjmp	.+588    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTB:SET_BIT(GPIOB->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    22dc:	a6 e3       	ldi	r26, 0x36	; 54
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e6 e3       	ldi	r30, 0x36	; 54
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	81 81       	ldd	r24, Z+1	; 0x01
    22e6:	48 2f       	mov	r20, r24
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 2e       	mov	r0, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <MDIO_stderrorSetPinDirection+0x1d2>
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	0a 94       	dec	r0
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <MDIO_stderrorSetPinDirection+0x1ce>
    22fe:	84 2b       	or	r24, r20
    2300:	11 96       	adiw	r26, 0x01	; 1
    2302:	8c 93       	st	X, r24
    2304:	11 97       	sbiw	r26, 0x01	; 1
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	0e c1       	rjmp	.+540    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTC:SET_BIT(GPIOC->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    230c:	a3 e3       	ldi	r26, 0x33	; 51
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e3 e3       	ldi	r30, 0x33	; 51
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	81 81       	ldd	r24, Z+1	; 0x01
    2316:	48 2f       	mov	r20, r24
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	02 2e       	mov	r0, r18
    2324:	02 c0       	rjmp	.+4      	; 0x232a <MDIO_stderrorSetPinDirection+0x202>
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	0a 94       	dec	r0
    232c:	e2 f7       	brpl	.-8      	; 0x2326 <MDIO_stderrorSetPinDirection+0x1fe>
    232e:	84 2b       	or	r24, r20
    2330:	11 96       	adiw	r26, 0x01	; 1
    2332:	8c 93       	st	X, r24
    2334:	11 97       	sbiw	r26, 0x01	; 1
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	f6 c0       	rjmp	.+492    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTD:SET_BIT(GPIOD->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    233c:	a0 e3       	ldi	r26, 0x30	; 48
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e0 e3       	ldi	r30, 0x30	; 48
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	81 81       	ldd	r24, Z+1	; 0x01
    2346:	48 2f       	mov	r20, r24
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	02 2e       	mov	r0, r18
    2354:	02 c0       	rjmp	.+4      	; 0x235a <MDIO_stderrorSetPinDirection+0x232>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	0a 94       	dec	r0
    235c:	e2 f7       	brpl	.-8      	; 0x2356 <MDIO_stderrorSetPinDirection+0x22e>
    235e:	84 2b       	or	r24, r20
    2360:	11 96       	adiw	r26, 0x01	; 1
    2362:	8c 93       	st	X, r24
    2364:	11 97       	sbiw	r26, 0x01	; 1
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	de c0       	rjmp	.+444    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				default:L_stderrorError = E_NOK;break;
    236c:	19 82       	std	Y+1, r1	; 0x01
    236e:	dc c0       	rjmp	.+440    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
			}
		}
		else if(ARG_u8Mode==MDIO_INPUT_PULLUP)
    2370:	8c 81       	ldd	r24, Y+4	; 0x04
    2372:	82 30       	cpi	r24, 0x02	; 2
    2374:	09 f0       	breq	.+2      	; 0x2378 <MDIO_stderrorSetPinDirection+0x250>
    2376:	d5 c0       	rjmp	.+426    	; 0x2522 <MDIO_stderrorSetPinDirection+0x3fa>
		{
			switch(ARG_u8Port)
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	3e 83       	std	Y+6, r19	; 0x06
    2380:	2d 83       	std	Y+5, r18	; 0x05
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	9e 81       	ldd	r25, Y+6	; 0x06
    2386:	82 30       	cpi	r24, 0x02	; 2
    2388:	91 05       	cpc	r25, r1
    238a:	09 f4       	brne	.+2      	; 0x238e <MDIO_stderrorSetPinDirection+0x266>
    238c:	44 c0       	rjmp	.+136    	; 0x2416 <MDIO_stderrorSetPinDirection+0x2ee>
    238e:	2d 81       	ldd	r18, Y+5	; 0x05
    2390:	3e 81       	ldd	r19, Y+6	; 0x06
    2392:	23 30       	cpi	r18, 0x03	; 3
    2394:	31 05       	cpc	r19, r1
    2396:	34 f4       	brge	.+12     	; 0x23a4 <MDIO_stderrorSetPinDirection+0x27c>
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	81 30       	cpi	r24, 0x01	; 1
    239e:	91 05       	cpc	r25, r1
    23a0:	71 f0       	breq	.+28     	; 0x23be <MDIO_stderrorSetPinDirection+0x296>
    23a2:	bd c0       	rjmp	.+378    	; 0x251e <MDIO_stderrorSetPinDirection+0x3f6>
    23a4:	2d 81       	ldd	r18, Y+5	; 0x05
    23a6:	3e 81       	ldd	r19, Y+6	; 0x06
    23a8:	23 30       	cpi	r18, 0x03	; 3
    23aa:	31 05       	cpc	r19, r1
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <MDIO_stderrorSetPinDirection+0x288>
    23ae:	5f c0       	rjmp	.+190    	; 0x246e <MDIO_stderrorSetPinDirection+0x346>
    23b0:	8d 81       	ldd	r24, Y+5	; 0x05
    23b2:	9e 81       	ldd	r25, Y+6	; 0x06
    23b4:	84 30       	cpi	r24, 0x04	; 4
    23b6:	91 05       	cpc	r25, r1
    23b8:	09 f4       	brne	.+2      	; 0x23bc <MDIO_stderrorSetPinDirection+0x294>
    23ba:	85 c0       	rjmp	.+266    	; 0x24c6 <MDIO_stderrorSetPinDirection+0x39e>
    23bc:	b0 c0       	rjmp	.+352    	; 0x251e <MDIO_stderrorSetPinDirection+0x3f6>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA->DDR, ARG_u8pin);SET_BIT(GPIOA->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    23be:	a9 e3       	ldi	r26, 0x39	; 57
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e9 e3       	ldi	r30, 0x39	; 57
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	81 81       	ldd	r24, Z+1	; 0x01
    23c8:	48 2f       	mov	r20, r24
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <MDIO_stderrorSetPinDirection+0x2b2>
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	2a 95       	dec	r18
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <MDIO_stderrorSetPinDirection+0x2ae>
    23de:	80 95       	com	r24
    23e0:	84 23       	and	r24, r20
    23e2:	11 96       	adiw	r26, 0x01	; 1
    23e4:	8c 93       	st	X, r24
    23e6:	a9 e3       	ldi	r26, 0x39	; 57
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e9 e3       	ldi	r30, 0x39	; 57
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	48 2f       	mov	r20, r24
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	02 2e       	mov	r0, r18
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <MDIO_stderrorSetPinDirection+0x2dc>
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	0a 94       	dec	r0
    2406:	e2 f7       	brpl	.-8      	; 0x2400 <MDIO_stderrorSetPinDirection+0x2d8>
    2408:	84 2b       	or	r24, r20
    240a:	12 96       	adiw	r26, 0x02	; 2
    240c:	8c 93       	st	X, r24
    240e:	12 97       	sbiw	r26, 0x02	; 2
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	89 c0       	rjmp	.+274    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTB:CLEAR_BIT(GPIOB->DDR, ARG_u8pin);SET_BIT(GPIOB->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    2416:	a6 e3       	ldi	r26, 0x36	; 54
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e6 e3       	ldi	r30, 0x36	; 54
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	81 81       	ldd	r24, Z+1	; 0x01
    2420:	48 2f       	mov	r20, r24
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <MDIO_stderrorSetPinDirection+0x30a>
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	2a 95       	dec	r18
    2434:	e2 f7       	brpl	.-8      	; 0x242e <MDIO_stderrorSetPinDirection+0x306>
    2436:	80 95       	com	r24
    2438:	84 23       	and	r24, r20
    243a:	11 96       	adiw	r26, 0x01	; 1
    243c:	8c 93       	st	X, r24
    243e:	a6 e3       	ldi	r26, 0x36	; 54
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e6 e3       	ldi	r30, 0x36	; 54
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	48 2f       	mov	r20, r24
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	02 2e       	mov	r0, r18
    2456:	02 c0       	rjmp	.+4      	; 0x245c <MDIO_stderrorSetPinDirection+0x334>
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	0a 94       	dec	r0
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <MDIO_stderrorSetPinDirection+0x330>
    2460:	84 2b       	or	r24, r20
    2462:	12 96       	adiw	r26, 0x02	; 2
    2464:	8c 93       	st	X, r24
    2466:	12 97       	sbiw	r26, 0x02	; 2
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	5d c0       	rjmp	.+186    	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTC:CLEAR_BIT(GPIOC->DDR, ARG_u8pin);SET_BIT(GPIOC->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    246e:	a3 e3       	ldi	r26, 0x33	; 51
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e3 e3       	ldi	r30, 0x33	; 51
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	81 81       	ldd	r24, Z+1	; 0x01
    2478:	48 2f       	mov	r20, r24
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	02 c0       	rjmp	.+4      	; 0x248a <MDIO_stderrorSetPinDirection+0x362>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	2a 95       	dec	r18
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <MDIO_stderrorSetPinDirection+0x35e>
    248e:	80 95       	com	r24
    2490:	84 23       	and	r24, r20
    2492:	11 96       	adiw	r26, 0x01	; 1
    2494:	8c 93       	st	X, r24
    2496:	a3 e3       	ldi	r26, 0x33	; 51
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e3 e3       	ldi	r30, 0x33	; 51
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	48 2f       	mov	r20, r24
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	02 2e       	mov	r0, r18
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <MDIO_stderrorSetPinDirection+0x38c>
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	0a 94       	dec	r0
    24b6:	e2 f7       	brpl	.-8      	; 0x24b0 <MDIO_stderrorSetPinDirection+0x388>
    24b8:	84 2b       	or	r24, r20
    24ba:	12 96       	adiw	r26, 0x02	; 2
    24bc:	8c 93       	st	X, r24
    24be:	12 97       	sbiw	r26, 0x02	; 2
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	31 c0       	rjmp	.+98     	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTD:CLEAR_BIT(GPIOD->DDR, ARG_u8pin);SET_BIT(GPIOD->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    24c6:	a0 e3       	ldi	r26, 0x30	; 48
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e0 e3       	ldi	r30, 0x30	; 48
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	81 81       	ldd	r24, Z+1	; 0x01
    24d0:	48 2f       	mov	r20, r24
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <MDIO_stderrorSetPinDirection+0x3ba>
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	2a 95       	dec	r18
    24e4:	e2 f7       	brpl	.-8      	; 0x24de <MDIO_stderrorSetPinDirection+0x3b6>
    24e6:	80 95       	com	r24
    24e8:	84 23       	and	r24, r20
    24ea:	11 96       	adiw	r26, 0x01	; 1
    24ec:	8c 93       	st	X, r24
    24ee:	a0 e3       	ldi	r26, 0x30	; 48
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e0 e3       	ldi	r30, 0x30	; 48
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	48 2f       	mov	r20, r24
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	02 2e       	mov	r0, r18
    2506:	02 c0       	rjmp	.+4      	; 0x250c <MDIO_stderrorSetPinDirection+0x3e4>
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	0a 94       	dec	r0
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <MDIO_stderrorSetPinDirection+0x3e0>
    2510:	84 2b       	or	r24, r20
    2512:	12 96       	adiw	r26, 0x02	; 2
    2514:	8c 93       	st	X, r24
    2516:	12 97       	sbiw	r26, 0x02	; 2
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	05 c0       	rjmp	.+10     	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
				default:L_stderrorError = E_NOK;break;
    251e:	19 82       	std	Y+1, r1	; 0x01
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>
			}
		}
		else
		{
			L_stderrorError=E_NOK;
    2522:	19 82       	std	Y+1, r1	; 0x01
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <MDIO_stderrorSetPinDirection+0x400>

		
	}
	else
	{
		L_stderrorError=E_NOK;
    2526:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return L_stderrorError;
    2528:	89 81       	ldd	r24, Y+1	; 0x01
}
    252a:	2a 96       	adiw	r28, 0x0a	; 10
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <MDIO_stderrorSetPinValue>:
(
	u8 ARG_u8Port,
	u8 ARG_u8pin,
	u8 ARG_u8Value
)
{
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	28 97       	sbiw	r28, 0x08	; 8
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	8a 83       	std	Y+2, r24	; 0x02
    2552:	6b 83       	std	Y+3, r22	; 0x03
    2554:	4c 83       	std	Y+4, r20	; 0x04
	
	STD_error_t L_stderrorError=E_NOK;
    2556:	19 82       	std	Y+1, r1	; 0x01
	if ((ARG_u8pin>=0)&&(ARG_u8pin<=7))
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	88 30       	cpi	r24, 0x08	; 8
    255c:	08 f0       	brcs	.+2      	; 0x2560 <MDIO_stderrorSetPinValue+0x24>
    255e:	12 c1       	rjmp	.+548    	; 0x2784 <MDIO_stderrorSetPinValue+0x248>
	{
		if(ARG_u8Value==MDIO_HIGH)
    2560:	8c 81       	ldd	r24, Y+4	; 0x04
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	09 f0       	breq	.+2      	; 0x2568 <MDIO_stderrorSetPinValue+0x2c>
    2566:	83 c0       	rjmp	.+262    	; 0x266e <MDIO_stderrorSetPinValue+0x132>
		{
			switch(ARG_u8Port)
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	38 87       	std	Y+8, r19	; 0x08
    2570:	2f 83       	std	Y+7, r18	; 0x07
    2572:	8f 81       	ldd	r24, Y+7	; 0x07
    2574:	98 85       	ldd	r25, Y+8	; 0x08
    2576:	82 30       	cpi	r24, 0x02	; 2
    2578:	91 05       	cpc	r25, r1
    257a:	79 f1       	breq	.+94     	; 0x25da <MDIO_stderrorSetPinValue+0x9e>
    257c:	2f 81       	ldd	r18, Y+7	; 0x07
    257e:	38 85       	ldd	r19, Y+8	; 0x08
    2580:	23 30       	cpi	r18, 0x03	; 3
    2582:	31 05       	cpc	r19, r1
    2584:	34 f4       	brge	.+12     	; 0x2592 <MDIO_stderrorSetPinValue+0x56>
    2586:	8f 81       	ldd	r24, Y+7	; 0x07
    2588:	98 85       	ldd	r25, Y+8	; 0x08
    258a:	81 30       	cpi	r24, 0x01	; 1
    258c:	91 05       	cpc	r25, r1
    258e:	69 f0       	breq	.+26     	; 0x25aa <MDIO_stderrorSetPinValue+0x6e>
    2590:	6c c0       	rjmp	.+216    	; 0x266a <MDIO_stderrorSetPinValue+0x12e>
    2592:	2f 81       	ldd	r18, Y+7	; 0x07
    2594:	38 85       	ldd	r19, Y+8	; 0x08
    2596:	23 30       	cpi	r18, 0x03	; 3
    2598:	31 05       	cpc	r19, r1
    259a:	b9 f1       	breq	.+110    	; 0x260a <MDIO_stderrorSetPinValue+0xce>
    259c:	8f 81       	ldd	r24, Y+7	; 0x07
    259e:	98 85       	ldd	r25, Y+8	; 0x08
    25a0:	84 30       	cpi	r24, 0x04	; 4
    25a2:	91 05       	cpc	r25, r1
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <MDIO_stderrorSetPinValue+0x6c>
    25a6:	49 c0       	rjmp	.+146    	; 0x263a <MDIO_stderrorSetPinValue+0xfe>
    25a8:	60 c0       	rjmp	.+192    	; 0x266a <MDIO_stderrorSetPinValue+0x12e>
			{
				case MDIO_PORTA:SET_BIT(GPIOA->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    25aa:	a9 e3       	ldi	r26, 0x39	; 57
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e9 e3       	ldi	r30, 0x39	; 57
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	48 2f       	mov	r20, r24
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	02 2e       	mov	r0, r18
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <MDIO_stderrorSetPinValue+0x8c>
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	0a 94       	dec	r0
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <MDIO_stderrorSetPinValue+0x88>
    25cc:	84 2b       	or	r24, r20
    25ce:	12 96       	adiw	r26, 0x02	; 2
    25d0:	8c 93       	st	X, r24
    25d2:	12 97       	sbiw	r26, 0x02	; 2
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	d6 c0       	rjmp	.+428    	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTB:SET_BIT(GPIOB->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    25da:	a6 e3       	ldi	r26, 0x36	; 54
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e6 e3       	ldi	r30, 0x36	; 54
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	48 2f       	mov	r20, r24
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	02 2e       	mov	r0, r18
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <MDIO_stderrorSetPinValue+0xbc>
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	0a 94       	dec	r0
    25fa:	e2 f7       	brpl	.-8      	; 0x25f4 <MDIO_stderrorSetPinValue+0xb8>
    25fc:	84 2b       	or	r24, r20
    25fe:	12 96       	adiw	r26, 0x02	; 2
    2600:	8c 93       	st	X, r24
    2602:	12 97       	sbiw	r26, 0x02	; 2
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	be c0       	rjmp	.+380    	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTC:SET_BIT(GPIOC->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    260a:	a3 e3       	ldi	r26, 0x33	; 51
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e3 e3       	ldi	r30, 0x33	; 51
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	48 2f       	mov	r20, r24
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	02 2e       	mov	r0, r18
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <MDIO_stderrorSetPinValue+0xec>
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	0a 94       	dec	r0
    262a:	e2 f7       	brpl	.-8      	; 0x2624 <MDIO_stderrorSetPinValue+0xe8>
    262c:	84 2b       	or	r24, r20
    262e:	12 96       	adiw	r26, 0x02	; 2
    2630:	8c 93       	st	X, r24
    2632:	12 97       	sbiw	r26, 0x02	; 2
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	89 83       	std	Y+1, r24	; 0x01
    2638:	a6 c0       	rjmp	.+332    	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTD:SET_BIT(GPIOD->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    263a:	a0 e3       	ldi	r26, 0x30	; 48
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e0 e3       	ldi	r30, 0x30	; 48
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	48 2f       	mov	r20, r24
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	02 2e       	mov	r0, r18
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <MDIO_stderrorSetPinValue+0x11c>
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	0a 94       	dec	r0
    265a:	e2 f7       	brpl	.-8      	; 0x2654 <MDIO_stderrorSetPinValue+0x118>
    265c:	84 2b       	or	r24, r20
    265e:	12 96       	adiw	r26, 0x02	; 2
    2660:	8c 93       	st	X, r24
    2662:	12 97       	sbiw	r26, 0x02	; 2
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	8e c0       	rjmp	.+284    	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
				default:L_stderrorError = E_NOK;break;
    266a:	19 82       	std	Y+1, r1	; 0x01
    266c:	8c c0       	rjmp	.+280    	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
			}
		}
		else if(ARG_u8Value==MDIO_LOW)
    266e:	8c 81       	ldd	r24, Y+4	; 0x04
    2670:	81 30       	cpi	r24, 0x01	; 1
    2672:	09 f0       	breq	.+2      	; 0x2676 <MDIO_stderrorSetPinValue+0x13a>
    2674:	88 c0       	rjmp	.+272    	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
		{
			switch(ARG_u8Port)
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	3e 83       	std	Y+6, r19	; 0x06
    267e:	2d 83       	std	Y+5, r18	; 0x05
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	82 30       	cpi	r24, 0x02	; 2
    2686:	91 05       	cpc	r25, r1
    2688:	81 f1       	breq	.+96     	; 0x26ea <MDIO_stderrorSetPinValue+0x1ae>
    268a:	2d 81       	ldd	r18, Y+5	; 0x05
    268c:	3e 81       	ldd	r19, Y+6	; 0x06
    268e:	23 30       	cpi	r18, 0x03	; 3
    2690:	31 05       	cpc	r19, r1
    2692:	34 f4       	brge	.+12     	; 0x26a0 <MDIO_stderrorSetPinValue+0x164>
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	81 30       	cpi	r24, 0x01	; 1
    269a:	91 05       	cpc	r25, r1
    269c:	69 f0       	breq	.+26     	; 0x26b8 <MDIO_stderrorSetPinValue+0x17c>
    269e:	70 c0       	rjmp	.+224    	; 0x2780 <MDIO_stderrorSetPinValue+0x244>
    26a0:	2d 81       	ldd	r18, Y+5	; 0x05
    26a2:	3e 81       	ldd	r19, Y+6	; 0x06
    26a4:	23 30       	cpi	r18, 0x03	; 3
    26a6:	31 05       	cpc	r19, r1
    26a8:	c9 f1       	breq	.+114    	; 0x271c <MDIO_stderrorSetPinValue+0x1e0>
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	84 30       	cpi	r24, 0x04	; 4
    26b0:	91 05       	cpc	r25, r1
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <MDIO_stderrorSetPinValue+0x17a>
    26b4:	4c c0       	rjmp	.+152    	; 0x274e <MDIO_stderrorSetPinValue+0x212>
    26b6:	64 c0       	rjmp	.+200    	; 0x2780 <MDIO_stderrorSetPinValue+0x244>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    26b8:	a9 e3       	ldi	r26, 0x39	; 57
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e9 e3       	ldi	r30, 0x39	; 57
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	48 2f       	mov	r20, r24
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	02 2e       	mov	r0, r18
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <MDIO_stderrorSetPinValue+0x19a>
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	0a 94       	dec	r0
    26d8:	e2 f7       	brpl	.-8      	; 0x26d2 <MDIO_stderrorSetPinValue+0x196>
    26da:	80 95       	com	r24
    26dc:	84 23       	and	r24, r20
    26de:	12 96       	adiw	r26, 0x02	; 2
    26e0:	8c 93       	st	X, r24
    26e2:	12 97       	sbiw	r26, 0x02	; 2
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	4e c0       	rjmp	.+156    	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTB:CLEAR_BIT(GPIOB->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    26ea:	a6 e3       	ldi	r26, 0x36	; 54
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e6 e3       	ldi	r30, 0x36	; 54
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	48 2f       	mov	r20, r24
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	28 2f       	mov	r18, r24
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	02 2e       	mov	r0, r18
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <MDIO_stderrorSetPinValue+0x1cc>
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	0a 94       	dec	r0
    270a:	e2 f7       	brpl	.-8      	; 0x2704 <MDIO_stderrorSetPinValue+0x1c8>
    270c:	80 95       	com	r24
    270e:	84 23       	and	r24, r20
    2710:	12 96       	adiw	r26, 0x02	; 2
    2712:	8c 93       	st	X, r24
    2714:	12 97       	sbiw	r26, 0x02	; 2
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	35 c0       	rjmp	.+106    	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTC:CLEAR_BIT(GPIOC->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    271c:	a3 e3       	ldi	r26, 0x33	; 51
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e3 e3       	ldi	r30, 0x33	; 51
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	48 2f       	mov	r20, r24
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	02 2e       	mov	r0, r18
    2734:	02 c0       	rjmp	.+4      	; 0x273a <MDIO_stderrorSetPinValue+0x1fe>
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	0a 94       	dec	r0
    273c:	e2 f7       	brpl	.-8      	; 0x2736 <MDIO_stderrorSetPinValue+0x1fa>
    273e:	80 95       	com	r24
    2740:	84 23       	and	r24, r20
    2742:	12 96       	adiw	r26, 0x02	; 2
    2744:	8c 93       	st	X, r24
    2746:	12 97       	sbiw	r26, 0x02	; 2
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	89 83       	std	Y+1, r24	; 0x01
    274c:	1c c0       	rjmp	.+56     	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTD:CLEAR_BIT(GPIOD->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    274e:	a0 e3       	ldi	r26, 0x30	; 48
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e0 e3       	ldi	r30, 0x30	; 48
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	82 81       	ldd	r24, Z+2	; 0x02
    2758:	48 2f       	mov	r20, r24
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	28 2f       	mov	r18, r24
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	02 2e       	mov	r0, r18
    2766:	02 c0       	rjmp	.+4      	; 0x276c <MDIO_stderrorSetPinValue+0x230>
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	0a 94       	dec	r0
    276e:	e2 f7       	brpl	.-8      	; 0x2768 <MDIO_stderrorSetPinValue+0x22c>
    2770:	80 95       	com	r24
    2772:	84 23       	and	r24, r20
    2774:	12 96       	adiw	r26, 0x02	; 2
    2776:	8c 93       	st	X, r24
    2778:	12 97       	sbiw	r26, 0x02	; 2
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	03 c0       	rjmp	.+6      	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
				default:L_stderrorError = E_NOK;break;
    2780:	19 82       	std	Y+1, r1	; 0x01
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <MDIO_stderrorSetPinValue+0x24a>
		}
			
	}
	else
	{
		L_stderrorError=E_NOK;
    2784:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    2786:	89 81       	ldd	r24, Y+1	; 0x01
}
    2788:	28 96       	adiw	r28, 0x08	; 8
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <MDIO_stderrorGetPinValue>:
(
	u8 ARG_u8Port,
	u8 ARG_u8pin,
	u8* ARG_pu8Value
)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	27 97       	sbiw	r28, 0x07	; 7
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	8a 83       	std	Y+2, r24	; 0x02
    27b0:	6b 83       	std	Y+3, r22	; 0x03
    27b2:	5d 83       	std	Y+5, r21	; 0x05
    27b4:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrorError=E_NOK;
    27b6:	19 82       	std	Y+1, r1	; 0x01
	
	if(ARG_pu8Value==NULL_POINTER)
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	9d 81       	ldd	r25, Y+5	; 0x05
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	19 f4       	brne	.+6      	; 0x27c6 <MDIO_stderrorGetPinValue+0x2c>
	{
		L_stderrorError=E_NULL_POINTER;
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	80 c0       	rjmp	.+256    	; 0x28c6 <MDIO_stderrorGetPinValue+0x12c>
	}
	else if ((ARG_u8pin>=0)&&(ARG_u8pin<=7))
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	88 30       	cpi	r24, 0x08	; 8
    27ca:	08 f0       	brcs	.+2      	; 0x27ce <MDIO_stderrorGetPinValue+0x34>
    27cc:	7b c0       	rjmp	.+246    	; 0x28c4 <MDIO_stderrorGetPinValue+0x12a>
	{
		switch(ARG_u8Port)
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	28 2f       	mov	r18, r24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	3f 83       	std	Y+7, r19	; 0x07
    27d6:	2e 83       	std	Y+6, r18	; 0x06
    27d8:	4e 81       	ldd	r20, Y+6	; 0x06
    27da:	5f 81       	ldd	r21, Y+7	; 0x07
    27dc:	42 30       	cpi	r20, 0x02	; 2
    27de:	51 05       	cpc	r21, r1
    27e0:	69 f1       	breq	.+90     	; 0x283c <MDIO_stderrorGetPinValue+0xa2>
    27e2:	8e 81       	ldd	r24, Y+6	; 0x06
    27e4:	9f 81       	ldd	r25, Y+7	; 0x07
    27e6:	83 30       	cpi	r24, 0x03	; 3
    27e8:	91 05       	cpc	r25, r1
    27ea:	34 f4       	brge	.+12     	; 0x27f8 <MDIO_stderrorGetPinValue+0x5e>
    27ec:	2e 81       	ldd	r18, Y+6	; 0x06
    27ee:	3f 81       	ldd	r19, Y+7	; 0x07
    27f0:	21 30       	cpi	r18, 0x01	; 1
    27f2:	31 05       	cpc	r19, r1
    27f4:	69 f0       	breq	.+26     	; 0x2810 <MDIO_stderrorGetPinValue+0x76>
    27f6:	64 c0       	rjmp	.+200    	; 0x28c0 <MDIO_stderrorGetPinValue+0x126>
    27f8:	4e 81       	ldd	r20, Y+6	; 0x06
    27fa:	5f 81       	ldd	r21, Y+7	; 0x07
    27fc:	43 30       	cpi	r20, 0x03	; 3
    27fe:	51 05       	cpc	r21, r1
    2800:	99 f1       	breq	.+102    	; 0x2868 <MDIO_stderrorGetPinValue+0xce>
    2802:	8e 81       	ldd	r24, Y+6	; 0x06
    2804:	9f 81       	ldd	r25, Y+7	; 0x07
    2806:	84 30       	cpi	r24, 0x04	; 4
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <MDIO_stderrorGetPinValue+0x74>
    280c:	43 c0       	rjmp	.+134    	; 0x2894 <MDIO_stderrorGetPinValue+0xfa>
    280e:	58 c0       	rjmp	.+176    	; 0x28c0 <MDIO_stderrorGetPinValue+0x126>
		{
			case MDIO_PORTA: *ARG_pu8Value= GET_BIT(GPIOA->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    2810:	e9 e3       	ldi	r30, 0x39	; 57
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a9 01       	movw	r20, r18
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <MDIO_stderrorGetPinValue+0x8e>
    2824:	55 95       	asr	r21
    2826:	47 95       	ror	r20
    2828:	8a 95       	dec	r24
    282a:	e2 f7       	brpl	.-8      	; 0x2824 <MDIO_stderrorGetPinValue+0x8a>
    282c:	ca 01       	movw	r24, r20
    282e:	81 70       	andi	r24, 0x01	; 1
    2830:	ec 81       	ldd	r30, Y+4	; 0x04
    2832:	fd 81       	ldd	r31, Y+5	; 0x05
    2834:	80 83       	st	Z, r24
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	45 c0       	rjmp	.+138    	; 0x28c6 <MDIO_stderrorGetPinValue+0x12c>
			case MDIO_PORTB: *ARG_pu8Value= GET_BIT(GPIOB->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    283c:	e6 e3       	ldi	r30, 0x36	; 54
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	a9 01       	movw	r20, r18
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <MDIO_stderrorGetPinValue+0xba>
    2850:	55 95       	asr	r21
    2852:	47 95       	ror	r20
    2854:	8a 95       	dec	r24
    2856:	e2 f7       	brpl	.-8      	; 0x2850 <MDIO_stderrorGetPinValue+0xb6>
    2858:	ca 01       	movw	r24, r20
    285a:	81 70       	andi	r24, 0x01	; 1
    285c:	ec 81       	ldd	r30, Y+4	; 0x04
    285e:	fd 81       	ldd	r31, Y+5	; 0x05
    2860:	80 83       	st	Z, r24
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	2f c0       	rjmp	.+94     	; 0x28c6 <MDIO_stderrorGetPinValue+0x12c>
			case MDIO_PORTC: *ARG_pu8Value= GET_BIT(GPIOC->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    2868:	e3 e3       	ldi	r30, 0x33	; 51
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	a9 01       	movw	r20, r18
    287a:	02 c0       	rjmp	.+4      	; 0x2880 <MDIO_stderrorGetPinValue+0xe6>
    287c:	55 95       	asr	r21
    287e:	47 95       	ror	r20
    2880:	8a 95       	dec	r24
    2882:	e2 f7       	brpl	.-8      	; 0x287c <MDIO_stderrorGetPinValue+0xe2>
    2884:	ca 01       	movw	r24, r20
    2886:	81 70       	andi	r24, 0x01	; 1
    2888:	ec 81       	ldd	r30, Y+4	; 0x04
    288a:	fd 81       	ldd	r31, Y+5	; 0x05
    288c:	80 83       	st	Z, r24
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	19 c0       	rjmp	.+50     	; 0x28c6 <MDIO_stderrorGetPinValue+0x12c>
			case MDIO_PORTD: *ARG_pu8Value= GET_BIT(GPIOD->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    2894:	e0 e3       	ldi	r30, 0x30	; 48
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	88 2f       	mov	r24, r24
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	a9 01       	movw	r20, r18
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <MDIO_stderrorGetPinValue+0x112>
    28a8:	55 95       	asr	r21
    28aa:	47 95       	ror	r20
    28ac:	8a 95       	dec	r24
    28ae:	e2 f7       	brpl	.-8      	; 0x28a8 <MDIO_stderrorGetPinValue+0x10e>
    28b0:	ca 01       	movw	r24, r20
    28b2:	81 70       	andi	r24, 0x01	; 1
    28b4:	ec 81       	ldd	r30, Y+4	; 0x04
    28b6:	fd 81       	ldd	r31, Y+5	; 0x05
    28b8:	80 83       	st	Z, r24
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	89 83       	std	Y+1, r24	; 0x01
    28be:	03 c0       	rjmp	.+6      	; 0x28c6 <MDIO_stderrorGetPinValue+0x12c>
			default:L_stderrorError = E_NOK;break;
    28c0:	19 82       	std	Y+1, r1	; 0x01
    28c2:	01 c0       	rjmp	.+2      	; 0x28c6 <MDIO_stderrorGetPinValue+0x12c>
		}
	}
	else
	{
		
		L_stderrorError=E_NOK;
    28c4:	19 82       	std	Y+1, r1	; 0x01
		
	}
	
	return L_stderrorError;
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	27 96       	adiw	r28, 0x07	; 7
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <MSFIOR_voidSetTriggerSource>:

STD_error_t MSFIOR_voidSetTriggerSource
(
	Trigger_MODE ARG_udtTriggerMode
)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <MSFIOR_voidSetTriggerSource+0x6>
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <MSFIOR_voidSetTriggerSource+0x8>
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrorError=E_NOK;
    28e8:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_udtTriggerMode)
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	28 2f       	mov	r18, r24
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	3c 83       	std	Y+4, r19	; 0x04
    28f2:	2b 83       	std	Y+3, r18	; 0x03
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	83 30       	cpi	r24, 0x03	; 3
    28fa:	91 05       	cpc	r25, r1
    28fc:	09 f4       	brne	.+2      	; 0x2900 <MSFIOR_voidSetTriggerSource+0x26>
    28fe:	64 c0       	rjmp	.+200    	; 0x29c8 <MSFIOR_voidSetTriggerSource+0xee>
    2900:	2b 81       	ldd	r18, Y+3	; 0x03
    2902:	3c 81       	ldd	r19, Y+4	; 0x04
    2904:	24 30       	cpi	r18, 0x04	; 4
    2906:	31 05       	cpc	r19, r1
    2908:	84 f4       	brge	.+32     	; 0x292a <MSFIOR_voidSetTriggerSource+0x50>
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	9c 81       	ldd	r25, Y+4	; 0x04
    290e:	81 30       	cpi	r24, 0x01	; 1
    2910:	91 05       	cpc	r25, r1
    2912:	b1 f1       	breq	.+108    	; 0x2980 <MSFIOR_voidSetTriggerSource+0xa6>
    2914:	2b 81       	ldd	r18, Y+3	; 0x03
    2916:	3c 81       	ldd	r19, Y+4	; 0x04
    2918:	22 30       	cpi	r18, 0x02	; 2
    291a:	31 05       	cpc	r19, r1
    291c:	0c f0       	brlt	.+2      	; 0x2920 <MSFIOR_voidSetTriggerSource+0x46>
    291e:	42 c0       	rjmp	.+132    	; 0x29a4 <MSFIOR_voidSetTriggerSource+0xca>
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	d1 f0       	breq	.+52     	; 0x295c <MSFIOR_voidSetTriggerSource+0x82>
    2928:	a9 c0       	rjmp	.+338    	; 0x2a7c <MSFIOR_voidSetTriggerSource+0x1a2>
    292a:	2b 81       	ldd	r18, Y+3	; 0x03
    292c:	3c 81       	ldd	r19, Y+4	; 0x04
    292e:	25 30       	cpi	r18, 0x05	; 5
    2930:	31 05       	cpc	r19, r1
    2932:	09 f4       	brne	.+2      	; 0x2936 <MSFIOR_voidSetTriggerSource+0x5c>
    2934:	6d c0       	rjmp	.+218    	; 0x2a10 <MSFIOR_voidSetTriggerSource+0x136>
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	85 30       	cpi	r24, 0x05	; 5
    293c:	91 05       	cpc	r25, r1
    293e:	0c f4       	brge	.+2      	; 0x2942 <MSFIOR_voidSetTriggerSource+0x68>
    2940:	55 c0       	rjmp	.+170    	; 0x29ec <MSFIOR_voidSetTriggerSource+0x112>
    2942:	2b 81       	ldd	r18, Y+3	; 0x03
    2944:	3c 81       	ldd	r19, Y+4	; 0x04
    2946:	26 30       	cpi	r18, 0x06	; 6
    2948:	31 05       	cpc	r19, r1
    294a:	09 f4       	brne	.+2      	; 0x294e <MSFIOR_voidSetTriggerSource+0x74>
    294c:	73 c0       	rjmp	.+230    	; 0x2a34 <MSFIOR_voidSetTriggerSource+0x15a>
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	87 30       	cpi	r24, 0x07	; 7
    2954:	91 05       	cpc	r25, r1
    2956:	09 f4       	brne	.+2      	; 0x295a <MSFIOR_voidSetTriggerSource+0x80>
    2958:	7f c0       	rjmp	.+254    	; 0x2a58 <MSFIOR_voidSetTriggerSource+0x17e>
    295a:	90 c0       	rjmp	.+288    	; 0x2a7c <MSFIOR_voidSetTriggerSource+0x1a2>
	{
	case Free_Running_mode             :ADTS2 =0;ADTS1=0;ADTS0 =0;L_stderrorError = E_OK;break;
    295c:	e0 e5       	ldi	r30, 0x50	; 80
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	8f 77       	andi	r24, 0x7F	; 127
    2964:	80 83       	st	Z, r24
    2966:	e0 e5       	ldi	r30, 0x50	; 80
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	8f 7b       	andi	r24, 0xBF	; 191
    296e:	80 83       	st	Z, r24
    2970:	e0 e5       	ldi	r30, 0x50	; 80
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	8f 7d       	andi	r24, 0xDF	; 223
    2978:	80 83       	st	Z, r24
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	7f c0       	rjmp	.+254    	; 0x2a7e <MSFIOR_voidSetTriggerSource+0x1a4>
	case Analog_Comparator             :ADTS2 =0;ADTS1=0;ADTS0 =1;L_stderrorError = E_OK;break;
    2980:	e0 e5       	ldi	r30, 0x50	; 80
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	8f 77       	andi	r24, 0x7F	; 127
    2988:	80 83       	st	Z, r24
    298a:	e0 e5       	ldi	r30, 0x50	; 80
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	8f 7b       	andi	r24, 0xBF	; 191
    2992:	80 83       	st	Z, r24
    2994:	e0 e5       	ldi	r30, 0x50	; 80
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	80 62       	ori	r24, 0x20	; 32
    299c:	80 83       	st	Z, r24
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	89 83       	std	Y+1, r24	; 0x01
    29a2:	6d c0       	rjmp	.+218    	; 0x2a7e <MSFIOR_voidSetTriggerSource+0x1a4>
	case External_Interrupt_Request    :ADTS2 =0;ADTS1=1;ADTS0 =0;L_stderrorError = E_OK;break;
    29a4:	e0 e5       	ldi	r30, 0x50	; 80
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	8f 77       	andi	r24, 0x7F	; 127
    29ac:	80 83       	st	Z, r24
    29ae:	e0 e5       	ldi	r30, 0x50	; 80
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	80 64       	ori	r24, 0x40	; 64
    29b6:	80 83       	st	Z, r24
    29b8:	e0 e5       	ldi	r30, 0x50	; 80
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	8f 7d       	andi	r24, 0xDF	; 223
    29c0:	80 83       	st	Z, r24
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	5b c0       	rjmp	.+182    	; 0x2a7e <MSFIOR_voidSetTriggerSource+0x1a4>
	case Timer_Counter0_Compare_Match  :ADTS2 =0;ADTS1=1;ADTS0 =1;L_stderrorError = E_OK;break;
    29c8:	e0 e5       	ldi	r30, 0x50	; 80
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	8f 77       	andi	r24, 0x7F	; 127
    29d0:	80 83       	st	Z, r24
    29d2:	e0 e5       	ldi	r30, 0x50	; 80
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	80 64       	ori	r24, 0x40	; 64
    29da:	80 83       	st	Z, r24
    29dc:	e0 e5       	ldi	r30, 0x50	; 80
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	80 62       	ori	r24, 0x20	; 32
    29e4:	80 83       	st	Z, r24
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	49 c0       	rjmp	.+146    	; 0x2a7e <MSFIOR_voidSetTriggerSource+0x1a4>
	case Timer_Counter0_Overflow       :ADTS2 =1;ADTS1=0;ADTS0 =0;L_stderrorError = E_OK;break;
    29ec:	e0 e5       	ldi	r30, 0x50	; 80
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	80 68       	ori	r24, 0x80	; 128
    29f4:	80 83       	st	Z, r24
    29f6:	e0 e5       	ldi	r30, 0x50	; 80
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	8f 7b       	andi	r24, 0xBF	; 191
    29fe:	80 83       	st	Z, r24
    2a00:	e0 e5       	ldi	r30, 0x50	; 80
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	8f 7d       	andi	r24, 0xDF	; 223
    2a08:	80 83       	st	Z, r24
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	89 83       	std	Y+1, r24	; 0x01
    2a0e:	37 c0       	rjmp	.+110    	; 0x2a7e <MSFIOR_voidSetTriggerSource+0x1a4>
	case Timer_Counter1_Compare_MatchB :ADTS2 =1;ADTS1=0;ADTS0 =1;L_stderrorError = E_OK;break;
    2a10:	e0 e5       	ldi	r30, 0x50	; 80
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	80 68       	ori	r24, 0x80	; 128
    2a18:	80 83       	st	Z, r24
    2a1a:	e0 e5       	ldi	r30, 0x50	; 80
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	8f 7b       	andi	r24, 0xBF	; 191
    2a22:	80 83       	st	Z, r24
    2a24:	e0 e5       	ldi	r30, 0x50	; 80
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	80 62       	ori	r24, 0x20	; 32
    2a2c:	80 83       	st	Z, r24
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	25 c0       	rjmp	.+74     	; 0x2a7e <MSFIOR_voidSetTriggerSource+0x1a4>
	case Timer_Counter1_Overflow       :ADTS2 =1;ADTS1=1;ADTS0 =0;L_stderrorError = E_OK;break;
    2a34:	e0 e5       	ldi	r30, 0x50	; 80
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	80 68       	ori	r24, 0x80	; 128
    2a3c:	80 83       	st	Z, r24
    2a3e:	e0 e5       	ldi	r30, 0x50	; 80
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	80 64       	ori	r24, 0x40	; 64
    2a46:	80 83       	st	Z, r24
    2a48:	e0 e5       	ldi	r30, 0x50	; 80
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8f 7d       	andi	r24, 0xDF	; 223
    2a50:	80 83       	st	Z, r24
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	89 83       	std	Y+1, r24	; 0x01
    2a56:	13 c0       	rjmp	.+38     	; 0x2a7e <MSFIOR_voidSetTriggerSource+0x1a4>
	case Timer_Counter1_Capture_Event  :ADTS2 =1;ADTS1=1;ADTS0 =1;L_stderrorError = E_OK;break;
    2a58:	e0 e5       	ldi	r30, 0x50	; 80
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	80 68       	ori	r24, 0x80	; 128
    2a60:	80 83       	st	Z, r24
    2a62:	e0 e5       	ldi	r30, 0x50	; 80
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	80 64       	ori	r24, 0x40	; 64
    2a6a:	80 83       	st	Z, r24
    2a6c:	e0 e5       	ldi	r30, 0x50	; 80
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	80 62       	ori	r24, 0x20	; 32
    2a74:	80 83       	st	Z, r24
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	01 c0       	rjmp	.+2      	; 0x2a7e <MSFIOR_voidSetTriggerSource+0x1a4>
	default :L_stderrorError=E_NOK;break;
    2a7c:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <main>:
#include "MSFIOR_interface.h"
#include "HLCD_interface.h"
#include<util/delay.h>

int main (void)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	63 97       	sbiw	r28, 0x13	; 19
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8I=0;
    2aa2:	1b 8a       	std	Y+19, r1	; 0x13
	f32 L_u8ReadVoltage;
	HLCD_voidInit();
    2aa4:	0e 94 f4 06 	call	0xde8	; 0xde8 <HLCD_voidInit>
	MDIO_stderrorSetPinDirection(MDIO_PORTD,MDIO_PIN0,MDIO_OUTPUT);//RED
    2aa8:	84 e0       	ldi	r24, 0x04	; 4
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	0e 94 94 10 	call	0x2128	; 0x2128 <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(MDIO_PORTD,MDIO_PIN1,MDIO_OUTPUT);//YELLOW
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	0e 94 94 10 	call	0x2128	; 0x2128 <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(MDIO_PORTA,MDIO_PIN0,MDIO_INPUT_PULLUP);//YELLOW
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	42 e0       	ldi	r20, 0x02	; 2
    2ac2:	0e 94 94 10 	call	0x2128	; 0x2128 <MDIO_stderrorSetPinDirection>

	MDIO_stderrorSetPinValue(MDIO_PORTD,MDIO_PIN0,MDIO_LOW);
    2ac6:	84 e0       	ldi	r24, 0x04	; 4
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	41 e0       	ldi	r20, 0x01	; 1
    2acc:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>
	MDIO_stderrorSetPinValue(MDIO_PORTD,MDIO_PIN1,MDIO_LOW);
    2ad0:	84 e0       	ldi	r24, 0x04	; 4
    2ad2:	61 e0       	ldi	r22, 0x01	; 1
    2ad4:	41 e0       	ldi	r20, 0x01	; 1
    2ad6:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>


//	MSFIOR_voidSetTriggerSource();
	MADC_stderrorInit(MADC_VREF_AVCC, MADC_PreScalar_2);
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	61 e0       	ldi	r22, 0x01	; 1
    2ade:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <MADC_stderrorInit>
	MADC_voidEnableADC();
    2ae2:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <MADC_voidEnableADC>
	MADC_stderrorStartConversion(1);
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <MADC_stderrorStartConversion>

	while(1)
	{

		MADC_stderrorReadADC(&L_u8I,MADC_CHANNEL_ADC0);
    2aec:	ce 01       	movw	r24, r28
    2aee:	43 96       	adiw	r24, 0x13	; 19
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	0e 94 75 0f 	call	0x1eea	; 0x1eea <MADC_stderrorReadADC>
		//MDIO_stderrorSetPortValue(MDIO_PORTD,L_u8I);
		L_u8ReadVoltage= (L_u8I / 255.0) * 5;
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	aa 27       	eor	r26, r26
    2afe:	97 fd       	sbrc	r25, 7
    2b00:	a0 95       	com	r26
    2b02:	ba 2f       	mov	r27, r26
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	bc 01       	movw	r22, r24
    2b12:	cd 01       	movw	r24, r26
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4f e7       	ldi	r20, 0x7F	; 127
    2b1a:	53 e4       	ldi	r21, 0x43	; 67
    2b1c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	bc 01       	movw	r22, r24
    2b26:	cd 01       	movw	r24, r26
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 ea       	ldi	r20, 0xA0	; 160
    2b2e:	50 e4       	ldi	r21, 0x40	; 64
    2b30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	8f 87       	std	Y+15, r24	; 0x0f
    2b3a:	98 8b       	std	Y+16, r25	; 0x10
    2b3c:	a9 8b       	std	Y+17, r26	; 0x11
    2b3e:	ba 8b       	std	Y+18, r27	; 0x12

		if((L_u8ReadVoltage>3))
    2b40:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b42:	78 89       	ldd	r23, Y+16	; 0x10
    2b44:	89 89       	ldd	r24, Y+17	; 0x11
    2b46:	9a 89       	ldd	r25, Y+18	; 0x12
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e4       	ldi	r20, 0x40	; 64
    2b4e:	50 e4       	ldi	r21, 0x40	; 64
    2b50:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	34 f4       	brge	.+12     	; 0x2b64 <main+0xd6>
		{

			MDIO_stderrorSetPinValue(MDIO_PORTD,MDIO_PIN0,MDIO_HIGH);
    2b58:	84 e0       	ldi	r24, 0x04	; 4
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	42 e0       	ldi	r20, 0x02	; 2
    2b5e:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <main+0xe0>

		}
		else
		{

			MDIO_stderrorSetPinValue(MDIO_PORTD,MDIO_PIN0,MDIO_LOW);
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	41 e0       	ldi	r20, 0x01	; 1
    2b6a:	0e 94 9e 12 	call	0x253c	; 0x253c <MDIO_stderrorSetPinValue>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	aa e7       	ldi	r26, 0x7A	; 122
    2b74:	b4 e4       	ldi	r27, 0x44	; 68
    2b76:	8b 87       	std	Y+11, r24	; 0x0b
    2b78:	9c 87       	std	Y+12, r25	; 0x0c
    2b7a:	ad 87       	std	Y+13, r26	; 0x0d
    2b7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	4a ef       	ldi	r20, 0xFA	; 250
    2b8c:	54 e4       	ldi	r21, 0x44	; 68
    2b8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	8f 83       	std	Y+7, r24	; 0x07
    2b98:	98 87       	std	Y+8, r25	; 0x08
    2b9a:	a9 87       	std	Y+9, r26	; 0x09
    2b9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba0:	78 85       	ldd	r23, Y+8	; 0x08
    2ba2:	89 85       	ldd	r24, Y+9	; 0x09
    2ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e8       	ldi	r20, 0x80	; 128
    2bac:	5f e3       	ldi	r21, 0x3F	; 63
    2bae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bb2:	88 23       	and	r24, r24
    2bb4:	2c f4       	brge	.+10     	; 0x2bc0 <main+0x132>
		__ticks = 1;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
    2bbe:	3f c0       	rjmp	.+126    	; 0x2c3e <main+0x1b0>
	else if (__tmp > 65535)
    2bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc2:	78 85       	ldd	r23, Y+8	; 0x08
    2bc4:	89 85       	ldd	r24, Y+9	; 0x09
    2bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	3f ef       	ldi	r19, 0xFF	; 255
    2bcc:	4f e7       	ldi	r20, 0x7F	; 127
    2bce:	57 e4       	ldi	r21, 0x47	; 71
    2bd0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bd4:	18 16       	cp	r1, r24
    2bd6:	4c f5       	brge	.+82     	; 0x2c2a <main+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e2       	ldi	r20, 0x20	; 32
    2be6:	51 e4       	ldi	r21, 0x41	; 65
    2be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	9e 83       	std	Y+6, r25	; 0x06
    2bfe:	8d 83       	std	Y+5, r24	; 0x05
    2c00:	0f c0       	rjmp	.+30     	; 0x2c20 <main+0x192>
    2c02:	88 ec       	ldi	r24, 0xC8	; 200
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9c 83       	std	Y+4, r25	; 0x04
    2c08:	8b 83       	std	Y+3, r24	; 0x03
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <main+0x180>
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	9e 83       	std	Y+6, r25	; 0x06
    2c1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	9e 81       	ldd	r25, Y+6	; 0x06
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	69 f7       	brne	.-38     	; 0x2c02 <main+0x174>
    2c28:	61 cf       	rjmp	.-318    	; 0x2aec <main+0x5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2c:	78 85       	ldd	r23, Y+8	; 0x08
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c40:	9e 81       	ldd	r25, Y+6	; 0x06
    2c42:	9a 83       	std	Y+2, r25	; 0x02
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <main+0x1bc>
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	4c cf       	rjmp	.-360    	; 0x2aec <main+0x5e>

00002c54 <__prologue_saves__>:
    2c54:	2f 92       	push	r2
    2c56:	3f 92       	push	r3
    2c58:	4f 92       	push	r4
    2c5a:	5f 92       	push	r5
    2c5c:	6f 92       	push	r6
    2c5e:	7f 92       	push	r7
    2c60:	8f 92       	push	r8
    2c62:	9f 92       	push	r9
    2c64:	af 92       	push	r10
    2c66:	bf 92       	push	r11
    2c68:	cf 92       	push	r12
    2c6a:	df 92       	push	r13
    2c6c:	ef 92       	push	r14
    2c6e:	ff 92       	push	r15
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	ca 1b       	sub	r28, r26
    2c7e:	db 0b       	sbc	r29, r27
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	09 94       	ijmp

00002c8c <__epilogue_restores__>:
    2c8c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c8e:	39 88       	ldd	r3, Y+17	; 0x11
    2c90:	48 88       	ldd	r4, Y+16	; 0x10
    2c92:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c94:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c96:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c98:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c9e:	b9 84       	ldd	r11, Y+9	; 0x09
    2ca0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ca2:	df 80       	ldd	r13, Y+7	; 0x07
    2ca4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ca6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ca8:	0c 81       	ldd	r16, Y+4	; 0x04
    2caa:	1b 81       	ldd	r17, Y+3	; 0x03
    2cac:	aa 81       	ldd	r26, Y+2	; 0x02
    2cae:	b9 81       	ldd	r27, Y+1	; 0x01
    2cb0:	ce 0f       	add	r28, r30
    2cb2:	d1 1d       	adc	r29, r1
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	ed 01       	movw	r28, r26
    2cc0:	08 95       	ret

00002cc2 <itoa>:
    2cc2:	fb 01       	movw	r30, r22
    2cc4:	9f 01       	movw	r18, r30
    2cc6:	e8 94       	clt
    2cc8:	42 30       	cpi	r20, 0x02	; 2
    2cca:	c4 f0       	brlt	.+48     	; 0x2cfc <itoa+0x3a>
    2ccc:	45 32       	cpi	r20, 0x25	; 37
    2cce:	b4 f4       	brge	.+44     	; 0x2cfc <itoa+0x3a>
    2cd0:	4a 30       	cpi	r20, 0x0A	; 10
    2cd2:	29 f4       	brne	.+10     	; 0x2cde <itoa+0x1c>
    2cd4:	97 fb       	bst	r25, 7
    2cd6:	1e f4       	brtc	.+6      	; 0x2cde <itoa+0x1c>
    2cd8:	90 95       	com	r25
    2cda:	81 95       	neg	r24
    2cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cde:	64 2f       	mov	r22, r20
    2ce0:	77 27       	eor	r23, r23
    2ce2:	0e 94 92 16 	call	0x2d24	; 0x2d24 <__udivmodhi4>
    2ce6:	80 5d       	subi	r24, 0xD0	; 208
    2ce8:	8a 33       	cpi	r24, 0x3A	; 58
    2cea:	0c f0       	brlt	.+2      	; 0x2cee <itoa+0x2c>
    2cec:	89 5d       	subi	r24, 0xD9	; 217
    2cee:	81 93       	st	Z+, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	a1 f7       	brne	.-24     	; 0x2cde <itoa+0x1c>
    2cf6:	16 f4       	brtc	.+4      	; 0x2cfc <itoa+0x3a>
    2cf8:	5d e2       	ldi	r21, 0x2D	; 45
    2cfa:	51 93       	st	Z+, r21
    2cfc:	10 82       	st	Z, r1
    2cfe:	c9 01       	movw	r24, r18
    2d00:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <strrev>

00002d04 <strrev>:
    2d04:	dc 01       	movw	r26, r24
    2d06:	fc 01       	movw	r30, r24
    2d08:	67 2f       	mov	r22, r23
    2d0a:	71 91       	ld	r23, Z+
    2d0c:	77 23       	and	r23, r23
    2d0e:	e1 f7       	brne	.-8      	; 0x2d08 <strrev+0x4>
    2d10:	32 97       	sbiw	r30, 0x02	; 2
    2d12:	04 c0       	rjmp	.+8      	; 0x2d1c <strrev+0x18>
    2d14:	7c 91       	ld	r23, X
    2d16:	6d 93       	st	X+, r22
    2d18:	70 83       	st	Z, r23
    2d1a:	62 91       	ld	r22, -Z
    2d1c:	ae 17       	cp	r26, r30
    2d1e:	bf 07       	cpc	r27, r31
    2d20:	c8 f3       	brcs	.-14     	; 0x2d14 <strrev+0x10>
    2d22:	08 95       	ret

00002d24 <__udivmodhi4>:
    2d24:	aa 1b       	sub	r26, r26
    2d26:	bb 1b       	sub	r27, r27
    2d28:	51 e1       	ldi	r21, 0x11	; 17
    2d2a:	07 c0       	rjmp	.+14     	; 0x2d3a <__udivmodhi4_ep>

00002d2c <__udivmodhi4_loop>:
    2d2c:	aa 1f       	adc	r26, r26
    2d2e:	bb 1f       	adc	r27, r27
    2d30:	a6 17       	cp	r26, r22
    2d32:	b7 07       	cpc	r27, r23
    2d34:	10 f0       	brcs	.+4      	; 0x2d3a <__udivmodhi4_ep>
    2d36:	a6 1b       	sub	r26, r22
    2d38:	b7 0b       	sbc	r27, r23

00002d3a <__udivmodhi4_ep>:
    2d3a:	88 1f       	adc	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	5a 95       	dec	r21
    2d40:	a9 f7       	brne	.-22     	; 0x2d2c <__udivmodhi4_loop>
    2d42:	80 95       	com	r24
    2d44:	90 95       	com	r25
    2d46:	bc 01       	movw	r22, r24
    2d48:	cd 01       	movw	r24, r26
    2d4a:	08 95       	ret

00002d4c <_exit>:
    2d4c:	f8 94       	cli

00002d4e <__stop_program>:
    2d4e:	ff cf       	rjmp	.-2      	; 0x2d4e <__stop_program>
