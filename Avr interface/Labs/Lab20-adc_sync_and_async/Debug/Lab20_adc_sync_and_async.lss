
Lab20_adc_sync_and_async.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002b5a  00002bee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800174  00800174  00002d02  2**0
                  ALLOC
  3 .stab         00001ef0  00000000  00000000  00002d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e00  00000000  00000000  00004bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000059f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008191  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009517  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a6f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000aba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b514  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b1 13 	call	0x2762	; 0x2762 <main>
      8a:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bd 14 	jmp	0x297a	; 0x297a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bd 14 	jmp	0x297a	; 0x297a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e6       	ldi	r22, 0x6B	; 107
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 58       	subi	r30, 0x8D	; 141
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <HLCD_voidInit>:
#include "HLCD_private.h"
#include "HLCD_interface.h"
#include<util/delay.h>

void HLCD_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	ee 97       	sbiw	r28, 0x3e	; 62
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	MDIO_stderrorSetPortDirection(LCD_DATA_PORT,0xFF);
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	6f ef       	ldi	r22, 0xFF	; 255
     e46:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <MDIO_stderrorSetPortDirection>
	MDIO_stderrorSetPortValue(LCD_DATA_PORT,MDIO_LOW);
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <MDIO_stderrorSetPortValue>
	MDIO_stderrorSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,MDIO_OUTPUT);
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	65 e0       	ldi	r22, 0x05	; 5
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,MDIO_OUTPUT);
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	66 e0       	ldi	r22, 0x06	; 6
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_OUTPUT);
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	67 e0       	ldi	r22, 0x07	; 7
     e6a:	41 e0       	ldi	r20, 0x01	; 1
     e6c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <MDIO_stderrorSetPinDirection>
	HLCD_voidSendCmd(0x33);   /* Send command 0x33*/
     e70:	83 e3       	ldi	r24, 0x33	; 51
     e72:	0e 94 35 0b 	call	0x166a	; 0x166a <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x32);   /* Send command 0x32*/
     e76:	82 e3       	ldi	r24, 0x32	; 50
     e78:	0e 94 35 0b 	call	0x166a	; 0x166a <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x38);
     e7c:	88 e3       	ldi	r24, 0x38	; 56
     e7e:	0e 94 35 0b 	call	0x166a	; 0x166a <HLCD_voidSendCmd>
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a8 e4       	ldi	r26, 0x48	; 72
     e88:	b2 e4       	ldi	r27, 0x42	; 66
     e8a:	8b af       	std	Y+59, r24	; 0x3b
     e8c:	9c af       	std	Y+60, r25	; 0x3c
     e8e:	ad af       	std	Y+61, r26	; 0x3d
     e90:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e92:	6b ad       	ldd	r22, Y+59	; 0x3b
     e94:	7c ad       	ldd	r23, Y+60	; 0x3c
     e96:	8d ad       	ldd	r24, Y+61	; 0x3d
     e98:	9e ad       	ldd	r25, Y+62	; 0x3e
     e9a:	2b ea       	ldi	r18, 0xAB	; 171
     e9c:	3a ea       	ldi	r19, 0xAA	; 170
     e9e:	4a e2       	ldi	r20, 0x2A	; 42
     ea0:	50 e4       	ldi	r21, 0x40	; 64
     ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	8f ab       	std	Y+55, r24	; 0x37
     eac:	98 af       	std	Y+56, r25	; 0x38
     eae:	a9 af       	std	Y+57, r26	; 0x39
     eb0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     eb2:	6f a9       	ldd	r22, Y+55	; 0x37
     eb4:	78 ad       	ldd	r23, Y+56	; 0x38
     eb6:	89 ad       	ldd	r24, Y+57	; 0x39
     eb8:	9a ad       	ldd	r25, Y+58	; 0x3a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	5f e3       	ldi	r21, 0x3F	; 63
     ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ec6:	88 23       	and	r24, r24
     ec8:	1c f4       	brge	.+6      	; 0xed0 <HLCD_voidInit+0xa2>
		__ticks = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	8e ab       	std	Y+54, r24	; 0x36
     ece:	91 c0       	rjmp	.+290    	; 0xff2 <HLCD_voidInit+0x1c4>
	else if (__tmp > 255)
     ed0:	6f a9       	ldd	r22, Y+55	; 0x37
     ed2:	78 ad       	ldd	r23, Y+56	; 0x38
     ed4:	89 ad       	ldd	r24, Y+57	; 0x39
     ed6:	9a ad       	ldd	r25, Y+58	; 0x3a
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	4f e7       	ldi	r20, 0x7F	; 127
     ede:	53 e4       	ldi	r21, 0x43	; 67
     ee0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	0c f0       	brlt	.+2      	; 0xeea <HLCD_voidInit+0xbc>
     ee8:	7b c0       	rjmp	.+246    	; 0xfe0 <HLCD_voidInit+0x1b2>
	{
		_delay_ms(__us / 1000.0);
     eea:	6b ad       	ldd	r22, Y+59	; 0x3b
     eec:	7c ad       	ldd	r23, Y+60	; 0x3c
     eee:	8d ad       	ldd	r24, Y+61	; 0x3d
     ef0:	9e ad       	ldd	r25, Y+62	; 0x3e
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	4a e7       	ldi	r20, 0x7A	; 122
     ef8:	54 e4       	ldi	r21, 0x44	; 68
     efa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	8a ab       	std	Y+50, r24	; 0x32
     f04:	9b ab       	std	Y+51, r25	; 0x33
     f06:	ac ab       	std	Y+52, r26	; 0x34
     f08:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0a:	6a a9       	ldd	r22, Y+50	; 0x32
     f0c:	7b a9       	ldd	r23, Y+51	; 0x33
     f0e:	8c a9       	ldd	r24, Y+52	; 0x34
     f10:	9d a9       	ldd	r25, Y+53	; 0x35
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	4a ef       	ldi	r20, 0xFA	; 250
     f18:	54 e4       	ldi	r21, 0x44	; 68
     f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	8e a7       	std	Y+46, r24	; 0x2e
     f24:	9f a7       	std	Y+47, r25	; 0x2f
     f26:	a8 ab       	std	Y+48, r26	; 0x30
     f28:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     f2a:	6e a5       	ldd	r22, Y+46	; 0x2e
     f2c:	7f a5       	ldd	r23, Y+47	; 0x2f
     f2e:	88 a9       	ldd	r24, Y+48	; 0x30
     f30:	99 a9       	ldd	r25, Y+49	; 0x31
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e8       	ldi	r20, 0x80	; 128
     f38:	5f e3       	ldi	r21, 0x3F	; 63
     f3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f3e:	88 23       	and	r24, r24
     f40:	2c f4       	brge	.+10     	; 0xf4c <HLCD_voidInit+0x11e>
		__ticks = 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	9d a7       	std	Y+45, r25	; 0x2d
     f48:	8c a7       	std	Y+44, r24	; 0x2c
     f4a:	3f c0       	rjmp	.+126    	; 0xfca <HLCD_voidInit+0x19c>
	else if (__tmp > 65535)
     f4c:	6e a5       	ldd	r22, Y+46	; 0x2e
     f4e:	7f a5       	ldd	r23, Y+47	; 0x2f
     f50:	88 a9       	ldd	r24, Y+48	; 0x30
     f52:	99 a9       	ldd	r25, Y+49	; 0x31
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	3f ef       	ldi	r19, 0xFF	; 255
     f58:	4f e7       	ldi	r20, 0x7F	; 127
     f5a:	57 e4       	ldi	r21, 0x47	; 71
     f5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f60:	18 16       	cp	r1, r24
     f62:	4c f5       	brge	.+82     	; 0xfb6 <HLCD_voidInit+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f64:	6a a9       	ldd	r22, Y+50	; 0x32
     f66:	7b a9       	ldd	r23, Y+51	; 0x33
     f68:	8c a9       	ldd	r24, Y+52	; 0x34
     f6a:	9d a9       	ldd	r25, Y+53	; 0x35
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e2       	ldi	r20, 0x20	; 32
     f72:	51 e4       	ldi	r21, 0x41	; 65
     f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	bc 01       	movw	r22, r24
     f7e:	cd 01       	movw	r24, r26
     f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	9d a7       	std	Y+45, r25	; 0x2d
     f8a:	8c a7       	std	Y+44, r24	; 0x2c
     f8c:	0f c0       	rjmp	.+30     	; 0xfac <HLCD_voidInit+0x17e>
     f8e:	88 ec       	ldi	r24, 0xC8	; 200
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	9b a7       	std	Y+43, r25	; 0x2b
     f94:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f96:	8a a5       	ldd	r24, Y+42	; 0x2a
     f98:	9b a5       	ldd	r25, Y+43	; 0x2b
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <HLCD_voidInit+0x16c>
     f9e:	9b a7       	std	Y+43, r25	; 0x2b
     fa0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa2:	8c a5       	ldd	r24, Y+44	; 0x2c
     fa4:	9d a5       	ldd	r25, Y+45	; 0x2d
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	9d a7       	std	Y+45, r25	; 0x2d
     faa:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fac:	8c a5       	ldd	r24, Y+44	; 0x2c
     fae:	9d a5       	ldd	r25, Y+45	; 0x2d
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	69 f7       	brne	.-38     	; 0xf8e <HLCD_voidInit+0x160>
     fb4:	24 c0       	rjmp	.+72     	; 0xffe <HLCD_voidInit+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb6:	6e a5       	ldd	r22, Y+46	; 0x2e
     fb8:	7f a5       	ldd	r23, Y+47	; 0x2f
     fba:	88 a9       	ldd	r24, Y+48	; 0x30
     fbc:	99 a9       	ldd	r25, Y+49	; 0x31
     fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	9d a7       	std	Y+45, r25	; 0x2d
     fc8:	8c a7       	std	Y+44, r24	; 0x2c
     fca:	8c a5       	ldd	r24, Y+44	; 0x2c
     fcc:	9d a5       	ldd	r25, Y+45	; 0x2d
     fce:	99 a7       	std	Y+41, r25	; 0x29
     fd0:	88 a7       	std	Y+40, r24	; 0x28
     fd2:	88 a5       	ldd	r24, Y+40	; 0x28
     fd4:	99 a5       	ldd	r25, Y+41	; 0x29
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <HLCD_voidInit+0x1a8>
     fda:	99 a7       	std	Y+41, r25	; 0x29
     fdc:	88 a7       	std	Y+40, r24	; 0x28
     fde:	0f c0       	rjmp	.+30     	; 0xffe <HLCD_voidInit+0x1d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fe0:	6f a9       	ldd	r22, Y+55	; 0x37
     fe2:	78 ad       	ldd	r23, Y+56	; 0x38
     fe4:	89 ad       	ldd	r24, Y+57	; 0x39
     fe6:	9a ad       	ldd	r25, Y+58	; 0x3a
     fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	8e ab       	std	Y+54, r24	; 0x36
     ff2:	8e a9       	ldd	r24, Y+54	; 0x36
     ff4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ff6:	8f a1       	ldd	r24, Y+39	; 0x27
     ff8:	8a 95       	dec	r24
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <HLCD_voidInit+0x1ca>
     ffc:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	HLCD_voidSendCmd(0x0C);
     ffe:	8c e0       	ldi	r24, 0x0C	; 12
    1000:	0e 94 35 0b 	call	0x166a	; 0x166a <HLCD_voidSendCmd>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a8 e4       	ldi	r26, 0x48	; 72
    100a:	b2 e4       	ldi	r27, 0x42	; 66
    100c:	8b a3       	std	Y+35, r24	; 0x23
    100e:	9c a3       	std	Y+36, r25	; 0x24
    1010:	ad a3       	std	Y+37, r26	; 0x25
    1012:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1014:	6b a1       	ldd	r22, Y+35	; 0x23
    1016:	7c a1       	ldd	r23, Y+36	; 0x24
    1018:	8d a1       	ldd	r24, Y+37	; 0x25
    101a:	9e a1       	ldd	r25, Y+38	; 0x26
    101c:	2b ea       	ldi	r18, 0xAB	; 171
    101e:	3a ea       	ldi	r19, 0xAA	; 170
    1020:	4a e2       	ldi	r20, 0x2A	; 42
    1022:	50 e4       	ldi	r21, 0x40	; 64
    1024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	8f 8f       	std	Y+31, r24	; 0x1f
    102e:	98 a3       	std	Y+32, r25	; 0x20
    1030:	a9 a3       	std	Y+33, r26	; 0x21
    1032:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1034:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1036:	78 a1       	ldd	r23, Y+32	; 0x20
    1038:	89 a1       	ldd	r24, Y+33	; 0x21
    103a:	9a a1       	ldd	r25, Y+34	; 0x22
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1048:	88 23       	and	r24, r24
    104a:	1c f4       	brge	.+6      	; 0x1052 <HLCD_voidInit+0x224>
		__ticks = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	8e 8f       	std	Y+30, r24	; 0x1e
    1050:	91 c0       	rjmp	.+290    	; 0x1174 <HLCD_voidInit+0x346>
	else if (__tmp > 255)
    1052:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1054:	78 a1       	ldd	r23, Y+32	; 0x20
    1056:	89 a1       	ldd	r24, Y+33	; 0x21
    1058:	9a a1       	ldd	r25, Y+34	; 0x22
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	4f e7       	ldi	r20, 0x7F	; 127
    1060:	53 e4       	ldi	r21, 0x43	; 67
    1062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1066:	18 16       	cp	r1, r24
    1068:	0c f0       	brlt	.+2      	; 0x106c <HLCD_voidInit+0x23e>
    106a:	7b c0       	rjmp	.+246    	; 0x1162 <HLCD_voidInit+0x334>
	{
		_delay_ms(__us / 1000.0);
    106c:	6b a1       	ldd	r22, Y+35	; 0x23
    106e:	7c a1       	ldd	r23, Y+36	; 0x24
    1070:	8d a1       	ldd	r24, Y+37	; 0x25
    1072:	9e a1       	ldd	r25, Y+38	; 0x26
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a e7       	ldi	r20, 0x7A	; 122
    107a:	54 e4       	ldi	r21, 0x44	; 68
    107c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8a 8f       	std	Y+26, r24	; 0x1a
    1086:	9b 8f       	std	Y+27, r25	; 0x1b
    1088:	ac 8f       	std	Y+28, r26	; 0x1c
    108a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    108e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1090:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1092:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4a ef       	ldi	r20, 0xFA	; 250
    109a:	54 e4       	ldi	r21, 0x44	; 68
    109c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	8e 8b       	std	Y+22, r24	; 0x16
    10a6:	9f 8b       	std	Y+23, r25	; 0x17
    10a8:	a8 8f       	std	Y+24, r26	; 0x18
    10aa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    10ac:	6e 89       	ldd	r22, Y+22	; 0x16
    10ae:	7f 89       	ldd	r23, Y+23	; 0x17
    10b0:	88 8d       	ldd	r24, Y+24	; 0x18
    10b2:	99 8d       	ldd	r25, Y+25	; 0x19
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10c0:	88 23       	and	r24, r24
    10c2:	2c f4       	brge	.+10     	; 0x10ce <HLCD_voidInit+0x2a0>
		__ticks = 1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	9d 8b       	std	Y+21, r25	; 0x15
    10ca:	8c 8b       	std	Y+20, r24	; 0x14
    10cc:	3f c0       	rjmp	.+126    	; 0x114c <HLCD_voidInit+0x31e>
	else if (__tmp > 65535)
    10ce:	6e 89       	ldd	r22, Y+22	; 0x16
    10d0:	7f 89       	ldd	r23, Y+23	; 0x17
    10d2:	88 8d       	ldd	r24, Y+24	; 0x18
    10d4:	99 8d       	ldd	r25, Y+25	; 0x19
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	3f ef       	ldi	r19, 0xFF	; 255
    10da:	4f e7       	ldi	r20, 0x7F	; 127
    10dc:	57 e4       	ldi	r21, 0x47	; 71
    10de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10e2:	18 16       	cp	r1, r24
    10e4:	4c f5       	brge	.+82     	; 0x1138 <HLCD_voidInit+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    10e8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    10ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e2       	ldi	r20, 0x20	; 32
    10f4:	51 e4       	ldi	r21, 0x41	; 65
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9d 8b       	std	Y+21, r25	; 0x15
    110c:	8c 8b       	std	Y+20, r24	; 0x14
    110e:	0f c0       	rjmp	.+30     	; 0x112e <HLCD_voidInit+0x300>
    1110:	88 ec       	ldi	r24, 0xC8	; 200
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9b 8b       	std	Y+19, r25	; 0x13
    1116:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1118:	8a 89       	ldd	r24, Y+18	; 0x12
    111a:	9b 89       	ldd	r25, Y+19	; 0x13
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <HLCD_voidInit+0x2ee>
    1120:	9b 8b       	std	Y+19, r25	; 0x13
    1122:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1124:	8c 89       	ldd	r24, Y+20	; 0x14
    1126:	9d 89       	ldd	r25, Y+21	; 0x15
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	9d 8b       	std	Y+21, r25	; 0x15
    112c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112e:	8c 89       	ldd	r24, Y+20	; 0x14
    1130:	9d 89       	ldd	r25, Y+21	; 0x15
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	69 f7       	brne	.-38     	; 0x1110 <HLCD_voidInit+0x2e2>
    1136:	24 c0       	rjmp	.+72     	; 0x1180 <HLCD_voidInit+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1138:	6e 89       	ldd	r22, Y+22	; 0x16
    113a:	7f 89       	ldd	r23, Y+23	; 0x17
    113c:	88 8d       	ldd	r24, Y+24	; 0x18
    113e:	99 8d       	ldd	r25, Y+25	; 0x19
    1140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	9d 8b       	std	Y+21, r25	; 0x15
    114a:	8c 8b       	std	Y+20, r24	; 0x14
    114c:	8c 89       	ldd	r24, Y+20	; 0x14
    114e:	9d 89       	ldd	r25, Y+21	; 0x15
    1150:	99 8b       	std	Y+17, r25	; 0x11
    1152:	88 8b       	std	Y+16, r24	; 0x10
    1154:	88 89       	ldd	r24, Y+16	; 0x10
    1156:	99 89       	ldd	r25, Y+17	; 0x11
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <HLCD_voidInit+0x32a>
    115c:	99 8b       	std	Y+17, r25	; 0x11
    115e:	88 8b       	std	Y+16, r24	; 0x10
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <HLCD_voidInit+0x352>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1162:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1164:	78 a1       	ldd	r23, Y+32	; 0x20
    1166:	89 a1       	ldd	r24, Y+33	; 0x21
    1168:	9a a1       	ldd	r25, Y+34	; 0x22
    116a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8e 8f       	std	Y+30, r24	; 0x1e
    1174:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1176:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1178:	8f 85       	ldd	r24, Y+15	; 0x0f
    117a:	8a 95       	dec	r24
    117c:	f1 f7       	brne	.-4      	; 0x117a <HLCD_voidInit+0x34c>
    117e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	HLCD_voidSendCmd(0x01);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	0e 94 35 0b 	call	0x166a	; 0x166a <HLCD_voidSendCmd>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a0 e0       	ldi	r26, 0x00	; 0
    118c:	b0 e4       	ldi	r27, 0x40	; 64
    118e:	8b 87       	std	Y+11, r24	; 0x0b
    1190:	9c 87       	std	Y+12, r25	; 0x0c
    1192:	ad 87       	std	Y+13, r26	; 0x0d
    1194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1196:	6b 85       	ldd	r22, Y+11	; 0x0b
    1198:	7c 85       	ldd	r23, Y+12	; 0x0c
    119a:	8d 85       	ldd	r24, Y+13	; 0x0d
    119c:	9e 85       	ldd	r25, Y+14	; 0x0e
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4a ef       	ldi	r20, 0xFA	; 250
    11a4:	54 e4       	ldi	r21, 0x44	; 68
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8f 83       	std	Y+7, r24	; 0x07
    11b0:	98 87       	std	Y+8, r25	; 0x08
    11b2:	a9 87       	std	Y+9, r26	; 0x09
    11b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <HLCD_voidInit+0x3aa>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <HLCD_voidInit+0x428>
	else if (__tmp > 65535)
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	57 e4       	ldi	r21, 0x47	; 71
    11e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	4c f5       	brge	.+82     	; 0x1242 <HLCD_voidInit+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e2       	ldi	r20, 0x20	; 32
    11fe:	51 e4       	ldi	r21, 0x41	; 65
    1200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9e 83       	std	Y+6, r25	; 0x06
    1216:	8d 83       	std	Y+5, r24	; 0x05
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <HLCD_voidInit+0x40a>
    121a:	88 ec       	ldi	r24, 0xC8	; 200
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	9c 83       	std	Y+4, r25	; 0x04
    1220:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <HLCD_voidInit+0x3f8>
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	69 f7       	brne	.-38     	; 0x121a <HLCD_voidInit+0x3ec>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <HLCD_voidInit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1242:	6f 81       	ldd	r22, Y+7	; 0x07
    1244:	78 85       	ldd	r23, Y+8	; 0x08
    1246:	89 85       	ldd	r24, Y+9	; 0x09
    1248:	9a 85       	ldd	r25, Y+10	; 0x0a
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <HLCD_voidInit+0x434>
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidSendCmd(0x06);
    126a:	86 e0       	ldi	r24, 0x06	; 6
    126c:	0e 94 35 0b 	call	0x166a	; 0x166a <HLCD_voidSendCmd>
}
    1270:	ee 96       	adiw	r28, 0x3e	; 62
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <HLCD_voidSendChar>:
void HLCD_voidSendChar(char ARG_u8Data)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	e9 97       	sbiw	r28, 0x39	; 57
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	89 af       	std	Y+57, r24	; 0x39
	/*control preparation*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,MDIO_HIGH);
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	65 e0       	ldi	r22, 0x05	; 5
    129c:	42 e0       	ldi	r20, 0x02	; 2
    129e:	0e 94 c6 11 	call	0x238c	; 0x238c <MDIO_stderrorSetPinValue>
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,MDIO_LOW);
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	66 e0       	ldi	r22, 0x06	; 6
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	0e 94 c6 11 	call	0x238c	; 0x238c <MDIO_stderrorSetPinValue>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a0 e8       	ldi	r26, 0x80	; 128
    12b2:	bf e3       	ldi	r27, 0x3F	; 63
    12b4:	8d ab       	std	Y+53, r24	; 0x35
    12b6:	9e ab       	std	Y+54, r25	; 0x36
    12b8:	af ab       	std	Y+55, r26	; 0x37
    12ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	6d a9       	ldd	r22, Y+53	; 0x35
    12be:	7e a9       	ldd	r23, Y+54	; 0x36
    12c0:	8f a9       	ldd	r24, Y+55	; 0x37
    12c2:	98 ad       	ldd	r25, Y+56	; 0x38
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a ef       	ldi	r20, 0xFA	; 250
    12ca:	54 e4       	ldi	r21, 0x44	; 68
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	89 ab       	std	Y+49, r24	; 0x31
    12d6:	9a ab       	std	Y+50, r25	; 0x32
    12d8:	ab ab       	std	Y+51, r26	; 0x33
    12da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12dc:	69 a9       	ldd	r22, Y+49	; 0x31
    12de:	7a a9       	ldd	r23, Y+50	; 0x32
    12e0:	8b a9       	ldd	r24, Y+51	; 0x33
    12e2:	9c a9       	ldd	r25, Y+52	; 0x34
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <HLCD_voidSendChar+0x7c>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	98 ab       	std	Y+48, r25	; 0x30
    12fa:	8f a7       	std	Y+47, r24	; 0x2f
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <HLCD_voidSendChar+0xfa>
	else if (__tmp > 65535)
    12fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1300:	7a a9       	ldd	r23, Y+50	; 0x32
    1302:	8b a9       	ldd	r24, Y+51	; 0x33
    1304:	9c a9       	ldd	r25, Y+52	; 0x34
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	4c f5       	brge	.+82     	; 0x1368 <HLCD_voidSendChar+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	6d a9       	ldd	r22, Y+53	; 0x35
    1318:	7e a9       	ldd	r23, Y+54	; 0x36
    131a:	8f a9       	ldd	r24, Y+55	; 0x37
    131c:	98 ad       	ldd	r25, Y+56	; 0x38
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	98 ab       	std	Y+48, r25	; 0x30
    133c:	8f a7       	std	Y+47, r24	; 0x2f
    133e:	0f c0       	rjmp	.+30     	; 0x135e <HLCD_voidSendChar+0xdc>
    1340:	88 ec       	ldi	r24, 0xC8	; 200
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9e a7       	std	Y+46, r25	; 0x2e
    1346:	8d a7       	std	Y+45, r24	; 0x2d
    1348:	8d a5       	ldd	r24, Y+45	; 0x2d
    134a:	9e a5       	ldd	r25, Y+46	; 0x2e
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <HLCD_voidSendChar+0xca>
    1350:	9e a7       	std	Y+46, r25	; 0x2e
    1352:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1354:	8f a5       	ldd	r24, Y+47	; 0x2f
    1356:	98 a9       	ldd	r25, Y+48	; 0x30
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	98 ab       	std	Y+48, r25	; 0x30
    135c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1360:	98 a9       	ldd	r25, Y+48	; 0x30
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	69 f7       	brne	.-38     	; 0x1340 <HLCD_voidSendChar+0xbe>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <HLCD_voidSendChar+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	69 a9       	ldd	r22, Y+49	; 0x31
    136a:	7a a9       	ldd	r23, Y+50	; 0x32
    136c:	8b a9       	ldd	r24, Y+51	; 0x33
    136e:	9c a9       	ldd	r25, Y+52	; 0x34
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	98 ab       	std	Y+48, r25	; 0x30
    137a:	8f a7       	std	Y+47, r24	; 0x2f
    137c:	8f a5       	ldd	r24, Y+47	; 0x2f
    137e:	98 a9       	ldd	r25, Y+48	; 0x30
    1380:	9c a7       	std	Y+44, r25	; 0x2c
    1382:	8b a7       	std	Y+43, r24	; 0x2b
    1384:	8b a5       	ldd	r24, Y+43	; 0x2b
    1386:	9c a5       	ldd	r25, Y+44	; 0x2c
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <HLCD_voidSendChar+0x106>
    138c:	9c a7       	std	Y+44, r25	; 0x2c
    138e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/*enable preparation & send Data*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_HIGH);
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	67 e0       	ldi	r22, 0x07	; 7
    1394:	42 e0       	ldi	r20, 0x02	; 2
    1396:	0e 94 c6 11 	call	0x238c	; 0x238c <MDIO_stderrorSetPinValue>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 e8       	ldi	r26, 0x80	; 128
    13a0:	bf e3       	ldi	r27, 0x3F	; 63
    13a2:	8f a3       	std	Y+39, r24	; 0x27
    13a4:	98 a7       	std	Y+40, r25	; 0x28
    13a6:	a9 a7       	std	Y+41, r26	; 0x29
    13a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13aa:	6f a1       	ldd	r22, Y+39	; 0x27
    13ac:	78 a5       	ldd	r23, Y+40	; 0x28
    13ae:	89 a5       	ldd	r24, Y+41	; 0x29
    13b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	4a ef       	ldi	r20, 0xFA	; 250
    13b8:	54 e4       	ldi	r21, 0x44	; 68
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8b a3       	std	Y+35, r24	; 0x23
    13c4:	9c a3       	std	Y+36, r25	; 0x24
    13c6:	ad a3       	std	Y+37, r26	; 0x25
    13c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13ca:	6b a1       	ldd	r22, Y+35	; 0x23
    13cc:	7c a1       	ldd	r23, Y+36	; 0x24
    13ce:	8d a1       	ldd	r24, Y+37	; 0x25
    13d0:	9e a1       	ldd	r25, Y+38	; 0x26
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13de:	88 23       	and	r24, r24
    13e0:	2c f4       	brge	.+10     	; 0x13ec <HLCD_voidSendChar+0x16a>
		__ticks = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9a a3       	std	Y+34, r25	; 0x22
    13e8:	89 a3       	std	Y+33, r24	; 0x21
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <HLCD_voidSendChar+0x1e8>
	else if (__tmp > 65535)
    13ec:	6b a1       	ldd	r22, Y+35	; 0x23
    13ee:	7c a1       	ldd	r23, Y+36	; 0x24
    13f0:	8d a1       	ldd	r24, Y+37	; 0x25
    13f2:	9e a1       	ldd	r25, Y+38	; 0x26
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	57 e4       	ldi	r21, 0x47	; 71
    13fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1400:	18 16       	cp	r1, r24
    1402:	4c f5       	brge	.+82     	; 0x1456 <HLCD_voidSendChar+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	6f a1       	ldd	r22, Y+39	; 0x27
    1406:	78 a5       	ldd	r23, Y+40	; 0x28
    1408:	89 a5       	ldd	r24, Y+41	; 0x29
    140a:	9a a5       	ldd	r25, Y+42	; 0x2a
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9a a3       	std	Y+34, r25	; 0x22
    142a:	89 a3       	std	Y+33, r24	; 0x21
    142c:	0f c0       	rjmp	.+30     	; 0x144c <HLCD_voidSendChar+0x1ca>
    142e:	88 ec       	ldi	r24, 0xC8	; 200
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	98 a3       	std	Y+32, r25	; 0x20
    1434:	8f 8f       	std	Y+31, r24	; 0x1f
    1436:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1438:	98 a1       	ldd	r25, Y+32	; 0x20
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <HLCD_voidSendChar+0x1b8>
    143e:	98 a3       	std	Y+32, r25	; 0x20
    1440:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	89 a1       	ldd	r24, Y+33	; 0x21
    1444:	9a a1       	ldd	r25, Y+34	; 0x22
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9a a3       	std	Y+34, r25	; 0x22
    144a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	89 a1       	ldd	r24, Y+33	; 0x21
    144e:	9a a1       	ldd	r25, Y+34	; 0x22
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	69 f7       	brne	.-38     	; 0x142e <HLCD_voidSendChar+0x1ac>
    1454:	14 c0       	rjmp	.+40     	; 0x147e <HLCD_voidSendChar+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1456:	6b a1       	ldd	r22, Y+35	; 0x23
    1458:	7c a1       	ldd	r23, Y+36	; 0x24
    145a:	8d a1       	ldd	r24, Y+37	; 0x25
    145c:	9e a1       	ldd	r25, Y+38	; 0x26
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9a a3       	std	Y+34, r25	; 0x22
    1468:	89 a3       	std	Y+33, r24	; 0x21
    146a:	89 a1       	ldd	r24, Y+33	; 0x21
    146c:	9a a1       	ldd	r25, Y+34	; 0x22
    146e:	9e 8f       	std	Y+30, r25	; 0x1e
    1470:	8d 8f       	std	Y+29, r24	; 0x1d
    1472:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1474:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <HLCD_voidSendChar+0x1f4>
    147a:	9e 8f       	std	Y+30, r25	; 0x1e
    147c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MDIO_stderrorSetPortValue(LCD_DATA_PORT,ARG_u8Data);
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	69 ad       	ldd	r22, Y+57	; 0x39
    1482:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <MDIO_stderrorSetPortValue>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a0 e8       	ldi	r26, 0x80	; 128
    148c:	bf e3       	ldi	r27, 0x3F	; 63
    148e:	89 8f       	std	Y+25, r24	; 0x19
    1490:	9a 8f       	std	Y+26, r25	; 0x1a
    1492:	ab 8f       	std	Y+27, r26	; 0x1b
    1494:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1496:	69 8d       	ldd	r22, Y+25	; 0x19
    1498:	7a 8d       	ldd	r23, Y+26	; 0x1a
    149a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    149c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4a ef       	ldi	r20, 0xFA	; 250
    14a4:	54 e4       	ldi	r21, 0x44	; 68
    14a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	8d 8b       	std	Y+21, r24	; 0x15
    14b0:	9e 8b       	std	Y+22, r25	; 0x16
    14b2:	af 8b       	std	Y+23, r26	; 0x17
    14b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14b6:	6d 89       	ldd	r22, Y+21	; 0x15
    14b8:	7e 89       	ldd	r23, Y+22	; 0x16
    14ba:	8f 89       	ldd	r24, Y+23	; 0x17
    14bc:	98 8d       	ldd	r25, Y+24	; 0x18
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14ca:	88 23       	and	r24, r24
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <HLCD_voidSendChar+0x256>
		__ticks = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9c 8b       	std	Y+20, r25	; 0x14
    14d4:	8b 8b       	std	Y+19, r24	; 0x13
    14d6:	3f c0       	rjmp	.+126    	; 0x1556 <HLCD_voidSendChar+0x2d4>
	else if (__tmp > 65535)
    14d8:	6d 89       	ldd	r22, Y+21	; 0x15
    14da:	7e 89       	ldd	r23, Y+22	; 0x16
    14dc:	8f 89       	ldd	r24, Y+23	; 0x17
    14de:	98 8d       	ldd	r25, Y+24	; 0x18
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	3f ef       	ldi	r19, 0xFF	; 255
    14e4:	4f e7       	ldi	r20, 0x7F	; 127
    14e6:	57 e4       	ldi	r21, 0x47	; 71
    14e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14ec:	18 16       	cp	r1, r24
    14ee:	4c f5       	brge	.+82     	; 0x1542 <HLCD_voidSendChar+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f0:	69 8d       	ldd	r22, Y+25	; 0x19
    14f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e2       	ldi	r20, 0x20	; 32
    14fe:	51 e4       	ldi	r21, 0x41	; 65
    1500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9c 8b       	std	Y+20, r25	; 0x14
    1516:	8b 8b       	std	Y+19, r24	; 0x13
    1518:	0f c0       	rjmp	.+30     	; 0x1538 <HLCD_voidSendChar+0x2b6>
    151a:	88 ec       	ldi	r24, 0xC8	; 200
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9a 8b       	std	Y+18, r25	; 0x12
    1520:	89 8b       	std	Y+17, r24	; 0x11
    1522:	89 89       	ldd	r24, Y+17	; 0x11
    1524:	9a 89       	ldd	r25, Y+18	; 0x12
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <HLCD_voidSendChar+0x2a4>
    152a:	9a 8b       	std	Y+18, r25	; 0x12
    152c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152e:	8b 89       	ldd	r24, Y+19	; 0x13
    1530:	9c 89       	ldd	r25, Y+20	; 0x14
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	9c 8b       	std	Y+20, r25	; 0x14
    1536:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1538:	8b 89       	ldd	r24, Y+19	; 0x13
    153a:	9c 89       	ldd	r25, Y+20	; 0x14
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	69 f7       	brne	.-38     	; 0x151a <HLCD_voidSendChar+0x298>
    1540:	14 c0       	rjmp	.+40     	; 0x156a <HLCD_voidSendChar+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1542:	6d 89       	ldd	r22, Y+21	; 0x15
    1544:	7e 89       	ldd	r23, Y+22	; 0x16
    1546:	8f 89       	ldd	r24, Y+23	; 0x17
    1548:	98 8d       	ldd	r25, Y+24	; 0x18
    154a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9c 8b       	std	Y+20, r25	; 0x14
    1554:	8b 8b       	std	Y+19, r24	; 0x13
    1556:	8b 89       	ldd	r24, Y+19	; 0x13
    1558:	9c 89       	ldd	r25, Y+20	; 0x14
    155a:	98 8b       	std	Y+16, r25	; 0x10
    155c:	8f 87       	std	Y+15, r24	; 0x0f
    155e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1560:	98 89       	ldd	r25, Y+16	; 0x10
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <HLCD_voidSendChar+0x2e0>
    1566:	98 8b       	std	Y+16, r25	; 0x10
    1568:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_LOW);
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	67 e0       	ldi	r22, 0x07	; 7
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 c6 11 	call	0x238c	; 0x238c <MDIO_stderrorSetPinValue>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e4       	ldi	r27, 0x40	; 64
    157c:	8b 87       	std	Y+11, r24	; 0x0b
    157e:	9c 87       	std	Y+12, r25	; 0x0c
    1580:	ad 87       	std	Y+13, r26	; 0x0d
    1582:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1584:	6b 85       	ldd	r22, Y+11	; 0x0b
    1586:	7c 85       	ldd	r23, Y+12	; 0x0c
    1588:	8d 85       	ldd	r24, Y+13	; 0x0d
    158a:	9e 85       	ldd	r25, Y+14	; 0x0e
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	4a ef       	ldi	r20, 0xFA	; 250
    1592:	54 e4       	ldi	r21, 0x44	; 68
    1594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	8f 83       	std	Y+7, r24	; 0x07
    159e:	98 87       	std	Y+8, r25	; 0x08
    15a0:	a9 87       	std	Y+9, r26	; 0x09
    15a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15b8:	88 23       	and	r24, r24
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <HLCD_voidSendChar+0x344>
		__ticks = 1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	3f c0       	rjmp	.+126    	; 0x1644 <HLCD_voidSendChar+0x3c2>
	else if (__tmp > 65535)
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	4c f5       	brge	.+82     	; 0x1630 <HLCD_voidSendChar+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e2       	ldi	r20, 0x20	; 32
    15ec:	51 e4       	ldi	r21, 0x41	; 65
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	0f c0       	rjmp	.+30     	; 0x1626 <HLCD_voidSendChar+0x3a4>
    1608:	88 ec       	ldi	r24, 0xC8	; 200
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 83       	std	Y+4, r25	; 0x04
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <HLCD_voidSendChar+0x392>
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	69 f7       	brne	.-38     	; 0x1608 <HLCD_voidSendChar+0x386>
    162e:	14 c0       	rjmp	.+40     	; 0x1658 <HLCD_voidSendChar+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1630:	6f 81       	ldd	r22, Y+7	; 0x07
    1632:	78 85       	ldd	r23, Y+8	; 0x08
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	9a 83       	std	Y+2, r25	; 0x02
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <HLCD_voidSendChar+0x3ce>
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1658:	e9 96       	adiw	r28, 0x39	; 57
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <HLCD_voidSendCmd>:

void HLCD_voidSendCmd(u8 ARG_u8Cmd)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	6d 97       	sbiw	r28, 0x1d	; 29
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*control preparation*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,MDIO_LOW);
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	65 e0       	ldi	r22, 0x05	; 5
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	0e 94 c6 11 	call	0x238c	; 0x238c <MDIO_stderrorSetPinValue>
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,MDIO_LOW);
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	66 e0       	ldi	r22, 0x06	; 6
    168e:	41 e0       	ldi	r20, 0x01	; 1
    1690:	0e 94 c6 11 	call	0x238c	; 0x238c <MDIO_stderrorSetPinValue>

	/*enable preparation & send cmd*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_HIGH);
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	67 e0       	ldi	r22, 0x07	; 7
    1698:	42 e0       	ldi	r20, 0x02	; 2
    169a:	0e 94 c6 11 	call	0x238c	; 0x238c <MDIO_stderrorSetPinValue>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a0 e8       	ldi	r26, 0x80	; 128
    16a4:	bf e3       	ldi	r27, 0x3F	; 63
    16a6:	89 8f       	std	Y+25, r24	; 0x19
    16a8:	9a 8f       	std	Y+26, r25	; 0x1a
    16aa:	ab 8f       	std	Y+27, r26	; 0x1b
    16ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	69 8d       	ldd	r22, Y+25	; 0x19
    16b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	4a ef       	ldi	r20, 0xFA	; 250
    16bc:	54 e4       	ldi	r21, 0x44	; 68
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8d 8b       	std	Y+21, r24	; 0x15
    16c8:	9e 8b       	std	Y+22, r25	; 0x16
    16ca:	af 8b       	std	Y+23, r26	; 0x17
    16cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16ce:	6d 89       	ldd	r22, Y+21	; 0x15
    16d0:	7e 89       	ldd	r23, Y+22	; 0x16
    16d2:	8f 89       	ldd	r24, Y+23	; 0x17
    16d4:	98 8d       	ldd	r25, Y+24	; 0x18
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <HLCD_voidSendCmd+0x86>
		__ticks = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9c 8b       	std	Y+20, r25	; 0x14
    16ec:	8b 8b       	std	Y+19, r24	; 0x13
    16ee:	3f c0       	rjmp	.+126    	; 0x176e <HLCD_voidSendCmd+0x104>
	else if (__tmp > 65535)
    16f0:	6d 89       	ldd	r22, Y+21	; 0x15
    16f2:	7e 89       	ldd	r23, Y+22	; 0x16
    16f4:	8f 89       	ldd	r24, Y+23	; 0x17
    16f6:	98 8d       	ldd	r25, Y+24	; 0x18
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	4f e7       	ldi	r20, 0x7F	; 127
    16fe:	57 e4       	ldi	r21, 0x47	; 71
    1700:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1704:	18 16       	cp	r1, r24
    1706:	4c f5       	brge	.+82     	; 0x175a <HLCD_voidSendCmd+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1708:	69 8d       	ldd	r22, Y+25	; 0x19
    170a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9c 8b       	std	Y+20, r25	; 0x14
    172e:	8b 8b       	std	Y+19, r24	; 0x13
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <HLCD_voidSendCmd+0xe6>
    1732:	88 ec       	ldi	r24, 0xC8	; 200
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9a 8b       	std	Y+18, r25	; 0x12
    1738:	89 8b       	std	Y+17, r24	; 0x11
    173a:	89 89       	ldd	r24, Y+17	; 0x11
    173c:	9a 89       	ldd	r25, Y+18	; 0x12
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <HLCD_voidSendCmd+0xd4>
    1742:	9a 8b       	std	Y+18, r25	; 0x12
    1744:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	8b 89       	ldd	r24, Y+19	; 0x13
    1748:	9c 89       	ldd	r25, Y+20	; 0x14
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9c 8b       	std	Y+20, r25	; 0x14
    174e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1750:	8b 89       	ldd	r24, Y+19	; 0x13
    1752:	9c 89       	ldd	r25, Y+20	; 0x14
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <HLCD_voidSendCmd+0xc8>
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <HLCD_voidSendCmd+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	6d 89       	ldd	r22, Y+21	; 0x15
    175c:	7e 89       	ldd	r23, Y+22	; 0x16
    175e:	8f 89       	ldd	r24, Y+23	; 0x17
    1760:	98 8d       	ldd	r25, Y+24	; 0x18
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9c 8b       	std	Y+20, r25	; 0x14
    176c:	8b 8b       	std	Y+19, r24	; 0x13
    176e:	8b 89       	ldd	r24, Y+19	; 0x13
    1770:	9c 89       	ldd	r25, Y+20	; 0x14
    1772:	98 8b       	std	Y+16, r25	; 0x10
    1774:	8f 87       	std	Y+15, r24	; 0x0f
    1776:	8f 85       	ldd	r24, Y+15	; 0x0f
    1778:	98 89       	ldd	r25, Y+16	; 0x10
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <HLCD_voidSendCmd+0x110>
    177e:	98 8b       	std	Y+16, r25	; 0x10
    1780:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_stderrorSetPortValue(LCD_DATA_PORT,ARG_u8Cmd);
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1786:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <MDIO_stderrorSetPortValue>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e8       	ldi	r26, 0x80	; 128
    1790:	bf e3       	ldi	r27, 0x3F	; 63
    1792:	8b 87       	std	Y+11, r24	; 0x0b
    1794:	9c 87       	std	Y+12, r25	; 0x0c
    1796:	ad 87       	std	Y+13, r26	; 0x0d
    1798:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179a:	6b 85       	ldd	r22, Y+11	; 0x0b
    179c:	7c 85       	ldd	r23, Y+12	; 0x0c
    179e:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4a ef       	ldi	r20, 0xFA	; 250
    17a8:	54 e4       	ldi	r21, 0x44	; 68
    17aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	8f 83       	std	Y+7, r24	; 0x07
    17b4:	98 87       	std	Y+8, r25	; 0x08
    17b6:	a9 87       	std	Y+9, r26	; 0x09
    17b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ba:	6f 81       	ldd	r22, Y+7	; 0x07
    17bc:	78 85       	ldd	r23, Y+8	; 0x08
    17be:	89 85       	ldd	r24, Y+9	; 0x09
    17c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	2c f4       	brge	.+10     	; 0x17dc <HLCD_voidSendCmd+0x172>
		__ticks = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    17da:	3f c0       	rjmp	.+126    	; 0x185a <HLCD_voidSendCmd+0x1f0>
	else if (__tmp > 65535)
    17dc:	6f 81       	ldd	r22, Y+7	; 0x07
    17de:	78 85       	ldd	r23, Y+8	; 0x08
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	4c f5       	brge	.+82     	; 0x1846 <HLCD_voidSendCmd+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	0f c0       	rjmp	.+30     	; 0x183c <HLCD_voidSendCmd+0x1d2>
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9c 83       	std	Y+4, r25	; 0x04
    1824:	8b 83       	std	Y+3, r24	; 0x03
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <HLCD_voidSendCmd+0x1c0>
    182e:	9c 83       	std	Y+4, r25	; 0x04
    1830:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	69 f7       	brne	.-38     	; 0x181e <HLCD_voidSendCmd+0x1b4>
    1844:	14 c0       	rjmp	.+40     	; 0x186e <HLCD_voidSendCmd+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1846:	6f 81       	ldd	r22, Y+7	; 0x07
    1848:	78 85       	ldd	r23, Y+8	; 0x08
    184a:	89 85       	ldd	r24, Y+9	; 0x09
    184c:	9a 85       	ldd	r25, Y+10	; 0x0a
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9e 83       	std	Y+6, r25	; 0x06
    1858:	8d 83       	std	Y+5, r24	; 0x05
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <HLCD_voidSendCmd+0x1fc>
    186a:	9a 83       	std	Y+2, r25	; 0x02
    186c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_LOW);
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	67 e0       	ldi	r22, 0x07	; 7
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	0e 94 c6 11 	call	0x238c	; 0x238c <MDIO_stderrorSetPinValue>

}
    1878:	6d 96       	adiw	r28, 0x1d	; 29
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	cd bf       	out	0x3d, r28	; 61
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <HLCD_voidSendString>:
void HLCD_voidSendString(const char * ARG_ccharpString)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <HLCD_voidSendString+0x6>
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	9b 83       	std	Y+3, r25	; 0x03
    1898:	8a 83       	std	Y+2, r24	; 0x02
	if(ARG_ccharpString != NULL_POINTER )
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	9b 81       	ldd	r25, Y+3	; 0x03
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	d1 f0       	breq	.+52     	; 0x18d6 <HLCD_voidSendString+0x4c>
	{
		u8 L_u8i=0;
    18a2:	19 82       	std	Y+1, r1	; 0x01
		do{
			HLCD_voidSendChar(ARG_ccharpString[L_u8i]);
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	9b 81       	ldd	r25, Y+3	; 0x03
    18ae:	fc 01       	movw	r30, r24
    18b0:	e2 0f       	add	r30, r18
    18b2:	f3 1f       	adc	r31, r19
    18b4:	80 81       	ld	r24, Z
    18b6:	0e 94 41 09 	call	0x1282	; 0x1282 <HLCD_voidSendChar>
			L_u8i++;
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	89 83       	std	Y+1, r24	; 0x01
		}while(ARG_ccharpString[L_u8i] != '\0' );
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	fc 01       	movw	r30, r24
    18cc:	e2 0f       	add	r30, r18
    18ce:	f3 1f       	adc	r31, r19
    18d0:	80 81       	ld	r24, Z
    18d2:	88 23       	and	r24, r24
    18d4:	39 f7       	brne	.-50     	; 0x18a4 <HLCD_voidSendString+0x1a>
	}

}
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <HLCD_voidSetCursor>:
void HLCD_voidSetCursor(u8 ARG_u8Row,u8 ARG_u8Col)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <HLCD_voidSetCursor+0x6>
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	6a 83       	std	Y+2, r22	; 0x02

	HLCD_voidSendCmd((0x80+ARG_u8Col+((ARG_u8Row*4)<<4)));
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	98 2f       	mov	r25, r24
    1900:	92 95       	swap	r25
    1902:	90 7f       	andi	r25, 0xF0	; 240
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	89 0f       	add	r24, r25
    1908:	80 58       	subi	r24, 0x80	; 128
    190a:	0e 94 35 0b 	call	0x166a	; 0x166a <HLCD_voidSendCmd>
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <HLCD_voidWriteCustom>:
void HLCD_voidWriteCustom(const char * ARG_ccharpString,u8 ARG_u8Location)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <HLCD_voidWriteCustom+0x6>
    191e:	00 d0       	rcall	.+0      	; 0x1920 <HLCD_voidWriteCustom+0x8>
    1920:	0f 92       	push	r0
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	9c 83       	std	Y+4, r25	; 0x04
    1928:	8b 83       	std	Y+3, r24	; 0x03
    192a:	6d 83       	std	Y+5, r22	; 0x05
	u8 L_u8address =0;
    192c:	1a 82       	std	Y+2, r1	; 0x02


	if(ARG_u8Location<8)
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	88 30       	cpi	r24, 0x08	; 8
    1932:	30 f5       	brcc	.+76     	; 0x1980 <HLCD_voidWriteCustom+0x68>
	{
		L_u8address=ARG_u8Location*8;
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	8a 83       	std	Y+2, r24	; 0x02
		/*0-1-D5-D4-D3-D2-D1-D0 TO GO TO CGRAM D5-D0 LOCATION 0-7*/
		SET_BIT(L_u8address,6);
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	80 64       	ori	r24, 0x40	; 64
    194c:	8a 83       	std	Y+2, r24	; 0x02
		HLCD_voidSendCmd(L_u8address);
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	0e 94 35 0b 	call	0x166a	; 0x166a <HLCD_voidSendCmd>
		u8 L_u8i;
		for(L_u8i=0;L_u8i<8;L_u8i++)
    1954:	19 82       	std	Y+1, r1	; 0x01
    1956:	0e c0       	rjmp	.+28     	; 0x1974 <HLCD_voidWriteCustom+0x5c>
		{
			HLCD_voidSendChar(ARG_ccharpString[L_u8i]);
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	fc 01       	movw	r30, r24
    1964:	e2 0f       	add	r30, r18
    1966:	f3 1f       	adc	r31, r19
    1968:	80 81       	ld	r24, Z
    196a:	0e 94 41 09 	call	0x1282	; 0x1282 <HLCD_voidSendChar>
		L_u8address=ARG_u8Location*8;
		/*0-1-D5-D4-D3-D2-D1-D0 TO GO TO CGRAM D5-D0 LOCATION 0-7*/
		SET_BIT(L_u8address,6);
		HLCD_voidSendCmd(L_u8address);
		u8 L_u8i;
		for(L_u8i=0;L_u8i<8;L_u8i++)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	8f 5f       	subi	r24, 0xFF	; 255
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	88 30       	cpi	r24, 0x08	; 8
    1978:	78 f3       	brcs	.-34     	; 0x1958 <HLCD_voidWriteCustom+0x40>
		{
			HLCD_voidSendChar(ARG_ccharpString[L_u8i]);
		}
		HLCD_voidSendCmd(0x02);/*return home*/
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	0e 94 35 0b 	call	0x166a	; 0x166a <HLCD_voidSendCmd>
	{


	}

}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCmd(0x01);//clear
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	0e 94 35 0b 	call	0x166a	; 0x166a <HLCD_voidSendCmd>
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <HLCD_voidDisplayNumber>:



void HLCD_voidDisplayNumber(u16 ARG_u8Num)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	67 97       	sbiw	r28, 0x17	; 23
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	9f 8b       	std	Y+23, r25	; 0x17
    19ba:	8e 8b       	std	Y+22, r24	; 0x16
	/* String to hold the ascii result */
	char Result[21];
	/* 10 for decimal */
	itoa((int)ARG_u8Num,Result,10);
    19bc:	8e 89       	ldd	r24, Y+22	; 0x16
    19be:	9f 89       	ldd	r25, Y+23	; 0x17
    19c0:	9e 01       	movw	r18, r28
    19c2:	2f 5f       	subi	r18, 0xFF	; 255
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	b9 01       	movw	r22, r18
    19c8:	4a e0       	ldi	r20, 0x0A	; 10
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <itoa>
	HLCD_voidSendString(Result);
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	0e 94 45 0c 	call	0x188a	; 0x188a <HLCD_voidSendString>
}
    19d8:	67 96       	adiw	r28, 0x17	; 23
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <MADC_stderrorInit>:
(
	u8 ARG_u8RefVoltage, 
	u8 ARG_u8PreScalar,
	u16 ARG_u8Resolution
)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <MADC_stderrorInit+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <MADC_stderrorInit+0x8>
    19f2:	0f 92       	push	r0
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	8a 83       	std	Y+2, r24	; 0x02
    19fa:	6b 83       	std	Y+3, r22	; 0x03
    19fc:	5d 83       	std	Y+5, r21	; 0x05
    19fe:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrorError=E_NOK;
    1a00:	19 82       	std	Y+1, r1	; 0x01
	
	if((ARG_u8RefVoltage>=0&&ARG_u8RefVoltage<=3)&&(ARG_u8PreScalar>=1&&ARG_u8PreScalar<=7)&&(ARG_u8Resolution==256||ARG_u8Resolution==1024))
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <MADC_stderrorInit+0x20>
    1a08:	59 c0       	rjmp	.+178    	; 0x1abc <MADC_stderrorInit+0xd2>
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	88 23       	and	r24, r24
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <MADC_stderrorInit+0x28>
    1a10:	55 c0       	rjmp	.+170    	; 0x1abc <MADC_stderrorInit+0xd2>
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	88 30       	cpi	r24, 0x08	; 8
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <MADC_stderrorInit+0x30>
    1a18:	51 c0       	rjmp	.+162    	; 0x1abc <MADC_stderrorInit+0xd2>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	21 e0       	ldi	r18, 0x01	; 1
    1a20:	80 30       	cpi	r24, 0x00	; 0
    1a22:	92 07       	cpc	r25, r18
    1a24:	39 f0       	breq	.+14     	; 0x1a34 <MADC_stderrorInit+0x4a>
    1a26:	8c 81       	ldd	r24, Y+4	; 0x04
    1a28:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2a:	24 e0       	ldi	r18, 0x04	; 4
    1a2c:	80 30       	cpi	r24, 0x00	; 0
    1a2e:	92 07       	cpc	r25, r18
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <MADC_stderrorInit+0x4a>
    1a32:	44 c0       	rjmp	.+136    	; 0x1abc <MADC_stderrorInit+0xd2>
	{
		
		MADC_ADMUX =(MADC_ADMUX&RefVoltage_MASK)|(ARG_u8RefVoltage<<REFS0);
    1a34:	a7 e2       	ldi	r26, 0x27	; 39
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e7 e2       	ldi	r30, 0x27	; 39
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	28 2f       	mov	r18, r24
    1a40:	2f 73       	andi	r18, 0x3F	; 63
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	00 24       	eor	r0, r0
    1a4a:	96 95       	lsr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	07 94       	ror	r0
    1a50:	96 95       	lsr	r25
    1a52:	87 95       	ror	r24
    1a54:	07 94       	ror	r0
    1a56:	98 2f       	mov	r25, r24
    1a58:	80 2d       	mov	r24, r0
    1a5a:	82 2b       	or	r24, r18
    1a5c:	8c 93       	st	X, r24
		
		MADC_ADCSRA =(MADC_ADCSRA&PRESCALAR_MASK)|ARG_u8PreScalar;
    1a5e:	a6 e2       	ldi	r26, 0x26	; 38
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e6 e2       	ldi	r30, 0x26	; 38
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	98 2f       	mov	r25, r24
    1a6a:	98 7f       	andi	r25, 0xF8	; 248
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	89 2b       	or	r24, r25
    1a70:	8c 93       	st	X, r24
		
		if(ARG_u8Resolution==256)
    1a72:	8c 81       	ldd	r24, Y+4	; 0x04
    1a74:	9d 81       	ldd	r25, Y+5	; 0x05
    1a76:	21 e0       	ldi	r18, 0x01	; 1
    1a78:	80 30       	cpi	r24, 0x00	; 0
    1a7a:	92 07       	cpc	r25, r18
    1a7c:	59 f4       	brne	.+22     	; 0x1a94 <MADC_stderrorInit+0xaa>
		{
			/*LEFT*/
			SET_BIT(MADC_ADMUX,ADLAR);
    1a7e:	a7 e2       	ldi	r26, 0x27	; 39
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e7 e2       	ldi	r30, 0x27	; 39
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	80 62       	ori	r24, 0x20	; 32
    1a8a:	8c 93       	st	X, r24
			MADC_u8Resolution=1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	80 93 74 01 	sts	0x0174, r24
    1a92:	0a c0       	rjmp	.+20     	; 0x1aa8 <MADC_stderrorInit+0xbe>
		}
		else
		{
			/*RIGHT*/
			CLEAR_BIT(MADC_ADMUX,ADLAR);
    1a94:	a7 e2       	ldi	r26, 0x27	; 39
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e7 e2       	ldi	r30, 0x27	; 39
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8f 7d       	andi	r24, 0xDF	; 223
    1aa0:	8c 93       	st	X, r24
			MADC_u8Resolution=2;
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	80 93 74 01 	sts	0x0174, r24
		}
		/*ENABLE ADC*/
		SET_BIT(MADC_ADCSRA,ADEN);
    1aa8:	a6 e2       	ldi	r26, 0x26	; 38
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e6 e2       	ldi	r30, 0x26	; 38
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	80 68       	ori	r24, 0x80	; 128
    1ab4:	8c 93       	st	X, r24
		L_stderrorError=E_OK;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <MADC_stderrorInit+0xd4>
	}
	else
	{
		L_stderrorError=E_NOK;
    1abc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return L_stderrorError;
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <MADC_stderrorStartConversionSync>:
STD_error_t	MADC_stderrorStartConversionSync
(
	u16* ARG_u16pADCReading,
	u8 ARG_u8Channel
)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	28 97       	sbiw	r28, 0x08	; 8
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	9f 83       	std	Y+7, r25	; 0x07
    1ae6:	8e 83       	std	Y+6, r24	; 0x06
    1ae8:	68 87       	std	Y+8, r22	; 0x08
	STD_error_t L_stderrorError=E_NOK;
    1aea:	1d 82       	std	Y+5, r1	; 0x05
	
	if(MADC_u8BusyState==IDEL)
    1aec:	80 91 79 01 	lds	r24, 0x0179
    1af0:	88 23       	and	r24, r24
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <MADC_stderrorStartConversionSync+0x26>
    1af4:	87 c0       	rjmp	.+270    	; 0x1c04 <MADC_stderrorStartConversionSync+0x134>
	{
		MADC_u8BusyState=BUSY;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	80 93 79 01 	sts	0x0179, r24
		
		if((ARG_u8Channel>=0&&ARG_u8Channel<=31)&&(MADC_u8Resolution==1||MADC_u8Resolution==2)&&(ARG_u16pADCReading!=NULL_POINTER))
    1afc:	88 85       	ldd	r24, Y+8	; 0x08
    1afe:	80 32       	cpi	r24, 0x20	; 32
    1b00:	08 f0       	brcs	.+2      	; 0x1b04 <MADC_stderrorStartConversionSync+0x34>
    1b02:	77 c0       	rjmp	.+238    	; 0x1bf2 <MADC_stderrorStartConversionSync+0x122>
    1b04:	80 91 74 01 	lds	r24, 0x0174
    1b08:	81 30       	cpi	r24, 0x01	; 1
    1b0a:	29 f0       	breq	.+10     	; 0x1b16 <MADC_stderrorStartConversionSync+0x46>
    1b0c:	80 91 74 01 	lds	r24, 0x0174
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <MADC_stderrorStartConversionSync+0x46>
    1b14:	6e c0       	rjmp	.+220    	; 0x1bf2 <MADC_stderrorStartConversionSync+0x122>
    1b16:	8e 81       	ldd	r24, Y+6	; 0x06
    1b18:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <MADC_stderrorStartConversionSync+0x50>
    1b1e:	69 c0       	rjmp	.+210    	; 0x1bf2 <MADC_stderrorStartConversionSync+0x122>
		{
			u32 L_u8TimeOutCounter =0;
    1b20:	19 82       	std	Y+1, r1	; 0x01
    1b22:	1a 82       	std	Y+2, r1	; 0x02
    1b24:	1b 82       	std	Y+3, r1	; 0x03
    1b26:	1c 82       	std	Y+4, r1	; 0x04
			MADC_ADMUX=(MADC_ADMUX&CHANNEL_MASK)|ARG_u8Channel;
    1b28:	a7 e2       	ldi	r26, 0x27	; 39
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e7 e2       	ldi	r30, 0x27	; 39
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	98 2f       	mov	r25, r24
    1b34:	90 7e       	andi	r25, 0xE0	; 224
    1b36:	88 85       	ldd	r24, Y+8	; 0x08
    1b38:	89 2b       	or	r24, r25
    1b3a:	8c 93       	st	X, r24
			
			SET_BIT(MADC_ADCSRA,ADSC);
    1b3c:	a6 e2       	ldi	r26, 0x26	; 38
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e6 e2       	ldi	r30, 0x26	; 38
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	80 64       	ori	r24, 0x40	; 64
    1b48:	8c 93       	st	X, r24
    1b4a:	0b c0       	rjmp	.+22     	; 0x1b62 <MADC_stderrorStartConversionSync+0x92>
			
			while(((GET_BIT(MADC_ADCSRA,ADIF))==0)&&(L_u8TimeOutCounter!=MADC_TIMEOUT))
			{
				
				L_u8TimeOutCounter++;
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	ab 81       	ldd	r26, Y+3	; 0x03
    1b52:	bc 81       	ldd	r27, Y+4	; 0x04
    1b54:	01 96       	adiw	r24, 0x01	; 1
    1b56:	a1 1d       	adc	r26, r1
    1b58:	b1 1d       	adc	r27, r1
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	9a 83       	std	Y+2, r25	; 0x02
    1b5e:	ab 83       	std	Y+3, r26	; 0x03
    1b60:	bc 83       	std	Y+4, r27	; 0x04
			u32 L_u8TimeOutCounter =0;
			MADC_ADMUX=(MADC_ADMUX&CHANNEL_MASK)|ARG_u8Channel;
			
			SET_BIT(MADC_ADCSRA,ADSC);
			
			while(((GET_BIT(MADC_ADCSRA,ADIF))==0)&&(L_u8TimeOutCounter!=MADC_TIMEOUT))
    1b62:	e6 e2       	ldi	r30, 0x26	; 38
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	82 95       	swap	r24
    1b6a:	8f 70       	andi	r24, 0x0F	; 15
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	81 70       	andi	r24, 0x01	; 1
    1b72:	90 70       	andi	r25, 0x00	; 0
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	61 f4       	brne	.+24     	; 0x1b90 <MADC_stderrorStartConversionSync+0xc0>
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	ab 81       	ldd	r26, Y+3	; 0x03
    1b7e:	bc 81       	ldd	r27, Y+4	; 0x04
    1b80:	88 38       	cpi	r24, 0x88	; 136
    1b82:	23 e1       	ldi	r18, 0x13	; 19
    1b84:	92 07       	cpc	r25, r18
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	a2 07       	cpc	r26, r18
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	b2 07       	cpc	r27, r18
    1b8e:	f1 f6       	brne	.-68     	; 0x1b4c <MADC_stderrorStartConversionSync+0x7c>
			{
				
				L_u8TimeOutCounter++;
			}
			
			if(L_u8TimeOutCounter==MADC_TIMEOUT)
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	ab 81       	ldd	r26, Y+3	; 0x03
    1b96:	bc 81       	ldd	r27, Y+4	; 0x04
    1b98:	88 38       	cpi	r24, 0x88	; 136
    1b9a:	23 e1       	ldi	r18, 0x13	; 19
    1b9c:	92 07       	cpc	r25, r18
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	a2 07       	cpc	r26, r18
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	b2 07       	cpc	r27, r18
    1ba6:	19 f4       	brne	.+6      	; 0x1bae <MADC_stderrorStartConversionSync+0xde>
			{
				
				L_stderrorError=E_TIME_OUT;
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	2d c0       	rjmp	.+90     	; 0x1c08 <MADC_stderrorStartConversionSync+0x138>
			
			}
			else
			{
				
				SET_BIT(MADC_ADCSRA,ADIF);
    1bae:	a6 e2       	ldi	r26, 0x26	; 38
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e6 e2       	ldi	r30, 0x26	; 38
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 61       	ori	r24, 0x10	; 16
    1bba:	8c 93       	st	X, r24
			
				if(1==MADC_u8Resolution)
    1bbc:	80 91 74 01 	lds	r24, 0x0174
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	51 f4       	brne	.+20     	; 0x1bd8 <MADC_stderrorStartConversionSync+0x108>
				{
					
					*ARG_u16pADCReading=ADCH_REG;
    1bc4:	e5 e2       	ldi	r30, 0x25	; 37
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	ee 81       	ldd	r30, Y+6	; 0x06
    1bd0:	ff 81       	ldd	r31, Y+7	; 0x07
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	80 83       	st	Z, r24
    1bd6:	08 c0       	rjmp	.+16     	; 0x1be8 <MADC_stderrorStartConversionSync+0x118>
					
				}
				else
				{
					*ARG_u16pADCReading=ADCLH_REG;	
    1bd8:	e4 e2       	ldi	r30, 0x24	; 36
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	ee 81       	ldd	r30, Y+6	; 0x06
    1be2:	ff 81       	ldd	r31, Y+7	; 0x07
    1be4:	91 83       	std	Z+1, r25	; 0x01
    1be6:	80 83       	st	Z, r24
				}
				
				MADC_u8BusyState=IDEL;
    1be8:	10 92 79 01 	sts	0x0179, r1
				
				L_stderrorError=E_OK;		
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	0b c0       	rjmp	.+22     	; 0x1c08 <MADC_stderrorStartConversionSync+0x138>
			}
		}
		else
		{
			if(ARG_u16pADCReading==NULL_POINTER)
    1bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	19 f4       	brne	.+6      	; 0x1c00 <MADC_stderrorStartConversionSync+0x130>
			{
				
				L_stderrorError=E_NULL_POINTER;
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	04 c0       	rjmp	.+8      	; 0x1c08 <MADC_stderrorStartConversionSync+0x138>
			}
			else
			{
				L_stderrorError=E_NOK;
    1c00:	1d 82       	std	Y+5, r1	; 0x05
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <MADC_stderrorStartConversionSync+0x138>
		}
	}
	else
	{
		
		L_stderrorError =E_BUSY_FUNCTION;
    1c04:	84 e0       	ldi	r24, 0x04	; 4
    1c06:	8d 83       	std	Y+5, r24	; 0x05
		
	}
	
	return L_stderrorError;	
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c0a:	28 96       	adiw	r28, 0x08	; 8
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <MADC_stderrorStartConversionASync>:
(
	u16* ARG_u16pADCReading,
	void (*ARG_pvoidfNotificationFunction)(void),
	u8 ARG_u8Channel
)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <MADC_stderrorStartConversionASync+0x6>
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <MADC_stderrorStartConversionASync+0x8>
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <MADC_stderrorStartConversionASync+0xa>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	9b 83       	std	Y+3, r25	; 0x03
    1c2c:	8a 83       	std	Y+2, r24	; 0x02
    1c2e:	7d 83       	std	Y+5, r23	; 0x05
    1c30:	6c 83       	std	Y+4, r22	; 0x04
    1c32:	4e 83       	std	Y+6, r20	; 0x06
	STD_error_t L_stderrorError=E_NOK;
    1c34:	19 82       	std	Y+1, r1	; 0x01
	
	if(MADC_u8BusyState==IDEL)
    1c36:	80 91 79 01 	lds	r24, 0x0179
    1c3a:	88 23       	and	r24, r24
    1c3c:	d1 f5       	brne	.+116    	; 0x1cb2 <MADC_stderrorStartConversionASync+0x96>
	{
		
		MADC_u8BusyState=BUSY;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	80 93 79 01 	sts	0x0179, r24
		if((ARG_pvoidfNotificationFunction!=NULL_POINTER)&&(ARG_u16pADCReading!=NULL_POINTER))
    1c44:	8c 81       	ldd	r24, Y+4	; 0x04
    1c46:	9d 81       	ldd	r25, Y+5	; 0x05
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	81 f1       	breq	.+96     	; 0x1cac <MADC_stderrorStartConversionASync+0x90>
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	61 f1       	breq	.+88     	; 0x1cac <MADC_stderrorStartConversionASync+0x90>
		{
			
			if((ARG_u8Channel>=0&&ARG_u8Channel<=31))
    1c54:	8e 81       	ldd	r24, Y+6	; 0x06
    1c56:	80 32       	cpi	r24, 0x20	; 32
    1c58:	38 f5       	brcc	.+78     	; 0x1ca8 <MADC_stderrorStartConversionASync+0x8c>
			{
				pvoidfNotificationFunctionADC=ARG_pvoidfNotificationFunction;
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5e:	90 93 76 01 	sts	0x0176, r25
    1c62:	80 93 75 01 	sts	0x0175, r24
				pu16ADCReading=ARG_u16pADCReading;
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6a:	90 93 78 01 	sts	0x0178, r25
    1c6e:	80 93 77 01 	sts	0x0177, r24
				
				MADC_ADMUX=(MADC_ADMUX&CHANNEL_MASK)|ARG_u8Channel;
    1c72:	a7 e2       	ldi	r26, 0x27	; 39
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e7 e2       	ldi	r30, 0x27	; 39
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	98 2f       	mov	r25, r24
    1c7e:	90 7e       	andi	r25, 0xE0	; 224
    1c80:	8e 81       	ldd	r24, Y+6	; 0x06
    1c82:	89 2b       	or	r24, r25
    1c84:	8c 93       	st	X, r24
				SET_BIT(MADC_ADCSRA,ADSC);
    1c86:	a6 e2       	ldi	r26, 0x26	; 38
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e6 e2       	ldi	r30, 0x26	; 38
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 64       	ori	r24, 0x40	; 64
    1c92:	8c 93       	st	X, r24
				SET_BIT(MADC_ADCSRA,ADIE);
    1c94:	a6 e2       	ldi	r26, 0x26	; 38
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e6 e2       	ldi	r30, 0x26	; 38
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	88 60       	ori	r24, 0x08	; 8
    1ca0:	8c 93       	st	X, r24
				L_stderrorError=E_OK;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	07 c0       	rjmp	.+14     	; 0x1cb6 <MADC_stderrorStartConversionASync+0x9a>
			}
			else
			{
				
				L_stderrorError=E_NOK;
    1ca8:	19 82       	std	Y+1, r1	; 0x01
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <MADC_stderrorStartConversionASync+0x9a>
				
			}
		}
		else
		{
			L_stderrorError=E_NULL_POINTER;
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <MADC_stderrorStartConversionASync+0x9a>
		}
	}
	else
	{
		
		L_stderrorError =E_BUSY_FUNCTION;
    1cb2:	84 e0       	ldi	r24, 0x04	; 4
    1cb4:	89 83       	std	Y+1, r24	; 0x01
		
	}
	return L_stderrorError;	
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb8:	26 96       	adiw	r28, 0x06	; 6
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <__vector_16>:



void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    1cca:	1f 92       	push	r1
    1ccc:	0f 92       	push	r0
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	0f 92       	push	r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	2f 93       	push	r18
    1cd6:	3f 93       	push	r19
    1cd8:	4f 93       	push	r20
    1cda:	5f 93       	push	r21
    1cdc:	6f 93       	push	r22
    1cde:	7f 93       	push	r23
    1ce0:	8f 93       	push	r24
    1ce2:	9f 93       	push	r25
    1ce4:	af 93       	push	r26
    1ce6:	bf 93       	push	r27
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
	
	if((pvoidfNotificationFunctionADC!=NULL_POINTER)&&(pu16ADCReading!=NULL_POINTER))
    1cf4:	80 91 75 01 	lds	r24, 0x0175
    1cf8:	90 91 76 01 	lds	r25, 0x0176
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	79 f1       	breq	.+94     	; 0x1d5e <__vector_16+0x94>
    1d00:	80 91 77 01 	lds	r24, 0x0177
    1d04:	90 91 78 01 	lds	r25, 0x0178
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	49 f1       	breq	.+82     	; 0x1d5e <__vector_16+0x94>
	{
		if(1==MADC_u8Resolution)
    1d0c:	80 91 74 01 	lds	r24, 0x0174
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	69 f4       	brne	.+26     	; 0x1d2e <__vector_16+0x64>
		{
			*pu16ADCReading=ADCH_REG;
    1d14:	a0 91 77 01 	lds	r26, 0x0177
    1d18:	b0 91 78 01 	lds	r27, 0x0178
    1d1c:	e5 e2       	ldi	r30, 0x25	; 37
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	11 96       	adiw	r26, 0x01	; 1
    1d28:	9c 93       	st	X, r25
    1d2a:	8e 93       	st	-X, r24
    1d2c:	0a c0       	rjmp	.+20     	; 0x1d42 <__vector_16+0x78>
		}
		else
		{
			*pu16ADCReading=ADCLH_REG;	
    1d2e:	e0 91 77 01 	lds	r30, 0x0177
    1d32:	f0 91 78 01 	lds	r31, 0x0178
    1d36:	a4 e2       	ldi	r26, 0x24	; 36
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	8d 91       	ld	r24, X+
    1d3c:	9c 91       	ld	r25, X
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
		}
		
		MADC_u8BusyState=IDEL;
    1d42:	10 92 79 01 	sts	0x0179, r1
		
		pvoidfNotificationFunctionADC();
    1d46:	e0 91 75 01 	lds	r30, 0x0175
    1d4a:	f0 91 76 01 	lds	r31, 0x0176
    1d4e:	09 95       	icall
		
		/*disable Interrupt*/
		CLEAR_BIT(MADC_ADCSRA,ADIE);
    1d50:	a6 e2       	ldi	r26, 0x26	; 38
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e6 e2       	ldi	r30, 0x26	; 38
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	87 7f       	andi	r24, 0xF7	; 247
    1d5c:	8c 93       	st	X, r24
		
		/*Nothing*/
		
	}
	
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	ff 91       	pop	r31
    1d64:	ef 91       	pop	r30
    1d66:	bf 91       	pop	r27
    1d68:	af 91       	pop	r26
    1d6a:	9f 91       	pop	r25
    1d6c:	8f 91       	pop	r24
    1d6e:	7f 91       	pop	r23
    1d70:	6f 91       	pop	r22
    1d72:	5f 91       	pop	r21
    1d74:	4f 91       	pop	r20
    1d76:	3f 91       	pop	r19
    1d78:	2f 91       	pop	r18
    1d7a:	0f 90       	pop	r0
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	0f 90       	pop	r0
    1d80:	1f 90       	pop	r1
    1d82:	18 95       	reti

00001d84 <MDIO_stderrorSetPortDirection>:
STD_error_t MDIO_stderrorSetPortDirection
(
	u8 ARG_u8Port,
	u8 ARG_u8Direction
)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <MDIO_stderrorSetPortDirection+0x6>
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <MDIO_stderrorSetPortDirection+0x8>
    1d8c:	0f 92       	push	r0
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	8a 83       	std	Y+2, r24	; 0x02
    1d94:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrorError=E_NOK;
    1d96:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3d 83       	std	Y+5, r19	; 0x05
    1da0:	2c 83       	std	Y+4, r18	; 0x04
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	9d 81       	ldd	r25, Y+5	; 0x05
    1da6:	82 30       	cpi	r24, 0x02	; 2
    1da8:	91 05       	cpc	r25, r1
    1daa:	e9 f0       	breq	.+58     	; 0x1de6 <MDIO_stderrorSetPortDirection+0x62>
    1dac:	2c 81       	ldd	r18, Y+4	; 0x04
    1dae:	3d 81       	ldd	r19, Y+5	; 0x05
    1db0:	23 30       	cpi	r18, 0x03	; 3
    1db2:	31 05       	cpc	r19, r1
    1db4:	34 f4       	brge	.+12     	; 0x1dc2 <MDIO_stderrorSetPortDirection+0x3e>
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	61 f0       	breq	.+24     	; 0x1dd8 <MDIO_stderrorSetPortDirection+0x54>
    1dc0:	27 c0       	rjmp	.+78     	; 0x1e10 <MDIO_stderrorSetPortDirection+0x8c>
    1dc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc6:	23 30       	cpi	r18, 0x03	; 3
    1dc8:	31 05       	cpc	r19, r1
    1dca:	a1 f0       	breq	.+40     	; 0x1df4 <MDIO_stderrorSetPortDirection+0x70>
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd0:	84 30       	cpi	r24, 0x04	; 4
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	b1 f0       	breq	.+44     	; 0x1e02 <MDIO_stderrorSetPortDirection+0x7e>
    1dd6:	1c c0       	rjmp	.+56     	; 0x1e10 <MDIO_stderrorSetPortDirection+0x8c>
	{
		case MDIO_PORTA:GPIOA->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1dd8:	e9 e3       	ldi	r30, 0x39	; 57
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	81 83       	std	Z+1, r24	; 0x01
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	16 c0       	rjmp	.+44     	; 0x1e12 <MDIO_stderrorSetPortDirection+0x8e>
		case MDIO_PORTB:GPIOB->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1de6:	e6 e3       	ldi	r30, 0x36	; 54
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	81 83       	std	Z+1, r24	; 0x01
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <MDIO_stderrorSetPortDirection+0x8e>
		case MDIO_PORTC:GPIOC->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1df4:	e3 e3       	ldi	r30, 0x33	; 51
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	81 83       	std	Z+1, r24	; 0x01
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	08 c0       	rjmp	.+16     	; 0x1e12 <MDIO_stderrorSetPortDirection+0x8e>
		case MDIO_PORTD:GPIOD->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1e02:	e0 e3       	ldi	r30, 0x30	; 48
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	81 83       	std	Z+1, r24	; 0x01
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <MDIO_stderrorSetPortDirection+0x8e>
		default:L_stderrorError = E_NOK;break;
    1e10:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <MDIO_stderrorSetPortValue>:
STD_error_t MDIO_stderrorSetPortValue
(
	u8 ARG_u8Port,
	u8 ARG_u8Value
)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <MDIO_stderrorSetPortValue+0x6>
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <MDIO_stderrorSetPortValue+0x8>
    1e2c:	0f 92       	push	r0
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	8a 83       	std	Y+2, r24	; 0x02
    1e34:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrorError=E_NOK;
    1e36:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	3d 83       	std	Y+5, r19	; 0x05
    1e40:	2c 83       	std	Y+4, r18	; 0x04
    1e42:	8c 81       	ldd	r24, Y+4	; 0x04
    1e44:	9d 81       	ldd	r25, Y+5	; 0x05
    1e46:	82 30       	cpi	r24, 0x02	; 2
    1e48:	91 05       	cpc	r25, r1
    1e4a:	e9 f0       	breq	.+58     	; 0x1e86 <MDIO_stderrorSetPortValue+0x62>
    1e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e50:	23 30       	cpi	r18, 0x03	; 3
    1e52:	31 05       	cpc	r19, r1
    1e54:	34 f4       	brge	.+12     	; 0x1e62 <MDIO_stderrorSetPortValue+0x3e>
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	61 f0       	breq	.+24     	; 0x1e78 <MDIO_stderrorSetPortValue+0x54>
    1e60:	27 c0       	rjmp	.+78     	; 0x1eb0 <MDIO_stderrorSetPortValue+0x8c>
    1e62:	2c 81       	ldd	r18, Y+4	; 0x04
    1e64:	3d 81       	ldd	r19, Y+5	; 0x05
    1e66:	23 30       	cpi	r18, 0x03	; 3
    1e68:	31 05       	cpc	r19, r1
    1e6a:	a1 f0       	breq	.+40     	; 0x1e94 <MDIO_stderrorSetPortValue+0x70>
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e70:	84 30       	cpi	r24, 0x04	; 4
    1e72:	91 05       	cpc	r25, r1
    1e74:	b1 f0       	breq	.+44     	; 0x1ea2 <MDIO_stderrorSetPortValue+0x7e>
    1e76:	1c c0       	rjmp	.+56     	; 0x1eb0 <MDIO_stderrorSetPortValue+0x8c>
	{
		case MDIO_PORTA:GPIOA->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    1e78:	e9 e3       	ldi	r30, 0x39	; 57
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	82 83       	std	Z+2, r24	; 0x02
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	16 c0       	rjmp	.+44     	; 0x1eb2 <MDIO_stderrorSetPortValue+0x8e>
		case MDIO_PORTB:GPIOB->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    1e86:	e6 e3       	ldi	r30, 0x36	; 54
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	82 83       	std	Z+2, r24	; 0x02
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <MDIO_stderrorSetPortValue+0x8e>
		case MDIO_PORTC:GPIOC->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    1e94:	e3 e3       	ldi	r30, 0x33	; 51
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	82 83       	std	Z+2, r24	; 0x02
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	08 c0       	rjmp	.+16     	; 0x1eb2 <MDIO_stderrorSetPortValue+0x8e>
		case MDIO_PORTD:GPIOD->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    1ea2:	e0 e3       	ldi	r30, 0x30	; 48
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	82 83       	std	Z+2, r24	; 0x02
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <MDIO_stderrorSetPortValue+0x8e>
		default:L_stderrorError = E_NOK;break;
    1eb0:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <MDIO_stderrorGetPortValue>:
STD_error_t MDIO_stderrorGetPortValue
(
	u8 ARG_u8Port,
	u8* ARG_pu8Value
)
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <MDIO_stderrorGetPortValue+0x6>
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <MDIO_stderrorGetPortValue+0x8>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <MDIO_stderrorGetPortValue+0xa>
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	8a 83       	std	Y+2, r24	; 0x02
    1ed4:	7c 83       	std	Y+4, r23	; 0x04
    1ed6:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrorError=E_NOK;
    1ed8:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	3e 83       	std	Y+6, r19	; 0x06
    1ee2:	2d 83       	std	Y+5, r18	; 0x05
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	82 30       	cpi	r24, 0x02	; 2
    1eea:	91 05       	cpc	r25, r1
    1eec:	f9 f0       	breq	.+62     	; 0x1f2c <MDIO_stderrorGetPortValue+0x68>
    1eee:	2d 81       	ldd	r18, Y+5	; 0x05
    1ef0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ef2:	23 30       	cpi	r18, 0x03	; 3
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	34 f4       	brge	.+12     	; 0x1f04 <MDIO_stderrorGetPortValue+0x40>
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	91 05       	cpc	r25, r1
    1f00:	61 f0       	breq	.+24     	; 0x1f1a <MDIO_stderrorGetPortValue+0x56>
    1f02:	2f c0       	rjmp	.+94     	; 0x1f62 <MDIO_stderrorGetPortValue+0x9e>
    1f04:	2d 81       	ldd	r18, Y+5	; 0x05
    1f06:	3e 81       	ldd	r19, Y+6	; 0x06
    1f08:	23 30       	cpi	r18, 0x03	; 3
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	c1 f0       	breq	.+48     	; 0x1f3e <MDIO_stderrorGetPortValue+0x7a>
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	84 30       	cpi	r24, 0x04	; 4
    1f14:	91 05       	cpc	r25, r1
    1f16:	e1 f0       	breq	.+56     	; 0x1f50 <MDIO_stderrorGetPortValue+0x8c>
    1f18:	24 c0       	rjmp	.+72     	; 0x1f62 <MDIO_stderrorGetPortValue+0x9e>
	{
		case MDIO_PORTA: *ARG_pu8Value= GPIOA->PIN;L_stderrorError = E_OK;break;
    1f1a:	e9 e3       	ldi	r30, 0x39	; 57
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	eb 81       	ldd	r30, Y+3	; 0x03
    1f22:	fc 81       	ldd	r31, Y+4	; 0x04
    1f24:	80 83       	st	Z, r24
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	1c c0       	rjmp	.+56     	; 0x1f64 <MDIO_stderrorGetPortValue+0xa0>
		case MDIO_PORTB: *ARG_pu8Value= GPIOB->PIN;L_stderrorError = E_OK;break;
    1f2c:	e6 e3       	ldi	r30, 0x36	; 54
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	eb 81       	ldd	r30, Y+3	; 0x03
    1f34:	fc 81       	ldd	r31, Y+4	; 0x04
    1f36:	80 83       	st	Z, r24
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	13 c0       	rjmp	.+38     	; 0x1f64 <MDIO_stderrorGetPortValue+0xa0>
		case MDIO_PORTC: *ARG_pu8Value= GPIOC->PIN;L_stderrorError = E_OK;break;
    1f3e:	e3 e3       	ldi	r30, 0x33	; 51
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	eb 81       	ldd	r30, Y+3	; 0x03
    1f46:	fc 81       	ldd	r31, Y+4	; 0x04
    1f48:	80 83       	st	Z, r24
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	0a c0       	rjmp	.+20     	; 0x1f64 <MDIO_stderrorGetPortValue+0xa0>
		case MDIO_PORTD: *ARG_pu8Value= GPIOD->PIN;L_stderrorError = E_OK;break;
    1f50:	e0 e3       	ldi	r30, 0x30	; 48
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	eb 81       	ldd	r30, Y+3	; 0x03
    1f58:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5a:	80 83       	st	Z, r24
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <MDIO_stderrorGetPortValue+0xa0>
		default:L_stderrorError = E_NOK;break;
    1f62:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f66:	26 96       	adiw	r28, 0x06	; 6
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <MDIO_stderrorSetPinDirection>:
(
	u8 ARG_u8Port,
	u8 ARG_u8pin,
	MDIO_mode ARG_u8Mode
)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	2a 97       	sbiw	r28, 0x0a	; 10
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
    1f8e:	6b 83       	std	Y+3, r22	; 0x03
    1f90:	4c 83       	std	Y+4, r20	; 0x04
	
	STD_error_t L_stderrorError=E_NOK;
    1f92:	19 82       	std	Y+1, r1	; 0x01
	if ((ARG_u8pin>=0)&&(ARG_u8pin<=7))
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	88 30       	cpi	r24, 0x08	; 8
    1f98:	08 f0       	brcs	.+2      	; 0x1f9c <MDIO_stderrorSetPinDirection+0x24>
    1f9a:	ed c1       	rjmp	.+986    	; 0x2376 <MDIO_stderrorSetPinDirection+0x3fe>
	{
		if(ARG_u8Mode==MDIO_INPUT_FLOAT)
    1f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9e:	88 23       	and	r24, r24
    1fa0:	09 f0       	breq	.+2      	; 0x1fa4 <MDIO_stderrorSetPinDirection+0x2c>
    1fa2:	87 c0       	rjmp	.+270    	; 0x20b2 <MDIO_stderrorSetPinDirection+0x13a>
		{
			switch(ARG_u8Port)
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	3a 87       	std	Y+10, r19	; 0x0a
    1fac:	29 87       	std	Y+9, r18	; 0x09
    1fae:	89 85       	ldd	r24, Y+9	; 0x09
    1fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	81 f1       	breq	.+96     	; 0x2018 <MDIO_stderrorSetPinDirection+0xa0>
    1fb8:	29 85       	ldd	r18, Y+9	; 0x09
    1fba:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fbc:	23 30       	cpi	r18, 0x03	; 3
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	34 f4       	brge	.+12     	; 0x1fce <MDIO_stderrorSetPinDirection+0x56>
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	81 30       	cpi	r24, 0x01	; 1
    1fc8:	91 05       	cpc	r25, r1
    1fca:	69 f0       	breq	.+26     	; 0x1fe6 <MDIO_stderrorSetPinDirection+0x6e>
    1fcc:	70 c0       	rjmp	.+224    	; 0x20ae <MDIO_stderrorSetPinDirection+0x136>
    1fce:	29 85       	ldd	r18, Y+9	; 0x09
    1fd0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fd2:	23 30       	cpi	r18, 0x03	; 3
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	c9 f1       	breq	.+114    	; 0x204a <MDIO_stderrorSetPinDirection+0xd2>
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	84 30       	cpi	r24, 0x04	; 4
    1fde:	91 05       	cpc	r25, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <MDIO_stderrorSetPinDirection+0x6c>
    1fe2:	4c c0       	rjmp	.+152    	; 0x207c <MDIO_stderrorSetPinDirection+0x104>
    1fe4:	64 c0       	rjmp	.+200    	; 0x20ae <MDIO_stderrorSetPinDirection+0x136>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    1fe6:	a9 e3       	ldi	r26, 0x39	; 57
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e9 e3       	ldi	r30, 0x39	; 57
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	81 81       	ldd	r24, Z+1	; 0x01
    1ff0:	48 2f       	mov	r20, r24
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	02 2e       	mov	r0, r18
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <MDIO_stderrorSetPinDirection+0x8c>
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	0a 94       	dec	r0
    2006:	e2 f7       	brpl	.-8      	; 0x2000 <MDIO_stderrorSetPinDirection+0x88>
    2008:	80 95       	com	r24
    200a:	84 23       	and	r24, r20
    200c:	11 96       	adiw	r26, 0x01	; 1
    200e:	8c 93       	st	X, r24
    2010:	11 97       	sbiw	r26, 0x01	; 1
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	b0 c1       	rjmp	.+864    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTB:CLEAR_BIT(GPIOB->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    2018:	a6 e3       	ldi	r26, 0x36	; 54
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e6 e3       	ldi	r30, 0x36	; 54
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	81 81       	ldd	r24, Z+1	; 0x01
    2022:	48 2f       	mov	r20, r24
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	02 2e       	mov	r0, r18
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <MDIO_stderrorSetPinDirection+0xbe>
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	0a 94       	dec	r0
    2038:	e2 f7       	brpl	.-8      	; 0x2032 <MDIO_stderrorSetPinDirection+0xba>
    203a:	80 95       	com	r24
    203c:	84 23       	and	r24, r20
    203e:	11 96       	adiw	r26, 0x01	; 1
    2040:	8c 93       	st	X, r24
    2042:	11 97       	sbiw	r26, 0x01	; 1
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	97 c1       	rjmp	.+814    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTC:CLEAR_BIT(GPIOC->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    204a:	a3 e3       	ldi	r26, 0x33	; 51
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e3 e3       	ldi	r30, 0x33	; 51
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	81 81       	ldd	r24, Z+1	; 0x01
    2054:	48 2f       	mov	r20, r24
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	02 2e       	mov	r0, r18
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <MDIO_stderrorSetPinDirection+0xf0>
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	0a 94       	dec	r0
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <MDIO_stderrorSetPinDirection+0xec>
    206c:	80 95       	com	r24
    206e:	84 23       	and	r24, r20
    2070:	11 96       	adiw	r26, 0x01	; 1
    2072:	8c 93       	st	X, r24
    2074:	11 97       	sbiw	r26, 0x01	; 1
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	7e c1       	rjmp	.+764    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTD:CLEAR_BIT(GPIOD->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    207c:	a0 e3       	ldi	r26, 0x30	; 48
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e0 e3       	ldi	r30, 0x30	; 48
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	81 81       	ldd	r24, Z+1	; 0x01
    2086:	48 2f       	mov	r20, r24
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	02 2e       	mov	r0, r18
    2094:	02 c0       	rjmp	.+4      	; 0x209a <MDIO_stderrorSetPinDirection+0x122>
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	0a 94       	dec	r0
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <MDIO_stderrorSetPinDirection+0x11e>
    209e:	80 95       	com	r24
    20a0:	84 23       	and	r24, r20
    20a2:	11 96       	adiw	r26, 0x01	; 1
    20a4:	8c 93       	st	X, r24
    20a6:	11 97       	sbiw	r26, 0x01	; 1
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	65 c1       	rjmp	.+714    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				default:L_stderrorError = E_NOK;break;
    20ae:	19 82       	std	Y+1, r1	; 0x01
    20b0:	63 c1       	rjmp	.+710    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
			}
		}
		else if(ARG_u8Mode==MDIO_OUTPUT)
    20b2:	8c 81       	ldd	r24, Y+4	; 0x04
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	09 f0       	breq	.+2      	; 0x20ba <MDIO_stderrorSetPinDirection+0x142>
    20b8:	83 c0       	rjmp	.+262    	; 0x21c0 <MDIO_stderrorSetPinDirection+0x248>
		{
			switch(ARG_u8Port)
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	38 87       	std	Y+8, r19	; 0x08
    20c2:	2f 83       	std	Y+7, r18	; 0x07
    20c4:	8f 81       	ldd	r24, Y+7	; 0x07
    20c6:	98 85       	ldd	r25, Y+8	; 0x08
    20c8:	82 30       	cpi	r24, 0x02	; 2
    20ca:	91 05       	cpc	r25, r1
    20cc:	79 f1       	breq	.+94     	; 0x212c <MDIO_stderrorSetPinDirection+0x1b4>
    20ce:	2f 81       	ldd	r18, Y+7	; 0x07
    20d0:	38 85       	ldd	r19, Y+8	; 0x08
    20d2:	23 30       	cpi	r18, 0x03	; 3
    20d4:	31 05       	cpc	r19, r1
    20d6:	34 f4       	brge	.+12     	; 0x20e4 <MDIO_stderrorSetPinDirection+0x16c>
    20d8:	8f 81       	ldd	r24, Y+7	; 0x07
    20da:	98 85       	ldd	r25, Y+8	; 0x08
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	91 05       	cpc	r25, r1
    20e0:	69 f0       	breq	.+26     	; 0x20fc <MDIO_stderrorSetPinDirection+0x184>
    20e2:	6c c0       	rjmp	.+216    	; 0x21bc <MDIO_stderrorSetPinDirection+0x244>
    20e4:	2f 81       	ldd	r18, Y+7	; 0x07
    20e6:	38 85       	ldd	r19, Y+8	; 0x08
    20e8:	23 30       	cpi	r18, 0x03	; 3
    20ea:	31 05       	cpc	r19, r1
    20ec:	b9 f1       	breq	.+110    	; 0x215c <MDIO_stderrorSetPinDirection+0x1e4>
    20ee:	8f 81       	ldd	r24, Y+7	; 0x07
    20f0:	98 85       	ldd	r25, Y+8	; 0x08
    20f2:	84 30       	cpi	r24, 0x04	; 4
    20f4:	91 05       	cpc	r25, r1
    20f6:	09 f4       	brne	.+2      	; 0x20fa <MDIO_stderrorSetPinDirection+0x182>
    20f8:	49 c0       	rjmp	.+146    	; 0x218c <MDIO_stderrorSetPinDirection+0x214>
    20fa:	60 c0       	rjmp	.+192    	; 0x21bc <MDIO_stderrorSetPinDirection+0x244>
			{
				case MDIO_PORTA:SET_BIT(GPIOA->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    20fc:	a9 e3       	ldi	r26, 0x39	; 57
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e9 e3       	ldi	r30, 0x39	; 57
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	81 81       	ldd	r24, Z+1	; 0x01
    2106:	48 2f       	mov	r20, r24
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	02 2e       	mov	r0, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <MDIO_stderrorSetPinDirection+0x1a2>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	0a 94       	dec	r0
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <MDIO_stderrorSetPinDirection+0x19e>
    211e:	84 2b       	or	r24, r20
    2120:	11 96       	adiw	r26, 0x01	; 1
    2122:	8c 93       	st	X, r24
    2124:	11 97       	sbiw	r26, 0x01	; 1
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	26 c1       	rjmp	.+588    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTB:SET_BIT(GPIOB->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    212c:	a6 e3       	ldi	r26, 0x36	; 54
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e6 e3       	ldi	r30, 0x36	; 54
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	81 81       	ldd	r24, Z+1	; 0x01
    2136:	48 2f       	mov	r20, r24
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 2e       	mov	r0, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <MDIO_stderrorSetPinDirection+0x1d2>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	0a 94       	dec	r0
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <MDIO_stderrorSetPinDirection+0x1ce>
    214e:	84 2b       	or	r24, r20
    2150:	11 96       	adiw	r26, 0x01	; 1
    2152:	8c 93       	st	X, r24
    2154:	11 97       	sbiw	r26, 0x01	; 1
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	0e c1       	rjmp	.+540    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTC:SET_BIT(GPIOC->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    215c:	a3 e3       	ldi	r26, 0x33	; 51
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e3 e3       	ldi	r30, 0x33	; 51
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	81 81       	ldd	r24, Z+1	; 0x01
    2166:	48 2f       	mov	r20, r24
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	02 2e       	mov	r0, r18
    2174:	02 c0       	rjmp	.+4      	; 0x217a <MDIO_stderrorSetPinDirection+0x202>
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	0a 94       	dec	r0
    217c:	e2 f7       	brpl	.-8      	; 0x2176 <MDIO_stderrorSetPinDirection+0x1fe>
    217e:	84 2b       	or	r24, r20
    2180:	11 96       	adiw	r26, 0x01	; 1
    2182:	8c 93       	st	X, r24
    2184:	11 97       	sbiw	r26, 0x01	; 1
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	f6 c0       	rjmp	.+492    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTD:SET_BIT(GPIOD->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    218c:	a0 e3       	ldi	r26, 0x30	; 48
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e0 e3       	ldi	r30, 0x30	; 48
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	81 81       	ldd	r24, Z+1	; 0x01
    2196:	48 2f       	mov	r20, r24
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	02 2e       	mov	r0, r18
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <MDIO_stderrorSetPinDirection+0x232>
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	0a 94       	dec	r0
    21ac:	e2 f7       	brpl	.-8      	; 0x21a6 <MDIO_stderrorSetPinDirection+0x22e>
    21ae:	84 2b       	or	r24, r20
    21b0:	11 96       	adiw	r26, 0x01	; 1
    21b2:	8c 93       	st	X, r24
    21b4:	11 97       	sbiw	r26, 0x01	; 1
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	de c0       	rjmp	.+444    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				default:L_stderrorError = E_NOK;break;
    21bc:	19 82       	std	Y+1, r1	; 0x01
    21be:	dc c0       	rjmp	.+440    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
			}
		}
		else if(ARG_u8Mode==MDIO_INPUT_PULLUP)
    21c0:	8c 81       	ldd	r24, Y+4	; 0x04
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <MDIO_stderrorSetPinDirection+0x250>
    21c6:	d5 c0       	rjmp	.+426    	; 0x2372 <MDIO_stderrorSetPinDirection+0x3fa>
		{
			switch(ARG_u8Port)
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	3e 83       	std	Y+6, r19	; 0x06
    21d0:	2d 83       	std	Y+5, r18	; 0x05
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	82 30       	cpi	r24, 0x02	; 2
    21d8:	91 05       	cpc	r25, r1
    21da:	09 f4       	brne	.+2      	; 0x21de <MDIO_stderrorSetPinDirection+0x266>
    21dc:	44 c0       	rjmp	.+136    	; 0x2266 <MDIO_stderrorSetPinDirection+0x2ee>
    21de:	2d 81       	ldd	r18, Y+5	; 0x05
    21e0:	3e 81       	ldd	r19, Y+6	; 0x06
    21e2:	23 30       	cpi	r18, 0x03	; 3
    21e4:	31 05       	cpc	r19, r1
    21e6:	34 f4       	brge	.+12     	; 0x21f4 <MDIO_stderrorSetPinDirection+0x27c>
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	91 05       	cpc	r25, r1
    21f0:	71 f0       	breq	.+28     	; 0x220e <MDIO_stderrorSetPinDirection+0x296>
    21f2:	bd c0       	rjmp	.+378    	; 0x236e <MDIO_stderrorSetPinDirection+0x3f6>
    21f4:	2d 81       	ldd	r18, Y+5	; 0x05
    21f6:	3e 81       	ldd	r19, Y+6	; 0x06
    21f8:	23 30       	cpi	r18, 0x03	; 3
    21fa:	31 05       	cpc	r19, r1
    21fc:	09 f4       	brne	.+2      	; 0x2200 <MDIO_stderrorSetPinDirection+0x288>
    21fe:	5f c0       	rjmp	.+190    	; 0x22be <MDIO_stderrorSetPinDirection+0x346>
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	84 30       	cpi	r24, 0x04	; 4
    2206:	91 05       	cpc	r25, r1
    2208:	09 f4       	brne	.+2      	; 0x220c <MDIO_stderrorSetPinDirection+0x294>
    220a:	85 c0       	rjmp	.+266    	; 0x2316 <MDIO_stderrorSetPinDirection+0x39e>
    220c:	b0 c0       	rjmp	.+352    	; 0x236e <MDIO_stderrorSetPinDirection+0x3f6>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA->DDR, ARG_u8pin);SET_BIT(GPIOA->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    220e:	a9 e3       	ldi	r26, 0x39	; 57
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e9 e3       	ldi	r30, 0x39	; 57
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	81 81       	ldd	r24, Z+1	; 0x01
    2218:	48 2f       	mov	r20, r24
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	02 c0       	rjmp	.+4      	; 0x222a <MDIO_stderrorSetPinDirection+0x2b2>
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	2a 95       	dec	r18
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <MDIO_stderrorSetPinDirection+0x2ae>
    222e:	80 95       	com	r24
    2230:	84 23       	and	r24, r20
    2232:	11 96       	adiw	r26, 0x01	; 1
    2234:	8c 93       	st	X, r24
    2236:	a9 e3       	ldi	r26, 0x39	; 57
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e9 e3       	ldi	r30, 0x39	; 57
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	48 2f       	mov	r20, r24
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	02 2e       	mov	r0, r18
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <MDIO_stderrorSetPinDirection+0x2dc>
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	0a 94       	dec	r0
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <MDIO_stderrorSetPinDirection+0x2d8>
    2258:	84 2b       	or	r24, r20
    225a:	12 96       	adiw	r26, 0x02	; 2
    225c:	8c 93       	st	X, r24
    225e:	12 97       	sbiw	r26, 0x02	; 2
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	89 c0       	rjmp	.+274    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTB:CLEAR_BIT(GPIOB->DDR, ARG_u8pin);SET_BIT(GPIOB->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    2266:	a6 e3       	ldi	r26, 0x36	; 54
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e6 e3       	ldi	r30, 0x36	; 54
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	81 81       	ldd	r24, Z+1	; 0x01
    2270:	48 2f       	mov	r20, r24
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <MDIO_stderrorSetPinDirection+0x30a>
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	2a 95       	dec	r18
    2284:	e2 f7       	brpl	.-8      	; 0x227e <MDIO_stderrorSetPinDirection+0x306>
    2286:	80 95       	com	r24
    2288:	84 23       	and	r24, r20
    228a:	11 96       	adiw	r26, 0x01	; 1
    228c:	8c 93       	st	X, r24
    228e:	a6 e3       	ldi	r26, 0x36	; 54
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e6 e3       	ldi	r30, 0x36	; 54
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	48 2f       	mov	r20, r24
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	02 2e       	mov	r0, r18
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <MDIO_stderrorSetPinDirection+0x334>
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	0a 94       	dec	r0
    22ae:	e2 f7       	brpl	.-8      	; 0x22a8 <MDIO_stderrorSetPinDirection+0x330>
    22b0:	84 2b       	or	r24, r20
    22b2:	12 96       	adiw	r26, 0x02	; 2
    22b4:	8c 93       	st	X, r24
    22b6:	12 97       	sbiw	r26, 0x02	; 2
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	5d c0       	rjmp	.+186    	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTC:CLEAR_BIT(GPIOC->DDR, ARG_u8pin);SET_BIT(GPIOC->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    22be:	a3 e3       	ldi	r26, 0x33	; 51
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e3 e3       	ldi	r30, 0x33	; 51
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	81 81       	ldd	r24, Z+1	; 0x01
    22c8:	48 2f       	mov	r20, r24
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <MDIO_stderrorSetPinDirection+0x362>
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	2a 95       	dec	r18
    22dc:	e2 f7       	brpl	.-8      	; 0x22d6 <MDIO_stderrorSetPinDirection+0x35e>
    22de:	80 95       	com	r24
    22e0:	84 23       	and	r24, r20
    22e2:	11 96       	adiw	r26, 0x01	; 1
    22e4:	8c 93       	st	X, r24
    22e6:	a3 e3       	ldi	r26, 0x33	; 51
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e3 e3       	ldi	r30, 0x33	; 51
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	48 2f       	mov	r20, r24
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	02 2e       	mov	r0, r18
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <MDIO_stderrorSetPinDirection+0x38c>
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	0a 94       	dec	r0
    2306:	e2 f7       	brpl	.-8      	; 0x2300 <MDIO_stderrorSetPinDirection+0x388>
    2308:	84 2b       	or	r24, r20
    230a:	12 96       	adiw	r26, 0x02	; 2
    230c:	8c 93       	st	X, r24
    230e:	12 97       	sbiw	r26, 0x02	; 2
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	31 c0       	rjmp	.+98     	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTD:CLEAR_BIT(GPIOD->DDR, ARG_u8pin);SET_BIT(GPIOD->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    2316:	a0 e3       	ldi	r26, 0x30	; 48
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e0 e3       	ldi	r30, 0x30	; 48
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	81 81       	ldd	r24, Z+1	; 0x01
    2320:	48 2f       	mov	r20, r24
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <MDIO_stderrorSetPinDirection+0x3ba>
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	2a 95       	dec	r18
    2334:	e2 f7       	brpl	.-8      	; 0x232e <MDIO_stderrorSetPinDirection+0x3b6>
    2336:	80 95       	com	r24
    2338:	84 23       	and	r24, r20
    233a:	11 96       	adiw	r26, 0x01	; 1
    233c:	8c 93       	st	X, r24
    233e:	a0 e3       	ldi	r26, 0x30	; 48
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e0 e3       	ldi	r30, 0x30	; 48
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	48 2f       	mov	r20, r24
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	02 2e       	mov	r0, r18
    2356:	02 c0       	rjmp	.+4      	; 0x235c <MDIO_stderrorSetPinDirection+0x3e4>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	0a 94       	dec	r0
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <MDIO_stderrorSetPinDirection+0x3e0>
    2360:	84 2b       	or	r24, r20
    2362:	12 96       	adiw	r26, 0x02	; 2
    2364:	8c 93       	st	X, r24
    2366:	12 97       	sbiw	r26, 0x02	; 2
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	05 c0       	rjmp	.+10     	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
				default:L_stderrorError = E_NOK;break;
    236e:	19 82       	std	Y+1, r1	; 0x01
    2370:	03 c0       	rjmp	.+6      	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>
			}
		}
		else
		{
			L_stderrorError=E_NOK;
    2372:	19 82       	std	Y+1, r1	; 0x01
    2374:	01 c0       	rjmp	.+2      	; 0x2378 <MDIO_stderrorSetPinDirection+0x400>

		
	}
	else
	{
		L_stderrorError=E_NOK;
    2376:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return L_stderrorError;
    2378:	89 81       	ldd	r24, Y+1	; 0x01
}
    237a:	2a 96       	adiw	r28, 0x0a	; 10
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <MDIO_stderrorSetPinValue>:
(
	u8 ARG_u8Port,
	u8 ARG_u8pin,
	u8 ARG_u8Value
)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	28 97       	sbiw	r28, 0x08	; 8
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	8a 83       	std	Y+2, r24	; 0x02
    23a2:	6b 83       	std	Y+3, r22	; 0x03
    23a4:	4c 83       	std	Y+4, r20	; 0x04
	
	STD_error_t L_stderrorError=E_NOK;
    23a6:	19 82       	std	Y+1, r1	; 0x01
	if ((ARG_u8pin>=0)&&(ARG_u8pin<=7))
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	88 30       	cpi	r24, 0x08	; 8
    23ac:	08 f0       	brcs	.+2      	; 0x23b0 <MDIO_stderrorSetPinValue+0x24>
    23ae:	12 c1       	rjmp	.+548    	; 0x25d4 <MDIO_stderrorSetPinValue+0x248>
	{
		if(ARG_u8Value==MDIO_HIGH)
    23b0:	8c 81       	ldd	r24, Y+4	; 0x04
    23b2:	82 30       	cpi	r24, 0x02	; 2
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <MDIO_stderrorSetPinValue+0x2c>
    23b6:	83 c0       	rjmp	.+262    	; 0x24be <MDIO_stderrorSetPinValue+0x132>
		{
			switch(ARG_u8Port)
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	38 87       	std	Y+8, r19	; 0x08
    23c0:	2f 83       	std	Y+7, r18	; 0x07
    23c2:	8f 81       	ldd	r24, Y+7	; 0x07
    23c4:	98 85       	ldd	r25, Y+8	; 0x08
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	91 05       	cpc	r25, r1
    23ca:	79 f1       	breq	.+94     	; 0x242a <MDIO_stderrorSetPinValue+0x9e>
    23cc:	2f 81       	ldd	r18, Y+7	; 0x07
    23ce:	38 85       	ldd	r19, Y+8	; 0x08
    23d0:	23 30       	cpi	r18, 0x03	; 3
    23d2:	31 05       	cpc	r19, r1
    23d4:	34 f4       	brge	.+12     	; 0x23e2 <MDIO_stderrorSetPinValue+0x56>
    23d6:	8f 81       	ldd	r24, Y+7	; 0x07
    23d8:	98 85       	ldd	r25, Y+8	; 0x08
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	91 05       	cpc	r25, r1
    23de:	69 f0       	breq	.+26     	; 0x23fa <MDIO_stderrorSetPinValue+0x6e>
    23e0:	6c c0       	rjmp	.+216    	; 0x24ba <MDIO_stderrorSetPinValue+0x12e>
    23e2:	2f 81       	ldd	r18, Y+7	; 0x07
    23e4:	38 85       	ldd	r19, Y+8	; 0x08
    23e6:	23 30       	cpi	r18, 0x03	; 3
    23e8:	31 05       	cpc	r19, r1
    23ea:	b9 f1       	breq	.+110    	; 0x245a <MDIO_stderrorSetPinValue+0xce>
    23ec:	8f 81       	ldd	r24, Y+7	; 0x07
    23ee:	98 85       	ldd	r25, Y+8	; 0x08
    23f0:	84 30       	cpi	r24, 0x04	; 4
    23f2:	91 05       	cpc	r25, r1
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <MDIO_stderrorSetPinValue+0x6c>
    23f6:	49 c0       	rjmp	.+146    	; 0x248a <MDIO_stderrorSetPinValue+0xfe>
    23f8:	60 c0       	rjmp	.+192    	; 0x24ba <MDIO_stderrorSetPinValue+0x12e>
			{
				case MDIO_PORTA:SET_BIT(GPIOA->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    23fa:	a9 e3       	ldi	r26, 0x39	; 57
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e9 e3       	ldi	r30, 0x39	; 57
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	48 2f       	mov	r20, r24
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	02 2e       	mov	r0, r18
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <MDIO_stderrorSetPinValue+0x8c>
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	0a 94       	dec	r0
    241a:	e2 f7       	brpl	.-8      	; 0x2414 <MDIO_stderrorSetPinValue+0x88>
    241c:	84 2b       	or	r24, r20
    241e:	12 96       	adiw	r26, 0x02	; 2
    2420:	8c 93       	st	X, r24
    2422:	12 97       	sbiw	r26, 0x02	; 2
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	d6 c0       	rjmp	.+428    	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTB:SET_BIT(GPIOB->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    242a:	a6 e3       	ldi	r26, 0x36	; 54
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e6 e3       	ldi	r30, 0x36	; 54
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	48 2f       	mov	r20, r24
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	02 2e       	mov	r0, r18
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <MDIO_stderrorSetPinValue+0xbc>
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	0a 94       	dec	r0
    244a:	e2 f7       	brpl	.-8      	; 0x2444 <MDIO_stderrorSetPinValue+0xb8>
    244c:	84 2b       	or	r24, r20
    244e:	12 96       	adiw	r26, 0x02	; 2
    2450:	8c 93       	st	X, r24
    2452:	12 97       	sbiw	r26, 0x02	; 2
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	be c0       	rjmp	.+380    	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTC:SET_BIT(GPIOC->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    245a:	a3 e3       	ldi	r26, 0x33	; 51
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e3 e3       	ldi	r30, 0x33	; 51
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	48 2f       	mov	r20, r24
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	02 2e       	mov	r0, r18
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <MDIO_stderrorSetPinValue+0xec>
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	0a 94       	dec	r0
    247a:	e2 f7       	brpl	.-8      	; 0x2474 <MDIO_stderrorSetPinValue+0xe8>
    247c:	84 2b       	or	r24, r20
    247e:	12 96       	adiw	r26, 0x02	; 2
    2480:	8c 93       	st	X, r24
    2482:	12 97       	sbiw	r26, 0x02	; 2
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	a6 c0       	rjmp	.+332    	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTD:SET_BIT(GPIOD->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    248a:	a0 e3       	ldi	r26, 0x30	; 48
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e0 e3       	ldi	r30, 0x30	; 48
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	48 2f       	mov	r20, r24
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 2e       	mov	r0, r18
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <MDIO_stderrorSetPinValue+0x11c>
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	0a 94       	dec	r0
    24aa:	e2 f7       	brpl	.-8      	; 0x24a4 <MDIO_stderrorSetPinValue+0x118>
    24ac:	84 2b       	or	r24, r20
    24ae:	12 96       	adiw	r26, 0x02	; 2
    24b0:	8c 93       	st	X, r24
    24b2:	12 97       	sbiw	r26, 0x02	; 2
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	89 83       	std	Y+1, r24	; 0x01
    24b8:	8e c0       	rjmp	.+284    	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
				default:L_stderrorError = E_NOK;break;
    24ba:	19 82       	std	Y+1, r1	; 0x01
    24bc:	8c c0       	rjmp	.+280    	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
			}
		}
		else if(ARG_u8Value==MDIO_LOW)
    24be:	8c 81       	ldd	r24, Y+4	; 0x04
    24c0:	81 30       	cpi	r24, 0x01	; 1
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <MDIO_stderrorSetPinValue+0x13a>
    24c4:	88 c0       	rjmp	.+272    	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
		{
			switch(ARG_u8Port)
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	3e 83       	std	Y+6, r19	; 0x06
    24ce:	2d 83       	std	Y+5, r18	; 0x05
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	82 30       	cpi	r24, 0x02	; 2
    24d6:	91 05       	cpc	r25, r1
    24d8:	81 f1       	breq	.+96     	; 0x253a <MDIO_stderrorSetPinValue+0x1ae>
    24da:	2d 81       	ldd	r18, Y+5	; 0x05
    24dc:	3e 81       	ldd	r19, Y+6	; 0x06
    24de:	23 30       	cpi	r18, 0x03	; 3
    24e0:	31 05       	cpc	r19, r1
    24e2:	34 f4       	brge	.+12     	; 0x24f0 <MDIO_stderrorSetPinValue+0x164>
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	91 05       	cpc	r25, r1
    24ec:	69 f0       	breq	.+26     	; 0x2508 <MDIO_stderrorSetPinValue+0x17c>
    24ee:	70 c0       	rjmp	.+224    	; 0x25d0 <MDIO_stderrorSetPinValue+0x244>
    24f0:	2d 81       	ldd	r18, Y+5	; 0x05
    24f2:	3e 81       	ldd	r19, Y+6	; 0x06
    24f4:	23 30       	cpi	r18, 0x03	; 3
    24f6:	31 05       	cpc	r19, r1
    24f8:	c9 f1       	breq	.+114    	; 0x256c <MDIO_stderrorSetPinValue+0x1e0>
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	84 30       	cpi	r24, 0x04	; 4
    2500:	91 05       	cpc	r25, r1
    2502:	09 f4       	brne	.+2      	; 0x2506 <MDIO_stderrorSetPinValue+0x17a>
    2504:	4c c0       	rjmp	.+152    	; 0x259e <MDIO_stderrorSetPinValue+0x212>
    2506:	64 c0       	rjmp	.+200    	; 0x25d0 <MDIO_stderrorSetPinValue+0x244>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    2508:	a9 e3       	ldi	r26, 0x39	; 57
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e9 e3       	ldi	r30, 0x39	; 57
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	48 2f       	mov	r20, r24
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	02 2e       	mov	r0, r18
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <MDIO_stderrorSetPinValue+0x19a>
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	0a 94       	dec	r0
    2528:	e2 f7       	brpl	.-8      	; 0x2522 <MDIO_stderrorSetPinValue+0x196>
    252a:	80 95       	com	r24
    252c:	84 23       	and	r24, r20
    252e:	12 96       	adiw	r26, 0x02	; 2
    2530:	8c 93       	st	X, r24
    2532:	12 97       	sbiw	r26, 0x02	; 2
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	4e c0       	rjmp	.+156    	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTB:CLEAR_BIT(GPIOB->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    253a:	a6 e3       	ldi	r26, 0x36	; 54
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e6 e3       	ldi	r30, 0x36	; 54
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	82 81       	ldd	r24, Z+2	; 0x02
    2544:	48 2f       	mov	r20, r24
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	02 2e       	mov	r0, r18
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <MDIO_stderrorSetPinValue+0x1cc>
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	0a 94       	dec	r0
    255a:	e2 f7       	brpl	.-8      	; 0x2554 <MDIO_stderrorSetPinValue+0x1c8>
    255c:	80 95       	com	r24
    255e:	84 23       	and	r24, r20
    2560:	12 96       	adiw	r26, 0x02	; 2
    2562:	8c 93       	st	X, r24
    2564:	12 97       	sbiw	r26, 0x02	; 2
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	35 c0       	rjmp	.+106    	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTC:CLEAR_BIT(GPIOC->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    256c:	a3 e3       	ldi	r26, 0x33	; 51
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e3 e3       	ldi	r30, 0x33	; 51
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	82 81       	ldd	r24, Z+2	; 0x02
    2576:	48 2f       	mov	r20, r24
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	28 2f       	mov	r18, r24
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	02 2e       	mov	r0, r18
    2584:	02 c0       	rjmp	.+4      	; 0x258a <MDIO_stderrorSetPinValue+0x1fe>
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	0a 94       	dec	r0
    258c:	e2 f7       	brpl	.-8      	; 0x2586 <MDIO_stderrorSetPinValue+0x1fa>
    258e:	80 95       	com	r24
    2590:	84 23       	and	r24, r20
    2592:	12 96       	adiw	r26, 0x02	; 2
    2594:	8c 93       	st	X, r24
    2596:	12 97       	sbiw	r26, 0x02	; 2
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	1c c0       	rjmp	.+56     	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTD:CLEAR_BIT(GPIOD->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    259e:	a0 e3       	ldi	r26, 0x30	; 48
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e0 e3       	ldi	r30, 0x30	; 48
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	48 2f       	mov	r20, r24
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	02 2e       	mov	r0, r18
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <MDIO_stderrorSetPinValue+0x230>
    25b8:	88 0f       	add	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	0a 94       	dec	r0
    25be:	e2 f7       	brpl	.-8      	; 0x25b8 <MDIO_stderrorSetPinValue+0x22c>
    25c0:	80 95       	com	r24
    25c2:	84 23       	and	r24, r20
    25c4:	12 96       	adiw	r26, 0x02	; 2
    25c6:	8c 93       	st	X, r24
    25c8:	12 97       	sbiw	r26, 0x02	; 2
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	03 c0       	rjmp	.+6      	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
				default:L_stderrorError = E_NOK;break;
    25d0:	19 82       	std	Y+1, r1	; 0x01
    25d2:	01 c0       	rjmp	.+2      	; 0x25d6 <MDIO_stderrorSetPinValue+0x24a>
		}
			
	}
	else
	{
		L_stderrorError=E_NOK;
    25d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d8:	28 96       	adiw	r28, 0x08	; 8
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <MDIO_stderrorGetPinValue>:
(
	u8 ARG_u8Port,
	u8 ARG_u8pin,
	u8* ARG_pu8Value
)
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	27 97       	sbiw	r28, 0x07	; 7
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	8a 83       	std	Y+2, r24	; 0x02
    2600:	6b 83       	std	Y+3, r22	; 0x03
    2602:	5d 83       	std	Y+5, r21	; 0x05
    2604:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrorError=E_NOK;
    2606:	19 82       	std	Y+1, r1	; 0x01
	
	if(ARG_pu8Value==NULL_POINTER)
    2608:	8c 81       	ldd	r24, Y+4	; 0x04
    260a:	9d 81       	ldd	r25, Y+5	; 0x05
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	19 f4       	brne	.+6      	; 0x2616 <MDIO_stderrorGetPinValue+0x2c>
	{
		L_stderrorError=E_NULL_POINTER;
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	80 c0       	rjmp	.+256    	; 0x2716 <MDIO_stderrorGetPinValue+0x12c>
	}
	else if ((ARG_u8pin>=0)&&(ARG_u8pin<=7))
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	88 30       	cpi	r24, 0x08	; 8
    261a:	08 f0       	brcs	.+2      	; 0x261e <MDIO_stderrorGetPinValue+0x34>
    261c:	7b c0       	rjmp	.+246    	; 0x2714 <MDIO_stderrorGetPinValue+0x12a>
	{
		switch(ARG_u8Port)
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	3f 83       	std	Y+7, r19	; 0x07
    2626:	2e 83       	std	Y+6, r18	; 0x06
    2628:	4e 81       	ldd	r20, Y+6	; 0x06
    262a:	5f 81       	ldd	r21, Y+7	; 0x07
    262c:	42 30       	cpi	r20, 0x02	; 2
    262e:	51 05       	cpc	r21, r1
    2630:	69 f1       	breq	.+90     	; 0x268c <MDIO_stderrorGetPinValue+0xa2>
    2632:	8e 81       	ldd	r24, Y+6	; 0x06
    2634:	9f 81       	ldd	r25, Y+7	; 0x07
    2636:	83 30       	cpi	r24, 0x03	; 3
    2638:	91 05       	cpc	r25, r1
    263a:	34 f4       	brge	.+12     	; 0x2648 <MDIO_stderrorGetPinValue+0x5e>
    263c:	2e 81       	ldd	r18, Y+6	; 0x06
    263e:	3f 81       	ldd	r19, Y+7	; 0x07
    2640:	21 30       	cpi	r18, 0x01	; 1
    2642:	31 05       	cpc	r19, r1
    2644:	69 f0       	breq	.+26     	; 0x2660 <MDIO_stderrorGetPinValue+0x76>
    2646:	64 c0       	rjmp	.+200    	; 0x2710 <MDIO_stderrorGetPinValue+0x126>
    2648:	4e 81       	ldd	r20, Y+6	; 0x06
    264a:	5f 81       	ldd	r21, Y+7	; 0x07
    264c:	43 30       	cpi	r20, 0x03	; 3
    264e:	51 05       	cpc	r21, r1
    2650:	99 f1       	breq	.+102    	; 0x26b8 <MDIO_stderrorGetPinValue+0xce>
    2652:	8e 81       	ldd	r24, Y+6	; 0x06
    2654:	9f 81       	ldd	r25, Y+7	; 0x07
    2656:	84 30       	cpi	r24, 0x04	; 4
    2658:	91 05       	cpc	r25, r1
    265a:	09 f4       	brne	.+2      	; 0x265e <MDIO_stderrorGetPinValue+0x74>
    265c:	43 c0       	rjmp	.+134    	; 0x26e4 <MDIO_stderrorGetPinValue+0xfa>
    265e:	58 c0       	rjmp	.+176    	; 0x2710 <MDIO_stderrorGetPinValue+0x126>
		{
			case MDIO_PORTA: *ARG_pu8Value= GET_BIT(GPIOA->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    2660:	e9 e3       	ldi	r30, 0x39	; 57
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	88 2f       	mov	r24, r24
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a9 01       	movw	r20, r18
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <MDIO_stderrorGetPinValue+0x8e>
    2674:	55 95       	asr	r21
    2676:	47 95       	ror	r20
    2678:	8a 95       	dec	r24
    267a:	e2 f7       	brpl	.-8      	; 0x2674 <MDIO_stderrorGetPinValue+0x8a>
    267c:	ca 01       	movw	r24, r20
    267e:	81 70       	andi	r24, 0x01	; 1
    2680:	ec 81       	ldd	r30, Y+4	; 0x04
    2682:	fd 81       	ldd	r31, Y+5	; 0x05
    2684:	80 83       	st	Z, r24
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	45 c0       	rjmp	.+138    	; 0x2716 <MDIO_stderrorGetPinValue+0x12c>
			case MDIO_PORTB: *ARG_pu8Value= GET_BIT(GPIOB->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    268c:	e6 e3       	ldi	r30, 0x36	; 54
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	a9 01       	movw	r20, r18
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <MDIO_stderrorGetPinValue+0xba>
    26a0:	55 95       	asr	r21
    26a2:	47 95       	ror	r20
    26a4:	8a 95       	dec	r24
    26a6:	e2 f7       	brpl	.-8      	; 0x26a0 <MDIO_stderrorGetPinValue+0xb6>
    26a8:	ca 01       	movw	r24, r20
    26aa:	81 70       	andi	r24, 0x01	; 1
    26ac:	ec 81       	ldd	r30, Y+4	; 0x04
    26ae:	fd 81       	ldd	r31, Y+5	; 0x05
    26b0:	80 83       	st	Z, r24
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	89 83       	std	Y+1, r24	; 0x01
    26b6:	2f c0       	rjmp	.+94     	; 0x2716 <MDIO_stderrorGetPinValue+0x12c>
			case MDIO_PORTC: *ARG_pu8Value= GET_BIT(GPIOC->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    26b8:	e3 e3       	ldi	r30, 0x33	; 51
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a9 01       	movw	r20, r18
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <MDIO_stderrorGetPinValue+0xe6>
    26cc:	55 95       	asr	r21
    26ce:	47 95       	ror	r20
    26d0:	8a 95       	dec	r24
    26d2:	e2 f7       	brpl	.-8      	; 0x26cc <MDIO_stderrorGetPinValue+0xe2>
    26d4:	ca 01       	movw	r24, r20
    26d6:	81 70       	andi	r24, 0x01	; 1
    26d8:	ec 81       	ldd	r30, Y+4	; 0x04
    26da:	fd 81       	ldd	r31, Y+5	; 0x05
    26dc:	80 83       	st	Z, r24
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	19 c0       	rjmp	.+50     	; 0x2716 <MDIO_stderrorGetPinValue+0x12c>
			case MDIO_PORTD: *ARG_pu8Value= GET_BIT(GPIOD->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    26e4:	e0 e3       	ldi	r30, 0x30	; 48
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	88 2f       	mov	r24, r24
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	a9 01       	movw	r20, r18
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <MDIO_stderrorGetPinValue+0x112>
    26f8:	55 95       	asr	r21
    26fa:	47 95       	ror	r20
    26fc:	8a 95       	dec	r24
    26fe:	e2 f7       	brpl	.-8      	; 0x26f8 <MDIO_stderrorGetPinValue+0x10e>
    2700:	ca 01       	movw	r24, r20
    2702:	81 70       	andi	r24, 0x01	; 1
    2704:	ec 81       	ldd	r30, Y+4	; 0x04
    2706:	fd 81       	ldd	r31, Y+5	; 0x05
    2708:	80 83       	st	Z, r24
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	03 c0       	rjmp	.+6      	; 0x2716 <MDIO_stderrorGetPinValue+0x12c>
			default:L_stderrorError = E_NOK;break;
    2710:	19 82       	std	Y+1, r1	; 0x01
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <MDIO_stderrorGetPinValue+0x12c>
		}
	}
	else
	{
		
		L_stderrorError=E_NOK;
    2714:	19 82       	std	Y+1, r1	; 0x01
		
	}
	
	return L_stderrorError;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	27 96       	adiw	r28, 0x07	; 7
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <MGIE_voidEnableGlobalInterrupt>:
#include "MGIE_private.h"



void MGIE_voidEnableGlobalInterrupt(void)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(MGIE_SREG,MGIE_IBIT);
    2732:	af e5       	ldi	r26, 0x5F	; 95
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	ef e5       	ldi	r30, 0x5F	; 95
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	80 68       	ori	r24, 0x80	; 128
    273e:	8c 93       	st	X, r24
	
}
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <MGIE_voidDisableGlobalInterrupt>:

void MGIE_voidDisableGlobalInterrupt(void)
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT(MGIE_SREG,MGIE_IBIT);
    274e:	af e5       	ldi	r26, 0x5F	; 95
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	ef e5       	ldi	r30, 0x5F	; 95
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	8f 77       	andi	r24, 0x7F	; 127
    275a:	8c 93       	st	X, r24
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <main>:
void printtemponlcd(void);

u16 L_u16PotValue=0;

int main(void)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidInit();
    276a:	0e 94 17 07 	call	0xe2e	; 0xe2e <HLCD_voidInit>
	MADC_stderrorInit(MADC_VREF_AVCC,MADC_PreScalar_128,1024);
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	67 e0       	ldi	r22, 0x07	; 7
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	54 e0       	ldi	r21, 0x04	; 4
    2776:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <MADC_stderrorInit>
	MGIE_voidEnableGlobalInterrupt();
    277a:	0e 94 95 13 	call	0x272a	; 0x272a <MGIE_voidEnableGlobalInterrupt>

	while(1)
	{

		MADC_stderrorStartConversionASync(&L_u16PotValue,printtemponlcd,MADC_SCHANNEL_ADC0);
    277e:	8a e7       	ldi	r24, 0x7A	; 122
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	28 ec       	ldi	r18, 0xC8	; 200
    2784:	33 e1       	ldi	r19, 0x13	; 19
    2786:	b9 01       	movw	r22, r18
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <MADC_stderrorStartConversionASync>
    278e:	f7 cf       	rjmp	.-18     	; 0x277e <main+0x1c>

00002790 <printtemponlcd>:
}



void printtemponlcd(void)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	62 97       	sbiw	r28, 0x12	; 18
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidClear();
    27a4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <HLCD_voidClear>

	u16 L_u16ReadVoltage=(u16)(((u32)L_u16PotValue*5000UL)/1024UL);
    27a8:	80 91 7a 01 	lds	r24, 0x017A
    27ac:	90 91 7b 01 	lds	r25, 0x017B
    27b0:	cc 01       	movw	r24, r24
    27b2:	a0 e0       	ldi	r26, 0x00	; 0
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	28 e8       	ldi	r18, 0x88	; 136
    27b8:	33 e1       	ldi	r19, 0x13	; 19
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 9e 14 	call	0x293c	; 0x293c <__mulsi3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	07 2e       	mov	r0, r23
    27cc:	7a e0       	ldi	r23, 0x0A	; 10
    27ce:	b6 95       	lsr	r27
    27d0:	a7 95       	ror	r26
    27d2:	97 95       	ror	r25
    27d4:	87 95       	ror	r24
    27d6:	7a 95       	dec	r23
    27d8:	d1 f7       	brne	.-12     	; 0x27ce <printtemponlcd+0x3e>
    27da:	70 2d       	mov	r23, r0
    27dc:	9a 8b       	std	Y+18, r25	; 0x12
    27de:	89 8b       	std	Y+17, r24	; 0x11
	u16	L_u8Temp=round(L_u16ReadVoltage/10.0);
    27e0:	89 89       	ldd	r24, Y+17	; 0x11
    27e2:	9a 89       	ldd	r25, Y+18	; 0x12
    27e4:	cc 01       	movw	r24, r24
    27e6:	a0 e0       	ldi	r26, 0x00	; 0
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <round>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	98 8b       	std	Y+16, r25	; 0x10
    2824:	8f 87       	std	Y+15, r24	; 0x0f
	HLCD_voidSetCursor(0,0);
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <HLCD_voidSetCursor>
	HLCD_voidSendString("Tempreture");
    282e:	80 e6       	ldi	r24, 0x60	; 96
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 45 0c 	call	0x188a	; 0x188a <HLCD_voidSendString>
	HLCD_voidSetCursor(1,0);
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <HLCD_voidSetCursor>
	HLCD_voidDisplayNumber(L_u8Temp);
    283e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2840:	98 89       	ldd	r25, Y+16	; 0x10
    2842:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <HLCD_voidDisplayNumber>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	aa e7       	ldi	r26, 0x7A	; 122
    284c:	b4 e4       	ldi	r27, 0x44	; 68
    284e:	8b 87       	std	Y+11, r24	; 0x0b
    2850:	9c 87       	std	Y+12, r25	; 0x0c
    2852:	ad 87       	std	Y+13, r26	; 0x0d
    2854:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2856:	6b 85       	ldd	r22, Y+11	; 0x0b
    2858:	7c 85       	ldd	r23, Y+12	; 0x0c
    285a:	8d 85       	ldd	r24, Y+13	; 0x0d
    285c:	9e 85       	ldd	r25, Y+14	; 0x0e
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4a ef       	ldi	r20, 0xFA	; 250
    2864:	54 e4       	ldi	r21, 0x44	; 68
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	8f 83       	std	Y+7, r24	; 0x07
    2870:	98 87       	std	Y+8, r25	; 0x08
    2872:	a9 87       	std	Y+9, r26	; 0x09
    2874:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2876:	6f 81       	ldd	r22, Y+7	; 0x07
    2878:	78 85       	ldd	r23, Y+8	; 0x08
    287a:	89 85       	ldd	r24, Y+9	; 0x09
    287c:	9a 85       	ldd	r25, Y+10	; 0x0a
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e8       	ldi	r20, 0x80	; 128
    2884:	5f e3       	ldi	r21, 0x3F	; 63
    2886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    288a:	88 23       	and	r24, r24
    288c:	2c f4       	brge	.+10     	; 0x2898 <printtemponlcd+0x108>
		__ticks = 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
    2896:	3f c0       	rjmp	.+126    	; 0x2916 <printtemponlcd+0x186>
	else if (__tmp > 65535)
    2898:	6f 81       	ldd	r22, Y+7	; 0x07
    289a:	78 85       	ldd	r23, Y+8	; 0x08
    289c:	89 85       	ldd	r24, Y+9	; 0x09
    289e:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	3f ef       	ldi	r19, 0xFF	; 255
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	57 e4       	ldi	r21, 0x47	; 71
    28a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	4c f5       	brge	.+82     	; 0x2902 <printtemponlcd+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e2       	ldi	r20, 0x20	; 32
    28be:	51 e4       	ldi	r21, 0x41	; 65
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <printtemponlcd+0x168>
    28da:	88 ec       	ldi	r24, 0xC8	; 200
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	9c 83       	std	Y+4, r25	; 0x04
    28e0:	8b 83       	std	Y+3, r24	; 0x03
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	9c 81       	ldd	r25, Y+4	; 0x04
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <printtemponlcd+0x156>
    28ea:	9c 83       	std	Y+4, r25	; 0x04
    28ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
    28f0:	9e 81       	ldd	r25, Y+6	; 0x06
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	69 f7       	brne	.-38     	; 0x28da <printtemponlcd+0x14a>
    2900:	14 c0       	rjmp	.+40     	; 0x292a <printtemponlcd+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2902:	6f 81       	ldd	r22, Y+7	; 0x07
    2904:	78 85       	ldd	r23, Y+8	; 0x08
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9e 83       	std	Y+6, r25	; 0x06
    2914:	8d 83       	std	Y+5, r24	; 0x05
    2916:	8d 81       	ldd	r24, Y+5	; 0x05
    2918:	9e 81       	ldd	r25, Y+6	; 0x06
    291a:	9a 83       	std	Y+2, r25	; 0x02
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	9a 81       	ldd	r25, Y+2	; 0x02
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <printtemponlcd+0x192>
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    292a:	62 96       	adiw	r28, 0x12	; 18
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <__mulsi3>:
    293c:	62 9f       	mul	r22, r18
    293e:	d0 01       	movw	r26, r0
    2940:	73 9f       	mul	r23, r19
    2942:	f0 01       	movw	r30, r0
    2944:	82 9f       	mul	r24, r18
    2946:	e0 0d       	add	r30, r0
    2948:	f1 1d       	adc	r31, r1
    294a:	64 9f       	mul	r22, r20
    294c:	e0 0d       	add	r30, r0
    294e:	f1 1d       	adc	r31, r1
    2950:	92 9f       	mul	r25, r18
    2952:	f0 0d       	add	r31, r0
    2954:	83 9f       	mul	r24, r19
    2956:	f0 0d       	add	r31, r0
    2958:	74 9f       	mul	r23, r20
    295a:	f0 0d       	add	r31, r0
    295c:	65 9f       	mul	r22, r21
    295e:	f0 0d       	add	r31, r0
    2960:	99 27       	eor	r25, r25
    2962:	72 9f       	mul	r23, r18
    2964:	b0 0d       	add	r27, r0
    2966:	e1 1d       	adc	r30, r1
    2968:	f9 1f       	adc	r31, r25
    296a:	63 9f       	mul	r22, r19
    296c:	b0 0d       	add	r27, r0
    296e:	e1 1d       	adc	r30, r1
    2970:	f9 1f       	adc	r31, r25
    2972:	bd 01       	movw	r22, r26
    2974:	cf 01       	movw	r24, r30
    2976:	11 24       	eor	r1, r1
    2978:	08 95       	ret

0000297a <__prologue_saves__>:
    297a:	2f 92       	push	r2
    297c:	3f 92       	push	r3
    297e:	4f 92       	push	r4
    2980:	5f 92       	push	r5
    2982:	6f 92       	push	r6
    2984:	7f 92       	push	r7
    2986:	8f 92       	push	r8
    2988:	9f 92       	push	r9
    298a:	af 92       	push	r10
    298c:	bf 92       	push	r11
    298e:	cf 92       	push	r12
    2990:	df 92       	push	r13
    2992:	ef 92       	push	r14
    2994:	ff 92       	push	r15
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	ca 1b       	sub	r28, r26
    29a4:	db 0b       	sbc	r29, r27
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	09 94       	ijmp

000029b2 <__epilogue_restores__>:
    29b2:	2a 88       	ldd	r2, Y+18	; 0x12
    29b4:	39 88       	ldd	r3, Y+17	; 0x11
    29b6:	48 88       	ldd	r4, Y+16	; 0x10
    29b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    29ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    29bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    29be:	8c 84       	ldd	r8, Y+12	; 0x0c
    29c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    29c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    29c4:	b9 84       	ldd	r11, Y+9	; 0x09
    29c6:	c8 84       	ldd	r12, Y+8	; 0x08
    29c8:	df 80       	ldd	r13, Y+7	; 0x07
    29ca:	ee 80       	ldd	r14, Y+6	; 0x06
    29cc:	fd 80       	ldd	r15, Y+5	; 0x05
    29ce:	0c 81       	ldd	r16, Y+4	; 0x04
    29d0:	1b 81       	ldd	r17, Y+3	; 0x03
    29d2:	aa 81       	ldd	r26, Y+2	; 0x02
    29d4:	b9 81       	ldd	r27, Y+1	; 0x01
    29d6:	ce 0f       	add	r28, r30
    29d8:	d1 1d       	adc	r29, r1
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	ed 01       	movw	r28, r26
    29e6:	08 95       	ret

000029e8 <itoa>:
    29e8:	fb 01       	movw	r30, r22
    29ea:	9f 01       	movw	r18, r30
    29ec:	e8 94       	clt
    29ee:	42 30       	cpi	r20, 0x02	; 2
    29f0:	c4 f0       	brlt	.+48     	; 0x2a22 <itoa+0x3a>
    29f2:	45 32       	cpi	r20, 0x25	; 37
    29f4:	b4 f4       	brge	.+44     	; 0x2a22 <itoa+0x3a>
    29f6:	4a 30       	cpi	r20, 0x0A	; 10
    29f8:	29 f4       	brne	.+10     	; 0x2a04 <itoa+0x1c>
    29fa:	97 fb       	bst	r25, 7
    29fc:	1e f4       	brtc	.+6      	; 0x2a04 <itoa+0x1c>
    29fe:	90 95       	com	r25
    2a00:	81 95       	neg	r24
    2a02:	9f 4f       	sbci	r25, 0xFF	; 255
    2a04:	64 2f       	mov	r22, r20
    2a06:	77 27       	eor	r23, r23
    2a08:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__udivmodhi4>
    2a0c:	80 5d       	subi	r24, 0xD0	; 208
    2a0e:	8a 33       	cpi	r24, 0x3A	; 58
    2a10:	0c f0       	brlt	.+2      	; 0x2a14 <itoa+0x2c>
    2a12:	89 5d       	subi	r24, 0xD9	; 217
    2a14:	81 93       	st	Z+, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	a1 f7       	brne	.-24     	; 0x2a04 <itoa+0x1c>
    2a1c:	16 f4       	brtc	.+4      	; 0x2a22 <itoa+0x3a>
    2a1e:	5d e2       	ldi	r21, 0x2D	; 45
    2a20:	51 93       	st	Z+, r21
    2a22:	10 82       	st	Z, r1
    2a24:	c9 01       	movw	r24, r18
    2a26:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <strrev>

00002a2a <round>:
    2a2a:	60 d0       	rcall	.+192    	; 0x2aec <__fp_splitA>
    2a2c:	e0 f0       	brcs	.+56     	; 0x2a66 <round+0x3c>
    2a2e:	9e 37       	cpi	r25, 0x7E	; 126
    2a30:	d8 f0       	brcs	.+54     	; 0x2a68 <round+0x3e>
    2a32:	96 39       	cpi	r25, 0x96	; 150
    2a34:	b8 f4       	brcc	.+46     	; 0x2a64 <round+0x3a>
    2a36:	9e 38       	cpi	r25, 0x8E	; 142
    2a38:	48 f4       	brcc	.+18     	; 0x2a4c <round+0x22>
    2a3a:	67 2f       	mov	r22, r23
    2a3c:	78 2f       	mov	r23, r24
    2a3e:	88 27       	eor	r24, r24
    2a40:	98 5f       	subi	r25, 0xF8	; 248
    2a42:	f9 cf       	rjmp	.-14     	; 0x2a36 <round+0xc>
    2a44:	86 95       	lsr	r24
    2a46:	77 95       	ror	r23
    2a48:	67 95       	ror	r22
    2a4a:	93 95       	inc	r25
    2a4c:	95 39       	cpi	r25, 0x95	; 149
    2a4e:	d0 f3       	brcs	.-12     	; 0x2a44 <round+0x1a>
    2a50:	b6 2f       	mov	r27, r22
    2a52:	b1 70       	andi	r27, 0x01	; 1
    2a54:	6b 0f       	add	r22, r27
    2a56:	71 1d       	adc	r23, r1
    2a58:	81 1d       	adc	r24, r1
    2a5a:	20 f4       	brcc	.+8      	; 0x2a64 <round+0x3a>
    2a5c:	87 95       	ror	r24
    2a5e:	77 95       	ror	r23
    2a60:	67 95       	ror	r22
    2a62:	93 95       	inc	r25
    2a64:	12 c0       	rjmp	.+36     	; 0x2a8a <__fp_mintl>
    2a66:	2c c0       	rjmp	.+88     	; 0x2ac0 <__fp_mpack>
    2a68:	5c c0       	rjmp	.+184    	; 0x2b22 <__fp_szero>

00002a6a <strrev>:
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	67 2f       	mov	r22, r23
    2a70:	71 91       	ld	r23, Z+
    2a72:	77 23       	and	r23, r23
    2a74:	e1 f7       	brne	.-8      	; 0x2a6e <strrev+0x4>
    2a76:	32 97       	sbiw	r30, 0x02	; 2
    2a78:	04 c0       	rjmp	.+8      	; 0x2a82 <strrev+0x18>
    2a7a:	7c 91       	ld	r23, X
    2a7c:	6d 93       	st	X+, r22
    2a7e:	70 83       	st	Z, r23
    2a80:	62 91       	ld	r22, -Z
    2a82:	ae 17       	cp	r26, r30
    2a84:	bf 07       	cpc	r27, r31
    2a86:	c8 f3       	brcs	.-14     	; 0x2a7a <strrev+0x10>
    2a88:	08 95       	ret

00002a8a <__fp_mintl>:
    2a8a:	88 23       	and	r24, r24
    2a8c:	71 f4       	brne	.+28     	; 0x2aaa <__fp_mintl+0x20>
    2a8e:	77 23       	and	r23, r23
    2a90:	21 f0       	breq	.+8      	; 0x2a9a <__fp_mintl+0x10>
    2a92:	98 50       	subi	r25, 0x08	; 8
    2a94:	87 2b       	or	r24, r23
    2a96:	76 2f       	mov	r23, r22
    2a98:	07 c0       	rjmp	.+14     	; 0x2aa8 <__fp_mintl+0x1e>
    2a9a:	66 23       	and	r22, r22
    2a9c:	11 f4       	brne	.+4      	; 0x2aa2 <__fp_mintl+0x18>
    2a9e:	99 27       	eor	r25, r25
    2aa0:	0d c0       	rjmp	.+26     	; 0x2abc <__fp_mintl+0x32>
    2aa2:	90 51       	subi	r25, 0x10	; 16
    2aa4:	86 2b       	or	r24, r22
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	2a f0       	brmi	.+10     	; 0x2ab6 <__fp_mintl+0x2c>
    2aac:	9a 95       	dec	r25
    2aae:	66 0f       	add	r22, r22
    2ab0:	77 1f       	adc	r23, r23
    2ab2:	88 1f       	adc	r24, r24
    2ab4:	da f7       	brpl	.-10     	; 0x2aac <__fp_mintl+0x22>
    2ab6:	88 0f       	add	r24, r24
    2ab8:	96 95       	lsr	r25
    2aba:	87 95       	ror	r24
    2abc:	97 f9       	bld	r25, 7
    2abe:	08 95       	ret

00002ac0 <__fp_mpack>:
    2ac0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ac2:	31 f0       	breq	.+12     	; 0x2ad0 <__fp_mpack_finite+0xc>

00002ac4 <__fp_mpack_finite>:
    2ac4:	91 50       	subi	r25, 0x01	; 1
    2ac6:	20 f4       	brcc	.+8      	; 0x2ad0 <__fp_mpack_finite+0xc>
    2ac8:	87 95       	ror	r24
    2aca:	77 95       	ror	r23
    2acc:	67 95       	ror	r22
    2ace:	b7 95       	ror	r27
    2ad0:	88 0f       	add	r24, r24
    2ad2:	91 1d       	adc	r25, r1
    2ad4:	96 95       	lsr	r25
    2ad6:	87 95       	ror	r24
    2ad8:	97 f9       	bld	r25, 7
    2ada:	08 95       	ret

00002adc <__fp_split3>:
    2adc:	57 fd       	sbrc	r21, 7
    2ade:	90 58       	subi	r25, 0x80	; 128
    2ae0:	44 0f       	add	r20, r20
    2ae2:	55 1f       	adc	r21, r21
    2ae4:	59 f0       	breq	.+22     	; 0x2afc <__fp_splitA+0x10>
    2ae6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ae8:	71 f0       	breq	.+28     	; 0x2b06 <__fp_splitA+0x1a>
    2aea:	47 95       	ror	r20

00002aec <__fp_splitA>:
    2aec:	88 0f       	add	r24, r24
    2aee:	97 fb       	bst	r25, 7
    2af0:	99 1f       	adc	r25, r25
    2af2:	61 f0       	breq	.+24     	; 0x2b0c <__fp_splitA+0x20>
    2af4:	9f 3f       	cpi	r25, 0xFF	; 255
    2af6:	79 f0       	breq	.+30     	; 0x2b16 <__fp_splitA+0x2a>
    2af8:	87 95       	ror	r24
    2afa:	08 95       	ret
    2afc:	12 16       	cp	r1, r18
    2afe:	13 06       	cpc	r1, r19
    2b00:	14 06       	cpc	r1, r20
    2b02:	55 1f       	adc	r21, r21
    2b04:	f2 cf       	rjmp	.-28     	; 0x2aea <__fp_split3+0xe>
    2b06:	46 95       	lsr	r20
    2b08:	f1 df       	rcall	.-30     	; 0x2aec <__fp_splitA>
    2b0a:	08 c0       	rjmp	.+16     	; 0x2b1c <__fp_splitA+0x30>
    2b0c:	16 16       	cp	r1, r22
    2b0e:	17 06       	cpc	r1, r23
    2b10:	18 06       	cpc	r1, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	f1 cf       	rjmp	.-30     	; 0x2af8 <__fp_splitA+0xc>
    2b16:	86 95       	lsr	r24
    2b18:	71 05       	cpc	r23, r1
    2b1a:	61 05       	cpc	r22, r1
    2b1c:	08 94       	sec
    2b1e:	08 95       	ret

00002b20 <__fp_zero>:
    2b20:	e8 94       	clt

00002b22 <__fp_szero>:
    2b22:	bb 27       	eor	r27, r27
    2b24:	66 27       	eor	r22, r22
    2b26:	77 27       	eor	r23, r23
    2b28:	cb 01       	movw	r24, r22
    2b2a:	97 f9       	bld	r25, 7
    2b2c:	08 95       	ret

00002b2e <__udivmodhi4>:
    2b2e:	aa 1b       	sub	r26, r26
    2b30:	bb 1b       	sub	r27, r27
    2b32:	51 e1       	ldi	r21, 0x11	; 17
    2b34:	07 c0       	rjmp	.+14     	; 0x2b44 <__udivmodhi4_ep>

00002b36 <__udivmodhi4_loop>:
    2b36:	aa 1f       	adc	r26, r26
    2b38:	bb 1f       	adc	r27, r27
    2b3a:	a6 17       	cp	r26, r22
    2b3c:	b7 07       	cpc	r27, r23
    2b3e:	10 f0       	brcs	.+4      	; 0x2b44 <__udivmodhi4_ep>
    2b40:	a6 1b       	sub	r26, r22
    2b42:	b7 0b       	sbc	r27, r23

00002b44 <__udivmodhi4_ep>:
    2b44:	88 1f       	adc	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	5a 95       	dec	r21
    2b4a:	a9 f7       	brne	.-22     	; 0x2b36 <__udivmodhi4_loop>
    2b4c:	80 95       	com	r24
    2b4e:	90 95       	com	r25
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	08 95       	ret

00002b56 <_exit>:
    2b56:	f8 94       	cli

00002b58 <__stop_program>:
    2b58:	ff cf       	rjmp	.-2      	; 0x2b58 <__stop_program>
