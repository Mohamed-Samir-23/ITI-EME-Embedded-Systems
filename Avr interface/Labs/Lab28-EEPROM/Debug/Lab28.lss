
Lab28.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000034fc  00003590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080009c  0080009c  000035cc  2**0
                  ALLOC
  3 .stab         00002b68  00000000  00000000  000035cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000144a  00000000  00000000  00006134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000757e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000076de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000786d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000098b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a9b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b938  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000bd7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 36 14 	call	0x286c	; 0x286c <main>
      8a:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e9       	ldi	r26, 0x94	; 148
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e9       	ldi	r24, 0x94	; 148
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e9       	ldi	r22, 0x94	; 148
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <HLCD_voidInit>:
#include "HLCD_private.h"
#include "HLCD_interface.h"
#include<util/delay.h>

void HLCD_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	ee 97       	sbiw	r28, 0x3e	; 62
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	MDIO_stderrorSetPortDirection(LCD_DATA_PORT,0xFF);
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	6f ef       	ldi	r22, 0xFF	; 255
     cb6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <MDIO_stderrorSetPortDirection>
	MDIO_stderrorSetPortValue(LCD_DATA_PORT,MDIO_LOW);
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <MDIO_stderrorSetPortValue>
	MDIO_stderrorSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,MDIO_OUTPUT);
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,MDIO_OUTPUT);
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	62 e0       	ldi	r22, 0x02	; 2
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_OUTPUT);
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	63 e0       	ldi	r22, 0x03	; 3
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <MDIO_stderrorSetPinDirection>
	HLCD_voidSendCmd(0x33);   /* Send command 0x33*/
     ce0:	83 e3       	ldi	r24, 0x33	; 51
     ce2:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x32);   /* Send command 0x32*/
     ce6:	82 e3       	ldi	r24, 0x32	; 50
     ce8:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x38);
     cec:	88 e3       	ldi	r24, 0x38	; 56
     cee:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a8 e4       	ldi	r26, 0x48	; 72
     cf8:	b2 e4       	ldi	r27, 0x42	; 66
     cfa:	8b af       	std	Y+59, r24	; 0x3b
     cfc:	9c af       	std	Y+60, r25	; 0x3c
     cfe:	ad af       	std	Y+61, r26	; 0x3d
     d00:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d02:	6b ad       	ldd	r22, Y+59	; 0x3b
     d04:	7c ad       	ldd	r23, Y+60	; 0x3c
     d06:	8d ad       	ldd	r24, Y+61	; 0x3d
     d08:	9e ad       	ldd	r25, Y+62	; 0x3e
     d0a:	2b ea       	ldi	r18, 0xAB	; 171
     d0c:	3a ea       	ldi	r19, 0xAA	; 170
     d0e:	4a e2       	ldi	r20, 0x2A	; 42
     d10:	50 e4       	ldi	r21, 0x40	; 64
     d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	8f ab       	std	Y+55, r24	; 0x37
     d1c:	98 af       	std	Y+56, r25	; 0x38
     d1e:	a9 af       	std	Y+57, r26	; 0x39
     d20:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     d22:	6f a9       	ldd	r22, Y+55	; 0x37
     d24:	78 ad       	ldd	r23, Y+56	; 0x38
     d26:	89 ad       	ldd	r24, Y+57	; 0x39
     d28:	9a ad       	ldd	r25, Y+58	; 0x3a
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e8       	ldi	r20, 0x80	; 128
     d30:	5f e3       	ldi	r21, 0x3F	; 63
     d32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d36:	88 23       	and	r24, r24
     d38:	1c f4       	brge	.+6      	; 0xd40 <HLCD_voidInit+0xa2>
		__ticks = 1;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	8e ab       	std	Y+54, r24	; 0x36
     d3e:	91 c0       	rjmp	.+290    	; 0xe62 <HLCD_voidInit+0x1c4>
	else if (__tmp > 255)
     d40:	6f a9       	ldd	r22, Y+55	; 0x37
     d42:	78 ad       	ldd	r23, Y+56	; 0x38
     d44:	89 ad       	ldd	r24, Y+57	; 0x39
     d46:	9a ad       	ldd	r25, Y+58	; 0x3a
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	53 e4       	ldi	r21, 0x43	; 67
     d50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d54:	18 16       	cp	r1, r24
     d56:	0c f0       	brlt	.+2      	; 0xd5a <HLCD_voidInit+0xbc>
     d58:	7b c0       	rjmp	.+246    	; 0xe50 <HLCD_voidInit+0x1b2>
	{
		_delay_ms(__us / 1000.0);
     d5a:	6b ad       	ldd	r22, Y+59	; 0x3b
     d5c:	7c ad       	ldd	r23, Y+60	; 0x3c
     d5e:	8d ad       	ldd	r24, Y+61	; 0x3d
     d60:	9e ad       	ldd	r25, Y+62	; 0x3e
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	4a e7       	ldi	r20, 0x7A	; 122
     d68:	54 e4       	ldi	r21, 0x44	; 68
     d6a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	8a ab       	std	Y+50, r24	; 0x32
     d74:	9b ab       	std	Y+51, r25	; 0x33
     d76:	ac ab       	std	Y+52, r26	; 0x34
     d78:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d7a:	6a a9       	ldd	r22, Y+50	; 0x32
     d7c:	7b a9       	ldd	r23, Y+51	; 0x33
     d7e:	8c a9       	ldd	r24, Y+52	; 0x34
     d80:	9d a9       	ldd	r25, Y+53	; 0x35
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	4a ef       	ldi	r20, 0xFA	; 250
     d88:	54 e4       	ldi	r21, 0x44	; 68
     d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	8e a7       	std	Y+46, r24	; 0x2e
     d94:	9f a7       	std	Y+47, r25	; 0x2f
     d96:	a8 ab       	std	Y+48, r26	; 0x30
     d98:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     d9a:	6e a5       	ldd	r22, Y+46	; 0x2e
     d9c:	7f a5       	ldd	r23, Y+47	; 0x2f
     d9e:	88 a9       	ldd	r24, Y+48	; 0x30
     da0:	99 a9       	ldd	r25, Y+49	; 0x31
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e8       	ldi	r20, 0x80	; 128
     da8:	5f e3       	ldi	r21, 0x3F	; 63
     daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     dae:	88 23       	and	r24, r24
     db0:	2c f4       	brge	.+10     	; 0xdbc <HLCD_voidInit+0x11e>
		__ticks = 1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9d a7       	std	Y+45, r25	; 0x2d
     db8:	8c a7       	std	Y+44, r24	; 0x2c
     dba:	3f c0       	rjmp	.+126    	; 0xe3a <HLCD_voidInit+0x19c>
	else if (__tmp > 65535)
     dbc:	6e a5       	ldd	r22, Y+46	; 0x2e
     dbe:	7f a5       	ldd	r23, Y+47	; 0x2f
     dc0:	88 a9       	ldd	r24, Y+48	; 0x30
     dc2:	99 a9       	ldd	r25, Y+49	; 0x31
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	3f ef       	ldi	r19, 0xFF	; 255
     dc8:	4f e7       	ldi	r20, 0x7F	; 127
     dca:	57 e4       	ldi	r21, 0x47	; 71
     dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     dd0:	18 16       	cp	r1, r24
     dd2:	4c f5       	brge	.+82     	; 0xe26 <HLCD_voidInit+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd4:	6a a9       	ldd	r22, Y+50	; 0x32
     dd6:	7b a9       	ldd	r23, Y+51	; 0x33
     dd8:	8c a9       	ldd	r24, Y+52	; 0x34
     dda:	9d a9       	ldd	r25, Y+53	; 0x35
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e2       	ldi	r20, 0x20	; 32
     de2:	51 e4       	ldi	r21, 0x41	; 65
     de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	bc 01       	movw	r22, r24
     dee:	cd 01       	movw	r24, r26
     df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	9d a7       	std	Y+45, r25	; 0x2d
     dfa:	8c a7       	std	Y+44, r24	; 0x2c
     dfc:	0f c0       	rjmp	.+30     	; 0xe1c <HLCD_voidInit+0x17e>
     dfe:	88 ec       	ldi	r24, 0xC8	; 200
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	9b a7       	std	Y+43, r25	; 0x2b
     e04:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e06:	8a a5       	ldd	r24, Y+42	; 0x2a
     e08:	9b a5       	ldd	r25, Y+43	; 0x2b
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <HLCD_voidInit+0x16c>
     e0e:	9b a7       	std	Y+43, r25	; 0x2b
     e10:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e12:	8c a5       	ldd	r24, Y+44	; 0x2c
     e14:	9d a5       	ldd	r25, Y+45	; 0x2d
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	9d a7       	std	Y+45, r25	; 0x2d
     e1a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1c:	8c a5       	ldd	r24, Y+44	; 0x2c
     e1e:	9d a5       	ldd	r25, Y+45	; 0x2d
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	69 f7       	brne	.-38     	; 0xdfe <HLCD_voidInit+0x160>
     e24:	24 c0       	rjmp	.+72     	; 0xe6e <HLCD_voidInit+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e26:	6e a5       	ldd	r22, Y+46	; 0x2e
     e28:	7f a5       	ldd	r23, Y+47	; 0x2f
     e2a:	88 a9       	ldd	r24, Y+48	; 0x30
     e2c:	99 a9       	ldd	r25, Y+49	; 0x31
     e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	9d a7       	std	Y+45, r25	; 0x2d
     e38:	8c a7       	std	Y+44, r24	; 0x2c
     e3a:	8c a5       	ldd	r24, Y+44	; 0x2c
     e3c:	9d a5       	ldd	r25, Y+45	; 0x2d
     e3e:	99 a7       	std	Y+41, r25	; 0x29
     e40:	88 a7       	std	Y+40, r24	; 0x28
     e42:	88 a5       	ldd	r24, Y+40	; 0x28
     e44:	99 a5       	ldd	r25, Y+41	; 0x29
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <HLCD_voidInit+0x1a8>
     e4a:	99 a7       	std	Y+41, r25	; 0x29
     e4c:	88 a7       	std	Y+40, r24	; 0x28
     e4e:	0f c0       	rjmp	.+30     	; 0xe6e <HLCD_voidInit+0x1d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e50:	6f a9       	ldd	r22, Y+55	; 0x37
     e52:	78 ad       	ldd	r23, Y+56	; 0x38
     e54:	89 ad       	ldd	r24, Y+57	; 0x39
     e56:	9a ad       	ldd	r25, Y+58	; 0x3a
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	8e ab       	std	Y+54, r24	; 0x36
     e62:	8e a9       	ldd	r24, Y+54	; 0x36
     e64:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e66:	8f a1       	ldd	r24, Y+39	; 0x27
     e68:	8a 95       	dec	r24
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <HLCD_voidInit+0x1ca>
     e6c:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	HLCD_voidSendCmd(0x0C);
     e6e:	8c e0       	ldi	r24, 0x0C	; 12
     e70:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	a8 e4       	ldi	r26, 0x48	; 72
     e7a:	b2 e4       	ldi	r27, 0x42	; 66
     e7c:	8b a3       	std	Y+35, r24	; 0x23
     e7e:	9c a3       	std	Y+36, r25	; 0x24
     e80:	ad a3       	std	Y+37, r26	; 0x25
     e82:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e84:	6b a1       	ldd	r22, Y+35	; 0x23
     e86:	7c a1       	ldd	r23, Y+36	; 0x24
     e88:	8d a1       	ldd	r24, Y+37	; 0x25
     e8a:	9e a1       	ldd	r25, Y+38	; 0x26
     e8c:	2b ea       	ldi	r18, 0xAB	; 171
     e8e:	3a ea       	ldi	r19, 0xAA	; 170
     e90:	4a e2       	ldi	r20, 0x2A	; 42
     e92:	50 e4       	ldi	r21, 0x40	; 64
     e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	8f 8f       	std	Y+31, r24	; 0x1f
     e9e:	98 a3       	std	Y+32, r25	; 0x20
     ea0:	a9 a3       	std	Y+33, r26	; 0x21
     ea2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     ea4:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ea6:	78 a1       	ldd	r23, Y+32	; 0x20
     ea8:	89 a1       	ldd	r24, Y+33	; 0x21
     eaa:	9a a1       	ldd	r25, Y+34	; 0x22
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e8       	ldi	r20, 0x80	; 128
     eb2:	5f e3       	ldi	r21, 0x3F	; 63
     eb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eb8:	88 23       	and	r24, r24
     eba:	1c f4       	brge	.+6      	; 0xec2 <HLCD_voidInit+0x224>
		__ticks = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	8e 8f       	std	Y+30, r24	; 0x1e
     ec0:	91 c0       	rjmp	.+290    	; 0xfe4 <HLCD_voidInit+0x346>
	else if (__tmp > 255)
     ec2:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ec4:	78 a1       	ldd	r23, Y+32	; 0x20
     ec6:	89 a1       	ldd	r24, Y+33	; 0x21
     ec8:	9a a1       	ldd	r25, Y+34	; 0x22
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	4f e7       	ldi	r20, 0x7F	; 127
     ed0:	53 e4       	ldi	r21, 0x43	; 67
     ed2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ed6:	18 16       	cp	r1, r24
     ed8:	0c f0       	brlt	.+2      	; 0xedc <HLCD_voidInit+0x23e>
     eda:	7b c0       	rjmp	.+246    	; 0xfd2 <HLCD_voidInit+0x334>
	{
		_delay_ms(__us / 1000.0);
     edc:	6b a1       	ldd	r22, Y+35	; 0x23
     ede:	7c a1       	ldd	r23, Y+36	; 0x24
     ee0:	8d a1       	ldd	r24, Y+37	; 0x25
     ee2:	9e a1       	ldd	r25, Y+38	; 0x26
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	4a e7       	ldi	r20, 0x7A	; 122
     eea:	54 e4       	ldi	r21, 0x44	; 68
     eec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	8a 8f       	std	Y+26, r24	; 0x1a
     ef6:	9b 8f       	std	Y+27, r25	; 0x1b
     ef8:	ac 8f       	std	Y+28, r26	; 0x1c
     efa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efc:	6a 8d       	ldd	r22, Y+26	; 0x1a
     efe:	7b 8d       	ldd	r23, Y+27	; 0x1b
     f00:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f02:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	4a ef       	ldi	r20, 0xFA	; 250
     f0a:	54 e4       	ldi	r21, 0x44	; 68
     f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	8e 8b       	std	Y+22, r24	; 0x16
     f16:	9f 8b       	std	Y+23, r25	; 0x17
     f18:	a8 8f       	std	Y+24, r26	; 0x18
     f1a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     f1c:	6e 89       	ldd	r22, Y+22	; 0x16
     f1e:	7f 89       	ldd	r23, Y+23	; 0x17
     f20:	88 8d       	ldd	r24, Y+24	; 0x18
     f22:	99 8d       	ldd	r25, Y+25	; 0x19
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e8       	ldi	r20, 0x80	; 128
     f2a:	5f e3       	ldi	r21, 0x3F	; 63
     f2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f30:	88 23       	and	r24, r24
     f32:	2c f4       	brge	.+10     	; 0xf3e <HLCD_voidInit+0x2a0>
		__ticks = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9d 8b       	std	Y+21, r25	; 0x15
     f3a:	8c 8b       	std	Y+20, r24	; 0x14
     f3c:	3f c0       	rjmp	.+126    	; 0xfbc <HLCD_voidInit+0x31e>
	else if (__tmp > 65535)
     f3e:	6e 89       	ldd	r22, Y+22	; 0x16
     f40:	7f 89       	ldd	r23, Y+23	; 0x17
     f42:	88 8d       	ldd	r24, Y+24	; 0x18
     f44:	99 8d       	ldd	r25, Y+25	; 0x19
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	3f ef       	ldi	r19, 0xFF	; 255
     f4a:	4f e7       	ldi	r20, 0x7F	; 127
     f4c:	57 e4       	ldi	r21, 0x47	; 71
     f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f52:	18 16       	cp	r1, r24
     f54:	4c f5       	brge	.+82     	; 0xfa8 <HLCD_voidInit+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f56:	6a 8d       	ldd	r22, Y+26	; 0x1a
     f58:	7b 8d       	ldd	r23, Y+27	; 0x1b
     f5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f5c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e2       	ldi	r20, 0x20	; 32
     f64:	51 e4       	ldi	r21, 0x41	; 65
     f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	9d 8b       	std	Y+21, r25	; 0x15
     f7c:	8c 8b       	std	Y+20, r24	; 0x14
     f7e:	0f c0       	rjmp	.+30     	; 0xf9e <HLCD_voidInit+0x300>
     f80:	88 ec       	ldi	r24, 0xC8	; 200
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9b 8b       	std	Y+19, r25	; 0x13
     f86:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f88:	8a 89       	ldd	r24, Y+18	; 0x12
     f8a:	9b 89       	ldd	r25, Y+19	; 0x13
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <HLCD_voidInit+0x2ee>
     f90:	9b 8b       	std	Y+19, r25	; 0x13
     f92:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f94:	8c 89       	ldd	r24, Y+20	; 0x14
     f96:	9d 89       	ldd	r25, Y+21	; 0x15
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	9d 8b       	std	Y+21, r25	; 0x15
     f9c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9e:	8c 89       	ldd	r24, Y+20	; 0x14
     fa0:	9d 89       	ldd	r25, Y+21	; 0x15
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	69 f7       	brne	.-38     	; 0xf80 <HLCD_voidInit+0x2e2>
     fa6:	24 c0       	rjmp	.+72     	; 0xff0 <HLCD_voidInit+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa8:	6e 89       	ldd	r22, Y+22	; 0x16
     faa:	7f 89       	ldd	r23, Y+23	; 0x17
     fac:	88 8d       	ldd	r24, Y+24	; 0x18
     fae:	99 8d       	ldd	r25, Y+25	; 0x19
     fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	9d 8b       	std	Y+21, r25	; 0x15
     fba:	8c 8b       	std	Y+20, r24	; 0x14
     fbc:	8c 89       	ldd	r24, Y+20	; 0x14
     fbe:	9d 89       	ldd	r25, Y+21	; 0x15
     fc0:	99 8b       	std	Y+17, r25	; 0x11
     fc2:	88 8b       	std	Y+16, r24	; 0x10
     fc4:	88 89       	ldd	r24, Y+16	; 0x10
     fc6:	99 89       	ldd	r25, Y+17	; 0x11
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <HLCD_voidInit+0x32a>
     fcc:	99 8b       	std	Y+17, r25	; 0x11
     fce:	88 8b       	std	Y+16, r24	; 0x10
     fd0:	0f c0       	rjmp	.+30     	; 0xff0 <HLCD_voidInit+0x352>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fd2:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fd4:	78 a1       	ldd	r23, Y+32	; 0x20
     fd6:	89 a1       	ldd	r24, Y+33	; 0x21
     fd8:	9a a1       	ldd	r25, Y+34	; 0x22
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8e 8f       	std	Y+30, r24	; 0x1e
     fe4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fe6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fea:	8a 95       	dec	r24
     fec:	f1 f7       	brne	.-4      	; 0xfea <HLCD_voidInit+0x34c>
     fee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	HLCD_voidSendCmd(0x01);
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a0 e0       	ldi	r26, 0x00	; 0
     ffc:	b0 e4       	ldi	r27, 0x40	; 64
     ffe:	8b 87       	std	Y+11, r24	; 0x0b
    1000:	9c 87       	std	Y+12, r25	; 0x0c
    1002:	ad 87       	std	Y+13, r26	; 0x0d
    1004:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1006:	6b 85       	ldd	r22, Y+11	; 0x0b
    1008:	7c 85       	ldd	r23, Y+12	; 0x0c
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	4a ef       	ldi	r20, 0xFA	; 250
    1014:	54 e4       	ldi	r21, 0x44	; 68
    1016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	8f 83       	std	Y+7, r24	; 0x07
    1020:	98 87       	std	Y+8, r25	; 0x08
    1022:	a9 87       	std	Y+9, r26	; 0x09
    1024:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1026:	6f 81       	ldd	r22, Y+7	; 0x07
    1028:	78 85       	ldd	r23, Y+8	; 0x08
    102a:	89 85       	ldd	r24, Y+9	; 0x09
    102c:	9a 85       	ldd	r25, Y+10	; 0x0a
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e8       	ldi	r20, 0x80	; 128
    1034:	5f e3       	ldi	r21, 0x3F	; 63
    1036:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    103a:	88 23       	and	r24, r24
    103c:	2c f4       	brge	.+10     	; 0x1048 <HLCD_voidInit+0x3aa>
		__ticks = 1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	3f c0       	rjmp	.+126    	; 0x10c6 <HLCD_voidInit+0x428>
	else if (__tmp > 65535)
    1048:	6f 81       	ldd	r22, Y+7	; 0x07
    104a:	78 85       	ldd	r23, Y+8	; 0x08
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	3f ef       	ldi	r19, 0xFF	; 255
    1054:	4f e7       	ldi	r20, 0x7F	; 127
    1056:	57 e4       	ldi	r21, 0x47	; 71
    1058:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    105c:	18 16       	cp	r1, r24
    105e:	4c f5       	brge	.+82     	; 0x10b2 <HLCD_voidInit+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1060:	6b 85       	ldd	r22, Y+11	; 0x0b
    1062:	7c 85       	ldd	r23, Y+12	; 0x0c
    1064:	8d 85       	ldd	r24, Y+13	; 0x0d
    1066:	9e 85       	ldd	r25, Y+14	; 0x0e
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e2       	ldi	r20, 0x20	; 32
    106e:	51 e4       	ldi	r21, 0x41	; 65
    1070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <HLCD_voidInit+0x40a>
    108a:	88 ec       	ldi	r24, 0xC8	; 200
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9c 83       	std	Y+4, r25	; 0x04
    1090:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	9c 81       	ldd	r25, Y+4	; 0x04
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <HLCD_voidInit+0x3f8>
    109a:	9c 83       	std	Y+4, r25	; 0x04
    109c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	9e 83       	std	Y+6, r25	; 0x06
    10a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	9e 81       	ldd	r25, Y+6	; 0x06
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	69 f7       	brne	.-38     	; 0x108a <HLCD_voidInit+0x3ec>
    10b0:	14 c0       	rjmp	.+40     	; 0x10da <HLCD_voidInit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b2:	6f 81       	ldd	r22, Y+7	; 0x07
    10b4:	78 85       	ldd	r23, Y+8	; 0x08
    10b6:	89 85       	ldd	r24, Y+9	; 0x09
    10b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	9e 83       	std	Y+6, r25	; 0x06
    10c4:	8d 83       	std	Y+5, r24	; 0x05
    10c6:	8d 81       	ldd	r24, Y+5	; 0x05
    10c8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <HLCD_voidInit+0x434>
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidSendCmd(0x06);
    10da:	86 e0       	ldi	r24, 0x06	; 6
    10dc:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
}
    10e0:	ee 96       	adiw	r28, 0x3e	; 62
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <HLCD_voidSendChar>:
void HLCD_voidSendChar(char ARG_u8Data)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	e9 97       	sbiw	r28, 0x39	; 57
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	89 af       	std	Y+57, r24	; 0x39
	/*control preparation*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,MDIO_HIGH);
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	42 e0       	ldi	r20, 0x02	; 2
    110e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <MDIO_stderrorSetPinValue>
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,MDIO_LOW);
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	62 e0       	ldi	r22, 0x02	; 2
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <MDIO_stderrorSetPinValue>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a0 e8       	ldi	r26, 0x80	; 128
    1122:	bf e3       	ldi	r27, 0x3F	; 63
    1124:	8d ab       	std	Y+53, r24	; 0x35
    1126:	9e ab       	std	Y+54, r25	; 0x36
    1128:	af ab       	std	Y+55, r26	; 0x37
    112a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	6d a9       	ldd	r22, Y+53	; 0x35
    112e:	7e a9       	ldd	r23, Y+54	; 0x36
    1130:	8f a9       	ldd	r24, Y+55	; 0x37
    1132:	98 ad       	ldd	r25, Y+56	; 0x38
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	89 ab       	std	Y+49, r24	; 0x31
    1146:	9a ab       	std	Y+50, r25	; 0x32
    1148:	ab ab       	std	Y+51, r26	; 0x33
    114a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    114c:	69 a9       	ldd	r22, Y+49	; 0x31
    114e:	7a a9       	ldd	r23, Y+50	; 0x32
    1150:	8b a9       	ldd	r24, Y+51	; 0x33
    1152:	9c a9       	ldd	r25, Y+52	; 0x34
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	2c f4       	brge	.+10     	; 0x116e <HLCD_voidSendChar+0x7c>
		__ticks = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	98 ab       	std	Y+48, r25	; 0x30
    116a:	8f a7       	std	Y+47, r24	; 0x2f
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <HLCD_voidSendChar+0xfa>
	else if (__tmp > 65535)
    116e:	69 a9       	ldd	r22, Y+49	; 0x31
    1170:	7a a9       	ldd	r23, Y+50	; 0x32
    1172:	8b a9       	ldd	r24, Y+51	; 0x33
    1174:	9c a9       	ldd	r25, Y+52	; 0x34
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	4f e7       	ldi	r20, 0x7F	; 127
    117c:	57 e4       	ldi	r21, 0x47	; 71
    117e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1182:	18 16       	cp	r1, r24
    1184:	4c f5       	brge	.+82     	; 0x11d8 <HLCD_voidSendChar+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	6d a9       	ldd	r22, Y+53	; 0x35
    1188:	7e a9       	ldd	r23, Y+54	; 0x36
    118a:	8f a9       	ldd	r24, Y+55	; 0x37
    118c:	98 ad       	ldd	r25, Y+56	; 0x38
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	98 ab       	std	Y+48, r25	; 0x30
    11ac:	8f a7       	std	Y+47, r24	; 0x2f
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <HLCD_voidSendChar+0xdc>
    11b0:	88 ec       	ldi	r24, 0xC8	; 200
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9e a7       	std	Y+46, r25	; 0x2e
    11b6:	8d a7       	std	Y+45, r24	; 0x2d
    11b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    11ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <HLCD_voidSendChar+0xca>
    11c0:	9e a7       	std	Y+46, r25	; 0x2e
    11c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c6:	98 a9       	ldd	r25, Y+48	; 0x30
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	98 ab       	std	Y+48, r25	; 0x30
    11cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d0:	98 a9       	ldd	r25, Y+48	; 0x30
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f7       	brne	.-38     	; 0x11b0 <HLCD_voidSendChar+0xbe>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <HLCD_voidSendChar+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	69 a9       	ldd	r22, Y+49	; 0x31
    11da:	7a a9       	ldd	r23, Y+50	; 0x32
    11dc:	8b a9       	ldd	r24, Y+51	; 0x33
    11de:	9c a9       	ldd	r25, Y+52	; 0x34
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	98 ab       	std	Y+48, r25	; 0x30
    11ea:	8f a7       	std	Y+47, r24	; 0x2f
    11ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ee:	98 a9       	ldd	r25, Y+48	; 0x30
    11f0:	9c a7       	std	Y+44, r25	; 0x2c
    11f2:	8b a7       	std	Y+43, r24	; 0x2b
    11f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    11f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <HLCD_voidSendChar+0x106>
    11fc:	9c a7       	std	Y+44, r25	; 0x2c
    11fe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/*enable preparation & send Data*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_HIGH);
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	63 e0       	ldi	r22, 0x03	; 3
    1204:	42 e0       	ldi	r20, 0x02	; 2
    1206:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <MDIO_stderrorSetPinValue>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 e8       	ldi	r26, 0x80	; 128
    1210:	bf e3       	ldi	r27, 0x3F	; 63
    1212:	8f a3       	std	Y+39, r24	; 0x27
    1214:	98 a7       	std	Y+40, r25	; 0x28
    1216:	a9 a7       	std	Y+41, r26	; 0x29
    1218:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121a:	6f a1       	ldd	r22, Y+39	; 0x27
    121c:	78 a5       	ldd	r23, Y+40	; 0x28
    121e:	89 a5       	ldd	r24, Y+41	; 0x29
    1220:	9a a5       	ldd	r25, Y+42	; 0x2a
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a ef       	ldi	r20, 0xFA	; 250
    1228:	54 e4       	ldi	r21, 0x44	; 68
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8b a3       	std	Y+35, r24	; 0x23
    1234:	9c a3       	std	Y+36, r25	; 0x24
    1236:	ad a3       	std	Y+37, r26	; 0x25
    1238:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    123a:	6b a1       	ldd	r22, Y+35	; 0x23
    123c:	7c a1       	ldd	r23, Y+36	; 0x24
    123e:	8d a1       	ldd	r24, Y+37	; 0x25
    1240:	9e a1       	ldd	r25, Y+38	; 0x26
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <HLCD_voidSendChar+0x16a>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9a a3       	std	Y+34, r25	; 0x22
    1258:	89 a3       	std	Y+33, r24	; 0x21
    125a:	3f c0       	rjmp	.+126    	; 0x12da <HLCD_voidSendChar+0x1e8>
	else if (__tmp > 65535)
    125c:	6b a1       	ldd	r22, Y+35	; 0x23
    125e:	7c a1       	ldd	r23, Y+36	; 0x24
    1260:	8d a1       	ldd	r24, Y+37	; 0x25
    1262:	9e a1       	ldd	r25, Y+38	; 0x26
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <HLCD_voidSendChar+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	6f a1       	ldd	r22, Y+39	; 0x27
    1276:	78 a5       	ldd	r23, Y+40	; 0x28
    1278:	89 a5       	ldd	r24, Y+41	; 0x29
    127a:	9a a5       	ldd	r25, Y+42	; 0x2a
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9a a3       	std	Y+34, r25	; 0x22
    129a:	89 a3       	std	Y+33, r24	; 0x21
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <HLCD_voidSendChar+0x1ca>
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	98 a3       	std	Y+32, r25	; 0x20
    12a4:	8f 8f       	std	Y+31, r24	; 0x1f
    12a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12a8:	98 a1       	ldd	r25, Y+32	; 0x20
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <HLCD_voidSendChar+0x1b8>
    12ae:	98 a3       	std	Y+32, r25	; 0x20
    12b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	89 a1       	ldd	r24, Y+33	; 0x21
    12b4:	9a a1       	ldd	r25, Y+34	; 0x22
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9a a3       	std	Y+34, r25	; 0x22
    12ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	89 a1       	ldd	r24, Y+33	; 0x21
    12be:	9a a1       	ldd	r25, Y+34	; 0x22
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f7       	brne	.-38     	; 0x129e <HLCD_voidSendChar+0x1ac>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <HLCD_voidSendChar+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6b a1       	ldd	r22, Y+35	; 0x23
    12c8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ca:	8d a1       	ldd	r24, Y+37	; 0x25
    12cc:	9e a1       	ldd	r25, Y+38	; 0x26
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9a a3       	std	Y+34, r25	; 0x22
    12d8:	89 a3       	std	Y+33, r24	; 0x21
    12da:	89 a1       	ldd	r24, Y+33	; 0x21
    12dc:	9a a1       	ldd	r25, Y+34	; 0x22
    12de:	9e 8f       	std	Y+30, r25	; 0x1e
    12e0:	8d 8f       	std	Y+29, r24	; 0x1d
    12e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <HLCD_voidSendChar+0x1f4>
    12ea:	9e 8f       	std	Y+30, r25	; 0x1e
    12ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MDIO_stderrorSetPortValue(LCD_DATA_PORT,ARG_u8Data);
    12ee:	84 e0       	ldi	r24, 0x04	; 4
    12f0:	69 ad       	ldd	r22, Y+57	; 0x39
    12f2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <MDIO_stderrorSetPortValue>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a0 e8       	ldi	r26, 0x80	; 128
    12fc:	bf e3       	ldi	r27, 0x3F	; 63
    12fe:	89 8f       	std	Y+25, r24	; 0x19
    1300:	9a 8f       	std	Y+26, r25	; 0x1a
    1302:	ab 8f       	std	Y+27, r26	; 0x1b
    1304:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1306:	69 8d       	ldd	r22, Y+25	; 0x19
    1308:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    130c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	4a ef       	ldi	r20, 0xFA	; 250
    1314:	54 e4       	ldi	r21, 0x44	; 68
    1316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	8d 8b       	std	Y+21, r24	; 0x15
    1320:	9e 8b       	std	Y+22, r25	; 0x16
    1322:	af 8b       	std	Y+23, r26	; 0x17
    1324:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1326:	6d 89       	ldd	r22, Y+21	; 0x15
    1328:	7e 89       	ldd	r23, Y+22	; 0x16
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e8       	ldi	r20, 0x80	; 128
    1334:	5f e3       	ldi	r21, 0x3F	; 63
    1336:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    133a:	88 23       	and	r24, r24
    133c:	2c f4       	brge	.+10     	; 0x1348 <HLCD_voidSendChar+0x256>
		__ticks = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9c 8b       	std	Y+20, r25	; 0x14
    1344:	8b 8b       	std	Y+19, r24	; 0x13
    1346:	3f c0       	rjmp	.+126    	; 0x13c6 <HLCD_voidSendChar+0x2d4>
	else if (__tmp > 65535)
    1348:	6d 89       	ldd	r22, Y+21	; 0x15
    134a:	7e 89       	ldd	r23, Y+22	; 0x16
    134c:	8f 89       	ldd	r24, Y+23	; 0x17
    134e:	98 8d       	ldd	r25, Y+24	; 0x18
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    135c:	18 16       	cp	r1, r24
    135e:	4c f5       	brge	.+82     	; 0x13b2 <HLCD_voidSendChar+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1360:	69 8d       	ldd	r22, Y+25	; 0x19
    1362:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1366:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e2       	ldi	r20, 0x20	; 32
    136e:	51 e4       	ldi	r21, 0x41	; 65
    1370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	9c 8b       	std	Y+20, r25	; 0x14
    1386:	8b 8b       	std	Y+19, r24	; 0x13
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <HLCD_voidSendChar+0x2b6>
    138a:	88 ec       	ldi	r24, 0xC8	; 200
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9a 8b       	std	Y+18, r25	; 0x12
    1390:	89 8b       	std	Y+17, r24	; 0x11
    1392:	89 89       	ldd	r24, Y+17	; 0x11
    1394:	9a 89       	ldd	r25, Y+18	; 0x12
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <HLCD_voidSendChar+0x2a4>
    139a:	9a 8b       	std	Y+18, r25	; 0x12
    139c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139e:	8b 89       	ldd	r24, Y+19	; 0x13
    13a0:	9c 89       	ldd	r25, Y+20	; 0x14
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	9c 8b       	std	Y+20, r25	; 0x14
    13a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a8:	8b 89       	ldd	r24, Y+19	; 0x13
    13aa:	9c 89       	ldd	r25, Y+20	; 0x14
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	69 f7       	brne	.-38     	; 0x138a <HLCD_voidSendChar+0x298>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <HLCD_voidSendChar+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b2:	6d 89       	ldd	r22, Y+21	; 0x15
    13b4:	7e 89       	ldd	r23, Y+22	; 0x16
    13b6:	8f 89       	ldd	r24, Y+23	; 0x17
    13b8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9c 8b       	std	Y+20, r25	; 0x14
    13c4:	8b 8b       	std	Y+19, r24	; 0x13
    13c6:	8b 89       	ldd	r24, Y+19	; 0x13
    13c8:	9c 89       	ldd	r25, Y+20	; 0x14
    13ca:	98 8b       	std	Y+16, r25	; 0x10
    13cc:	8f 87       	std	Y+15, r24	; 0x0f
    13ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d0:	98 89       	ldd	r25, Y+16	; 0x10
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <HLCD_voidSendChar+0x2e0>
    13d6:	98 8b       	std	Y+16, r25	; 0x10
    13d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_LOW);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	63 e0       	ldi	r22, 0x03	; 3
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <MDIO_stderrorSetPinValue>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 e0       	ldi	r26, 0x00	; 0
    13ea:	b0 e4       	ldi	r27, 0x40	; 64
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
    13ee:	9c 87       	std	Y+12, r25	; 0x0c
    13f0:	ad 87       	std	Y+13, r26	; 0x0d
    13f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a ef       	ldi	r20, 0xFA	; 250
    1402:	54 e4       	ldi	r21, 0x44	; 68
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8f 83       	std	Y+7, r24	; 0x07
    140e:	98 87       	std	Y+8, r25	; 0x08
    1410:	a9 87       	std	Y+9, r26	; 0x09
    1412:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <HLCD_voidSendChar+0x344>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <HLCD_voidSendChar+0x3c2>
	else if (__tmp > 65535)
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <HLCD_voidSendChar+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1450:	7c 85       	ldd	r23, Y+12	; 0x0c
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <HLCD_voidSendChar+0x3a4>
    1478:	88 ec       	ldi	r24, 0xC8	; 200
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <HLCD_voidSendChar+0x392>
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <HLCD_voidSendChar+0x386>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <HLCD_voidSendChar+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <HLCD_voidSendChar+0x3ce>
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    14c8:	e9 96       	adiw	r28, 0x39	; 57
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <HLCD_voidSendCmd>:

void HLCD_voidSendCmd(u8 ARG_u8Cmd)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	6d 97       	sbiw	r28, 0x1d	; 29
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	8d 8f       	std	Y+29, r24	; 0x1d
	/*control preparation*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,MDIO_LOW);
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <MDIO_stderrorSetPinValue>
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,MDIO_LOW);
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	62 e0       	ldi	r22, 0x02	; 2
    14fe:	41 e0       	ldi	r20, 0x01	; 1
    1500:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <MDIO_stderrorSetPinValue>

	/*enable preparation & send cmd*/
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_HIGH);
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	63 e0       	ldi	r22, 0x03	; 3
    1508:	42 e0       	ldi	r20, 0x02	; 2
    150a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <MDIO_stderrorSetPinValue>
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e8       	ldi	r26, 0x80	; 128
    1514:	bf e3       	ldi	r27, 0x3F	; 63
    1516:	89 8f       	std	Y+25, r24	; 0x19
    1518:	9a 8f       	std	Y+26, r25	; 0x1a
    151a:	ab 8f       	std	Y+27, r26	; 0x1b
    151c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151e:	69 8d       	ldd	r22, Y+25	; 0x19
    1520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	4a ef       	ldi	r20, 0xFA	; 250
    152c:	54 e4       	ldi	r21, 0x44	; 68
    152e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	8d 8b       	std	Y+21, r24	; 0x15
    1538:	9e 8b       	std	Y+22, r25	; 0x16
    153a:	af 8b       	std	Y+23, r26	; 0x17
    153c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    153e:	6d 89       	ldd	r22, Y+21	; 0x15
    1540:	7e 89       	ldd	r23, Y+22	; 0x16
    1542:	8f 89       	ldd	r24, Y+23	; 0x17
    1544:	98 8d       	ldd	r25, Y+24	; 0x18
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e8       	ldi	r20, 0x80	; 128
    154c:	5f e3       	ldi	r21, 0x3F	; 63
    154e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1552:	88 23       	and	r24, r24
    1554:	2c f4       	brge	.+10     	; 0x1560 <HLCD_voidSendCmd+0x86>
		__ticks = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9c 8b       	std	Y+20, r25	; 0x14
    155c:	8b 8b       	std	Y+19, r24	; 0x13
    155e:	3f c0       	rjmp	.+126    	; 0x15de <HLCD_voidSendCmd+0x104>
	else if (__tmp > 65535)
    1560:	6d 89       	ldd	r22, Y+21	; 0x15
    1562:	7e 89       	ldd	r23, Y+22	; 0x16
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	3f ef       	ldi	r19, 0xFF	; 255
    156c:	4f e7       	ldi	r20, 0x7F	; 127
    156e:	57 e4       	ldi	r21, 0x47	; 71
    1570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1574:	18 16       	cp	r1, r24
    1576:	4c f5       	brge	.+82     	; 0x15ca <HLCD_voidSendCmd+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1578:	69 8d       	ldd	r22, Y+25	; 0x19
    157a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e2       	ldi	r20, 0x20	; 32
    1586:	51 e4       	ldi	r21, 0x41	; 65
    1588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9c 8b       	std	Y+20, r25	; 0x14
    159e:	8b 8b       	std	Y+19, r24	; 0x13
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <HLCD_voidSendCmd+0xe6>
    15a2:	88 ec       	ldi	r24, 0xC8	; 200
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9a 8b       	std	Y+18, r25	; 0x12
    15a8:	89 8b       	std	Y+17, r24	; 0x11
    15aa:	89 89       	ldd	r24, Y+17	; 0x11
    15ac:	9a 89       	ldd	r25, Y+18	; 0x12
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <HLCD_voidSendCmd+0xd4>
    15b2:	9a 8b       	std	Y+18, r25	; 0x12
    15b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b6:	8b 89       	ldd	r24, Y+19	; 0x13
    15b8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	9c 8b       	std	Y+20, r25	; 0x14
    15be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c0:	8b 89       	ldd	r24, Y+19	; 0x13
    15c2:	9c 89       	ldd	r25, Y+20	; 0x14
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	69 f7       	brne	.-38     	; 0x15a2 <HLCD_voidSendCmd+0xc8>
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <HLCD_voidSendCmd+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ca:	6d 89       	ldd	r22, Y+21	; 0x15
    15cc:	7e 89       	ldd	r23, Y+22	; 0x16
    15ce:	8f 89       	ldd	r24, Y+23	; 0x17
    15d0:	98 8d       	ldd	r25, Y+24	; 0x18
    15d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	9c 8b       	std	Y+20, r25	; 0x14
    15dc:	8b 8b       	std	Y+19, r24	; 0x13
    15de:	8b 89       	ldd	r24, Y+19	; 0x13
    15e0:	9c 89       	ldd	r25, Y+20	; 0x14
    15e2:	98 8b       	std	Y+16, r25	; 0x10
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
    15e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e8:	98 89       	ldd	r25, Y+16	; 0x10
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <HLCD_voidSendCmd+0x110>
    15ee:	98 8b       	std	Y+16, r25	; 0x10
    15f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_stderrorSetPortValue(LCD_DATA_PORT,ARG_u8Cmd);
    15f2:	84 e0       	ldi	r24, 0x04	; 4
    15f4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15f6:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <MDIO_stderrorSetPortValue>
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a0 e8       	ldi	r26, 0x80	; 128
    1600:	bf e3       	ldi	r27, 0x3F	; 63
    1602:	8b 87       	std	Y+11, r24	; 0x0b
    1604:	9c 87       	std	Y+12, r25	; 0x0c
    1606:	ad 87       	std	Y+13, r26	; 0x0d
    1608:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160a:	6b 85       	ldd	r22, Y+11	; 0x0b
    160c:	7c 85       	ldd	r23, Y+12	; 0x0c
    160e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1610:	9e 85       	ldd	r25, Y+14	; 0x0e
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	4a ef       	ldi	r20, 0xFA	; 250
    1618:	54 e4       	ldi	r21, 0x44	; 68
    161a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	8f 83       	std	Y+7, r24	; 0x07
    1624:	98 87       	std	Y+8, r25	; 0x08
    1626:	a9 87       	std	Y+9, r26	; 0x09
    1628:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    162a:	6f 81       	ldd	r22, Y+7	; 0x07
    162c:	78 85       	ldd	r23, Y+8	; 0x08
    162e:	89 85       	ldd	r24, Y+9	; 0x09
    1630:	9a 85       	ldd	r25, Y+10	; 0x0a
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e8       	ldi	r20, 0x80	; 128
    1638:	5f e3       	ldi	r21, 0x3F	; 63
    163a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    163e:	88 23       	and	r24, r24
    1640:	2c f4       	brge	.+10     	; 0x164c <HLCD_voidSendCmd+0x172>
		__ticks = 1;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	3f c0       	rjmp	.+126    	; 0x16ca <HLCD_voidSendCmd+0x1f0>
	else if (__tmp > 65535)
    164c:	6f 81       	ldd	r22, Y+7	; 0x07
    164e:	78 85       	ldd	r23, Y+8	; 0x08
    1650:	89 85       	ldd	r24, Y+9	; 0x09
    1652:	9a 85       	ldd	r25, Y+10	; 0x0a
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	4f e7       	ldi	r20, 0x7F	; 127
    165a:	57 e4       	ldi	r21, 0x47	; 71
    165c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1660:	18 16       	cp	r1, r24
    1662:	4c f5       	brge	.+82     	; 0x16b6 <HLCD_voidSendCmd+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1664:	6b 85       	ldd	r22, Y+11	; 0x0b
    1666:	7c 85       	ldd	r23, Y+12	; 0x0c
    1668:	8d 85       	ldd	r24, Y+13	; 0x0d
    166a:	9e 85       	ldd	r25, Y+14	; 0x0e
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e2       	ldi	r20, 0x20	; 32
    1672:	51 e4       	ldi	r21, 0x41	; 65
    1674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	bc 01       	movw	r22, r24
    167e:	cd 01       	movw	r24, r26
    1680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <HLCD_voidSendCmd+0x1d2>
    168e:	88 ec       	ldi	r24, 0xC8	; 200
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	8b 83       	std	Y+3, r24	; 0x03
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	f1 f7       	brne	.-4      	; 0x169a <HLCD_voidSendCmd+0x1c0>
    169e:	9c 83       	std	Y+4, r25	; 0x04
    16a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	9e 83       	std	Y+6, r25	; 0x06
    16aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	9e 81       	ldd	r25, Y+6	; 0x06
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	69 f7       	brne	.-38     	; 0x168e <HLCD_voidSendCmd+0x1b4>
    16b4:	14 c0       	rjmp	.+40     	; 0x16de <HLCD_voidSendCmd+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b6:	6f 81       	ldd	r22, Y+7	; 0x07
    16b8:	78 85       	ldd	r23, Y+8	; 0x08
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9e 83       	std	Y+6, r25	; 0x06
    16c8:	8d 83       	std	Y+5, r24	; 0x05
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <HLCD_voidSendCmd+0x1fc>
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_stderrorSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,MDIO_LOW);
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	63 e0       	ldi	r22, 0x03	; 3
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <MDIO_stderrorSetPinValue>

}
    16e8:	6d 96       	adiw	r28, 0x1d	; 29
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <HLCD_voidSendString>:
void HLCD_voidSendString(const char * ARG_ccharpString)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <HLCD_voidSendString+0x6>
    1700:	0f 92       	push	r0
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	9b 83       	std	Y+3, r25	; 0x03
    1708:	8a 83       	std	Y+2, r24	; 0x02
	if(ARG_ccharpString != NULL_POINTER )
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	d1 f0       	breq	.+52     	; 0x1746 <HLCD_voidSendString+0x4c>
	{
		u8 L_u8i=0;
    1712:	19 82       	std	Y+1, r1	; 0x01
		do{
			HLCD_voidSendChar(ARG_ccharpString[L_u8i]);
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	fc 01       	movw	r30, r24
    1720:	e2 0f       	add	r30, r18
    1722:	f3 1f       	adc	r31, r19
    1724:	80 81       	ld	r24, Z
    1726:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_voidSendChar>
			L_u8i++;
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	8f 5f       	subi	r24, 0xFF	; 255
    172e:	89 83       	std	Y+1, r24	; 0x01
		}while(ARG_ccharpString[L_u8i] != '\0' );
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	fc 01       	movw	r30, r24
    173c:	e2 0f       	add	r30, r18
    173e:	f3 1f       	adc	r31, r19
    1740:	80 81       	ld	r24, Z
    1742:	88 23       	and	r24, r24
    1744:	39 f7       	brne	.-50     	; 0x1714 <HLCD_voidSendString+0x1a>
	}

}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <HLCD_voidSetCursor>:
void HLCD_voidSetCursor(u8 ARG_u8Row,u8 ARG_u8Col)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <HLCD_voidSetCursor+0x6>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	6a 83       	std	Y+2, r22	; 0x02

	HLCD_voidSendCmd((0x80+ARG_u8Col+((ARG_u8Row*4)<<4)));
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	98 2f       	mov	r25, r24
    1770:	92 95       	swap	r25
    1772:	90 7f       	andi	r25, 0xF0	; 240
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	89 0f       	add	r24, r25
    1778:	80 58       	subi	r24, 0x80	; 128
    177a:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <HLCD_voidWriteCustom>:
void HLCD_voidWriteCustom(const char * ARG_ccharpString,u8 ARG_u8Location)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <HLCD_voidWriteCustom+0x6>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <HLCD_voidWriteCustom+0x8>
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	9c 83       	std	Y+4, r25	; 0x04
    1798:	8b 83       	std	Y+3, r24	; 0x03
    179a:	6d 83       	std	Y+5, r22	; 0x05
	u8 L_u8address =0;
    179c:	1a 82       	std	Y+2, r1	; 0x02


	if(ARG_u8Location<8)
    179e:	8d 81       	ldd	r24, Y+5	; 0x05
    17a0:	88 30       	cpi	r24, 0x08	; 8
    17a2:	30 f5       	brcc	.+76     	; 0x17f0 <HLCD_voidWriteCustom+0x68>
	{
		L_u8address=ARG_u8Location*8;
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	8a 83       	std	Y+2, r24	; 0x02
		/*0-1-D5-D4-D3-D2-D1-D0 TO GO TO CGRAM D5-D0 LOCATION 0-7*/
		SET_BIT(L_u8address,6);
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	80 64       	ori	r24, 0x40	; 64
    17bc:	8a 83       	std	Y+2, r24	; 0x02
		HLCD_voidSendCmd(L_u8address);
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
		u8 L_u8i;
		for(L_u8i=0;L_u8i<8;L_u8i++)
    17c4:	19 82       	std	Y+1, r1	; 0x01
    17c6:	0e c0       	rjmp	.+28     	; 0x17e4 <HLCD_voidWriteCustom+0x5c>
		{
			HLCD_voidSendChar(ARG_ccharpString[L_u8i]);
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	fc 01       	movw	r30, r24
    17d4:	e2 0f       	add	r30, r18
    17d6:	f3 1f       	adc	r31, r19
    17d8:	80 81       	ld	r24, Z
    17da:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_voidSendChar>
		L_u8address=ARG_u8Location*8;
		/*0-1-D5-D4-D3-D2-D1-D0 TO GO TO CGRAM D5-D0 LOCATION 0-7*/
		SET_BIT(L_u8address,6);
		HLCD_voidSendCmd(L_u8address);
		u8 L_u8i;
		for(L_u8i=0;L_u8i<8;L_u8i++)
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	88 30       	cpi	r24, 0x08	; 8
    17e8:	78 f3       	brcs	.-34     	; 0x17c8 <HLCD_voidWriteCustom+0x40>
		{
			HLCD_voidSendChar(ARG_ccharpString[L_u8i]);
		}
		HLCD_voidSendCmd(0x02);/*return home*/
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
	{


	}

}
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCmd(0x01);//clear
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
}
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <HLCD_voidDisplayNumber>:



void HLCD_voidDisplayNumber(u8 ARG_u8Num)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	66 97       	sbiw	r28, 0x16	; 22
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	8e 8b       	std	Y+22, r24	; 0x16
	/* String to hold the ascii result */
	char Result[21];
	/* 10 for decimal */
	itoa((int)ARG_u8Num,Result,10);
    182a:	8e 89       	ldd	r24, Y+22	; 0x16
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	9e 01       	movw	r18, r28
    1832:	2f 5f       	subi	r18, 0xFF	; 255
    1834:	3f 4f       	sbci	r19, 0xFF	; 255
    1836:	b9 01       	movw	r22, r18
    1838:	4a e0       	ldi	r20, 0x0A	; 10
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	0e 94 37 1a 	call	0x346e	; 0x346e <itoa>
	HLCD_voidSendString(Result);
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <HLCD_voidSendString>
}
    1848:	66 96       	adiw	r28, 0x16	; 22
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <HNVM_stderrInit>:
#include "HNVM_private.h"
#include "HNVM_interface.h"


STD_error_t HNVM_stderrInit(void)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	0f 92       	push	r0
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
	STD_error_t L_stderrStat = E_OK ;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	89 83       	std	Y+1, r24	; 0x01
	L_stderrStat = MTWI_stderrInit(HNVM_BIT_RATE ,HNVM_PRESCALAR);
    1868:	60 e5       	ldi	r22, 0x50	; 80
    186a:	73 ec       	ldi	r23, 0xC3	; 195
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	43 e0       	ldi	r20, 0x03	; 3
    1872:	0e 94 c8 11 	call	0x2390	; 0x2390 <MTWI_stderrInit>
    1876:	89 83       	std	Y+1, r24	; 0x01
	MTWI_voidEnable();
    1878:	0e 94 8d 12 	call	0x251a	; 0x251a <MTWI_voidEnable>
	return L_stderrStat ;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
}
    187e:	0f 90       	pop	r0
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <HNVM_voidWrite>:

void HNVM_voidWrite(u16 ARG_u16Address , u8 ARG_u8Data)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <HNVM_voidWrite+0x6>
    188c:	00 d0       	rcall	.+0      	; 0x188e <HNVM_voidWrite+0x8>
    188e:	0f 92       	push	r0
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9c 83       	std	Y+4, r25	; 0x04
    1896:	8b 83       	std	Y+3, r24	; 0x03
    1898:	6d 83       	std	Y+5, r22	; 0x05
	u8 L_u8SlaveAddress , L_u8Block ;
	L_u8Block = ARG_u16Address >> 8 ; /* */
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	89 2f       	mov	r24, r25
    18a0:	99 27       	eor	r25, r25
    18a2:	89 83       	std	Y+1, r24	; 0x01
	L_u8SlaveAddress = (0b1010000) | (L_u8Block) ;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	80 65       	ori	r24, 0x50	; 80
    18a8:	8a 83       	std	Y+2, r24	; 0x02
	MTWI_voidStartCondition();
    18aa:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <MTWI_voidStartCondition>
	MTWI_voidFlagPolly();
    18ae:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
	if(MTWI_twistatusCheckStatus()== MTWI_STATUS_MASTER_START_CONDITION )
    18b2:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    18b6:	88 30       	cpi	r24, 0x08	; 8
    18b8:	71 f5       	brne	.+92     	; 0x1916 <HNVM_voidWrite+0x90>
	{
		MTWI_voidLoadTWDR(((L_u8SlaveAddress << 1) & (0xFE))|(0));
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0e 94 75 13 	call	0x26ea	; 0x26ea <MTWI_voidLoadTWDR>
		MTWI_voidClearFlag();
    18c8:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
		MTWI_voidFlagPolly();
    18cc:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
		if(MTWI_STATUS_MASTER_TX_SLA_W_ACK == MTWI_twistatusCheckStatus())
    18d0:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    18d4:	88 31       	cpi	r24, 0x18	; 24
    18d6:	c9 f4       	brne	.+50     	; 0x190a <HNVM_voidWrite+0x84>
		{
			MTWI_voidLoadTWDR((u8)ARG_u16Address);
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	0e 94 75 13 	call	0x26ea	; 0x26ea <MTWI_voidLoadTWDR>
			MTWI_voidClearFlag();
    18de:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
			MTWI_voidFlagPolly();
    18e2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
			
			if(MTWI_STATUS_MASTER_TX_DATA_ACK == MTWI_twistatusCheckStatus())
    18e6:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    18ea:	88 32       	cpi	r24, 0x28	; 40
    18ec:	a1 f4       	brne	.+40     	; 0x1916 <HNVM_voidWrite+0x90>
			{
				MTWI_voidLoadTWDR(ARG_u8Data);
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	0e 94 75 13 	call	0x26ea	; 0x26ea <MTWI_voidLoadTWDR>
				MTWI_voidClearFlag();
    18f4:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
				MTWI_voidFlagPolly();
    18f8:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
				if(MTWI_STATUS_MASTER_TX_DATA_ACK == MTWI_twistatusCheckStatus())
    18fc:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    1900:	88 32       	cpi	r24, 0x28	; 40
    1902:	49 f4       	brne	.+18     	; 0x1916 <HNVM_voidWrite+0x90>
				{
					MTWI_voidStopCondition();
    1904:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <MTWI_voidStopCondition>
    1908:	06 c0       	rjmp	.+12     	; 0x1916 <HNVM_voidWrite+0x90>
				}
			}
		}
		else if(MTWI_STATUS_MASTER_TX_SLA_W_NACK ==  MTWI_twistatusCheckStatus())
    190a:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    190e:	80 32       	cpi	r24, 0x20	; 32
    1910:	11 f4       	brne	.+4      	; 0x1916 <HNVM_voidWrite+0x90>
		{
			MTWI_voidStopCondition();
    1912:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <MTWI_voidStopCondition>
		}
	}
	
	
}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <HNVM_u8Read>:

u8 	HNVM_u8Read(u16 ARG_u16Address)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <HNVM_u8Read+0x6>
    192c:	00 d0       	rcall	.+0      	; 0x192e <HNVM_u8Read+0x8>
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	9d 83       	std	Y+5, r25	; 0x05
    1936:	8c 83       	std	Y+4, r24	; 0x04
	u8 L_u8SlaveAddress , L_u8Block  , L_u8Data;
	L_u8Block = ARG_u16Address >> 8 ; /* */
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	9d 81       	ldd	r25, Y+5	; 0x05
    193c:	89 2f       	mov	r24, r25
    193e:	99 27       	eor	r25, r25
    1940:	8a 83       	std	Y+2, r24	; 0x02
	L_u8SlaveAddress = (0b1010000) | (L_u8Block) ;
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	80 65       	ori	r24, 0x50	; 80
    1946:	8b 83       	std	Y+3, r24	; 0x03
	MTWI_voidStartCondition();
    1948:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <MTWI_voidStartCondition>
	MTWI_voidFlagPolly();
    194c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
	if(MTWI_twistatusCheckStatus()== MTWI_STATUS_MASTER_START_CONDITION )
    1950:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    1954:	88 30       	cpi	r24, 0x08	; 8
    1956:	09 f0       	breq	.+2      	; 0x195a <HNVM_u8Read+0x34>
    1958:	3f c0       	rjmp	.+126    	; 0x19d8 <HNVM_u8Read+0xb2>
	{
		MTWI_voidLoadTWDR(((L_u8SlaveAddress << 1) & (0xFE))|(0));
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	0e 94 75 13 	call	0x26ea	; 0x26ea <MTWI_voidLoadTWDR>
		MTWI_voidClearFlag();
    1968:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
		MTWI_voidFlagPolly();
    196c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
		if(MTWI_STATUS_MASTER_TX_SLA_W_ACK == MTWI_twistatusCheckStatus())
    1970:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    1974:	88 31       	cpi	r24, 0x18	; 24
    1976:	81 f5       	brne	.+96     	; 0x19d8 <HNVM_u8Read+0xb2>
		{
			MTWI_voidLoadTWDR((u8)ARG_u16Address);
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	0e 94 75 13 	call	0x26ea	; 0x26ea <MTWI_voidLoadTWDR>
			MTWI_voidClearFlag();
    197e:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
			MTWI_voidFlagPolly();
    1982:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
			if(MTWI_STATUS_MASTER_TX_DATA_ACK == MTWI_twistatusCheckStatus())
    1986:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    198a:	88 32       	cpi	r24, 0x28	; 40
    198c:	29 f5       	brne	.+74     	; 0x19d8 <HNVM_u8Read+0xb2>
			{
				MTWI_voidStartCondition();
    198e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <MTWI_voidStartCondition>
				MTWI_voidFlagPolly();
    1992:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
				if(MTWI_twistatusCheckStatus()== MTWI_STATUS_MASTER_RSTART_CONDITION )
    1996:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    199a:	80 31       	cpi	r24, 0x10	; 16
    199c:	e9 f4       	brne	.+58     	; 0x19d8 <HNVM_u8Read+0xb2>
				{
					MTWI_voidLoadTWDR(((L_u8SlaveAddress << 1) & (0xFE))|(1));
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	81 60       	ori	r24, 0x01	; 1
    19aa:	0e 94 75 13 	call	0x26ea	; 0x26ea <MTWI_voidLoadTWDR>
					MTWI_voidClearFlag();
    19ae:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
					MTWI_voidFlagPolly();
    19b2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
					if(MTWI_STATUS_MASTER_RX_SLA_R_ACK == MTWI_twistatusCheckStatus())
    19b6:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    19ba:	80 34       	cpi	r24, 0x40	; 64
    19bc:	69 f4       	brne	.+26     	; 0x19d8 <HNVM_u8Read+0xb2>
					{
						MTWI_voidClearFlag();
    19be:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
						MTWI_voidFlagPolly();
    19c2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
						if(MTWI_STATUS_MASTER_RX_DATA_NACK == MTWI_twistatusCheckStatus())
    19c6:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    19ca:	88 35       	cpi	r24, 0x58	; 88
    19cc:	29 f4       	brne	.+10     	; 0x19d8 <HNVM_u8Read+0xb2>
						{
							L_u8Data = MTWI_charReadTWDR();
    19ce:	0e 94 83 13 	call	0x2706	; 0x2706 <MTWI_charReadTWDR>
    19d2:	89 83       	std	Y+1, r24	; 0x01
							MTWI_voidStopCondition();
    19d4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <MTWI_voidStopCondition>
					}
				}
			}
		}
	}
	return L_u8Data ;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <MDIO_stderrorSetPortDirection>:
STD_error_t MDIO_stderrorSetPortDirection
(
	u8 ARG_u8Port,
	u8 ARG_u8Direction
)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <MDIO_stderrorSetPortDirection+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <MDIO_stderrorSetPortDirection+0x8>
    19f2:	0f 92       	push	r0
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	8a 83       	std	Y+2, r24	; 0x02
    19fa:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrorError=E_NOK;
    19fc:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3d 83       	std	Y+5, r19	; 0x05
    1a06:	2c 83       	std	Y+4, r18	; 0x04
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	91 05       	cpc	r25, r1
    1a10:	e9 f0       	breq	.+58     	; 0x1a4c <MDIO_stderrorSetPortDirection+0x62>
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	3d 81       	ldd	r19, Y+5	; 0x05
    1a16:	23 30       	cpi	r18, 0x03	; 3
    1a18:	31 05       	cpc	r19, r1
    1a1a:	34 f4       	brge	.+12     	; 0x1a28 <MDIO_stderrorSetPortDirection+0x3e>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	91 05       	cpc	r25, r1
    1a24:	61 f0       	breq	.+24     	; 0x1a3e <MDIO_stderrorSetPortDirection+0x54>
    1a26:	27 c0       	rjmp	.+78     	; 0x1a76 <MDIO_stderrorSetPortDirection+0x8c>
    1a28:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2c:	23 30       	cpi	r18, 0x03	; 3
    1a2e:	31 05       	cpc	r19, r1
    1a30:	a1 f0       	breq	.+40     	; 0x1a5a <MDIO_stderrorSetPortDirection+0x70>
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	9d 81       	ldd	r25, Y+5	; 0x05
    1a36:	84 30       	cpi	r24, 0x04	; 4
    1a38:	91 05       	cpc	r25, r1
    1a3a:	b1 f0       	breq	.+44     	; 0x1a68 <MDIO_stderrorSetPortDirection+0x7e>
    1a3c:	1c c0       	rjmp	.+56     	; 0x1a76 <MDIO_stderrorSetPortDirection+0x8c>
	{
		case MDIO_PORTA:GPIOA->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1a3e:	e9 e3       	ldi	r30, 0x39	; 57
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	81 83       	std	Z+1, r24	; 0x01
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	16 c0       	rjmp	.+44     	; 0x1a78 <MDIO_stderrorSetPortDirection+0x8e>
		case MDIO_PORTB:GPIOB->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1a4c:	e6 e3       	ldi	r30, 0x36	; 54
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	81 83       	std	Z+1, r24	; 0x01
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <MDIO_stderrorSetPortDirection+0x8e>
		case MDIO_PORTC:GPIOC->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1a5a:	e3 e3       	ldi	r30, 0x33	; 51
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	81 83       	std	Z+1, r24	; 0x01
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <MDIO_stderrorSetPortDirection+0x8e>
		case MDIO_PORTD:GPIOD->DDR = ARG_u8Direction;L_stderrorError = E_OK;break;
    1a68:	e0 e3       	ldi	r30, 0x30	; 48
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	81 83       	std	Z+1, r24	; 0x01
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <MDIO_stderrorSetPortDirection+0x8e>
		default:L_stderrorError = E_NOK;break;
    1a76:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <MDIO_stderrorSetPortValue>:
STD_error_t MDIO_stderrorSetPortValue
(
	u8 ARG_u8Port,
	u8 ARG_u8Value
)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <MDIO_stderrorSetPortValue+0x6>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <MDIO_stderrorSetPortValue+0x8>
    1a92:	0f 92       	push	r0
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	8a 83       	std	Y+2, r24	; 0x02
    1a9a:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrorError=E_NOK;
    1a9c:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	3d 83       	std	Y+5, r19	; 0x05
    1aa6:	2c 83       	std	Y+4, r18	; 0x04
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	91 05       	cpc	r25, r1
    1ab0:	e9 f0       	breq	.+58     	; 0x1aec <MDIO_stderrorSetPortValue+0x62>
    1ab2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab6:	23 30       	cpi	r18, 0x03	; 3
    1ab8:	31 05       	cpc	r19, r1
    1aba:	34 f4       	brge	.+12     	; 0x1ac8 <MDIO_stderrorSetPortValue+0x3e>
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	61 f0       	breq	.+24     	; 0x1ade <MDIO_stderrorSetPortValue+0x54>
    1ac6:	27 c0       	rjmp	.+78     	; 0x1b16 <MDIO_stderrorSetPortValue+0x8c>
    1ac8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aca:	3d 81       	ldd	r19, Y+5	; 0x05
    1acc:	23 30       	cpi	r18, 0x03	; 3
    1ace:	31 05       	cpc	r19, r1
    1ad0:	a1 f0       	breq	.+40     	; 0x1afa <MDIO_stderrorSetPortValue+0x70>
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	91 05       	cpc	r25, r1
    1ada:	b1 f0       	breq	.+44     	; 0x1b08 <MDIO_stderrorSetPortValue+0x7e>
    1adc:	1c c0       	rjmp	.+56     	; 0x1b16 <MDIO_stderrorSetPortValue+0x8c>
	{
		case MDIO_PORTA:GPIOA->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    1ade:	e9 e3       	ldi	r30, 0x39	; 57
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	82 83       	std	Z+2, r24	; 0x02
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	16 c0       	rjmp	.+44     	; 0x1b18 <MDIO_stderrorSetPortValue+0x8e>
		case MDIO_PORTB:GPIOB->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    1aec:	e6 e3       	ldi	r30, 0x36	; 54
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	82 83       	std	Z+2, r24	; 0x02
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <MDIO_stderrorSetPortValue+0x8e>
		case MDIO_PORTC:GPIOC->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    1afa:	e3 e3       	ldi	r30, 0x33	; 51
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	82 83       	std	Z+2, r24	; 0x02
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	08 c0       	rjmp	.+16     	; 0x1b18 <MDIO_stderrorSetPortValue+0x8e>
		case MDIO_PORTD:GPIOD->PORT = ARG_u8Value;L_stderrorError = E_OK;break;
    1b08:	e0 e3       	ldi	r30, 0x30	; 48
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	82 83       	std	Z+2, r24	; 0x02
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	01 c0       	rjmp	.+2      	; 0x1b18 <MDIO_stderrorSetPortValue+0x8e>
		default:L_stderrorError = E_NOK;break;
    1b16:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <MDIO_stderrorGetPortValue>:
STD_error_t MDIO_stderrorGetPortValue
(
	u8 ARG_u8Port,
	u8* ARG_pu8Value
)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <MDIO_stderrorGetPortValue+0x6>
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <MDIO_stderrorGetPortValue+0x8>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <MDIO_stderrorGetPortValue+0xa>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	8a 83       	std	Y+2, r24	; 0x02
    1b3a:	7c 83       	std	Y+4, r23	; 0x04
    1b3c:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrorError=E_NOK;
    1b3e:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	3e 83       	std	Y+6, r19	; 0x06
    1b48:	2d 83       	std	Y+5, r18	; 0x05
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	91 05       	cpc	r25, r1
    1b52:	f9 f0       	breq	.+62     	; 0x1b92 <MDIO_stderrorGetPortValue+0x68>
    1b54:	2d 81       	ldd	r18, Y+5	; 0x05
    1b56:	3e 81       	ldd	r19, Y+6	; 0x06
    1b58:	23 30       	cpi	r18, 0x03	; 3
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	34 f4       	brge	.+12     	; 0x1b6a <MDIO_stderrorGetPortValue+0x40>
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	91 05       	cpc	r25, r1
    1b66:	61 f0       	breq	.+24     	; 0x1b80 <MDIO_stderrorGetPortValue+0x56>
    1b68:	2f c0       	rjmp	.+94     	; 0x1bc8 <MDIO_stderrorGetPortValue+0x9e>
    1b6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b6e:	23 30       	cpi	r18, 0x03	; 3
    1b70:	31 05       	cpc	r19, r1
    1b72:	c1 f0       	breq	.+48     	; 0x1ba4 <MDIO_stderrorGetPortValue+0x7a>
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	84 30       	cpi	r24, 0x04	; 4
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	e1 f0       	breq	.+56     	; 0x1bb6 <MDIO_stderrorGetPortValue+0x8c>
    1b7e:	24 c0       	rjmp	.+72     	; 0x1bc8 <MDIO_stderrorGetPortValue+0x9e>
	{
		case MDIO_PORTA: *ARG_pu8Value= GPIOA->PIN;L_stderrorError = E_OK;break;
    1b80:	e9 e3       	ldi	r30, 0x39	; 57
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	eb 81       	ldd	r30, Y+3	; 0x03
    1b88:	fc 81       	ldd	r31, Y+4	; 0x04
    1b8a:	80 83       	st	Z, r24
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	1c c0       	rjmp	.+56     	; 0x1bca <MDIO_stderrorGetPortValue+0xa0>
		case MDIO_PORTB: *ARG_pu8Value= GPIOB->PIN;L_stderrorError = E_OK;break;
    1b92:	e6 e3       	ldi	r30, 0x36	; 54
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9c:	80 83       	st	Z, r24
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	13 c0       	rjmp	.+38     	; 0x1bca <MDIO_stderrorGetPortValue+0xa0>
		case MDIO_PORTC: *ARG_pu8Value= GPIOC->PIN;L_stderrorError = E_OK;break;
    1ba4:	e3 e3       	ldi	r30, 0x33	; 51
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	eb 81       	ldd	r30, Y+3	; 0x03
    1bac:	fc 81       	ldd	r31, Y+4	; 0x04
    1bae:	80 83       	st	Z, r24
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	0a c0       	rjmp	.+20     	; 0x1bca <MDIO_stderrorGetPortValue+0xa0>
		case MDIO_PORTD: *ARG_pu8Value= GPIOD->PIN;L_stderrorError = E_OK;break;
    1bb6:	e0 e3       	ldi	r30, 0x30	; 48
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bbe:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc0:	80 83       	st	Z, r24
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	01 c0       	rjmp	.+2      	; 0x1bca <MDIO_stderrorGetPortValue+0xa0>
		default:L_stderrorError = E_NOK;break;
    1bc8:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bcc:	26 96       	adiw	r28, 0x06	; 6
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <MDIO_stderrorSetPinDirection>:
(
	u8 ARG_u8Port,
	u8 ARG_u8pin,
	MDIO_mode ARG_u8Mode
)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	2a 97       	sbiw	r28, 0x0a	; 10
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	8a 83       	std	Y+2, r24	; 0x02
    1bf4:	6b 83       	std	Y+3, r22	; 0x03
    1bf6:	4c 83       	std	Y+4, r20	; 0x04
	
	STD_error_t L_stderrorError=E_NOK;
    1bf8:	19 82       	std	Y+1, r1	; 0x01
	if ((ARG_u8pin>=0)&&(ARG_u8pin<=7))
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	88 30       	cpi	r24, 0x08	; 8
    1bfe:	08 f0       	brcs	.+2      	; 0x1c02 <MDIO_stderrorSetPinDirection+0x24>
    1c00:	ed c1       	rjmp	.+986    	; 0x1fdc <MDIO_stderrorSetPinDirection+0x3fe>
	{
		if(ARG_u8Mode==MDIO_INPUT_FLOAT)
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	88 23       	and	r24, r24
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <MDIO_stderrorSetPinDirection+0x2c>
    1c08:	87 c0       	rjmp	.+270    	; 0x1d18 <MDIO_stderrorSetPinDirection+0x13a>
		{
			switch(ARG_u8Port)
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	3a 87       	std	Y+10, r19	; 0x0a
    1c12:	29 87       	std	Y+9, r18	; 0x09
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	82 30       	cpi	r24, 0x02	; 2
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	81 f1       	breq	.+96     	; 0x1c7e <MDIO_stderrorSetPinDirection+0xa0>
    1c1e:	29 85       	ldd	r18, Y+9	; 0x09
    1c20:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c22:	23 30       	cpi	r18, 0x03	; 3
    1c24:	31 05       	cpc	r19, r1
    1c26:	34 f4       	brge	.+12     	; 0x1c34 <MDIO_stderrorSetPinDirection+0x56>
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	69 f0       	breq	.+26     	; 0x1c4c <MDIO_stderrorSetPinDirection+0x6e>
    1c32:	70 c0       	rjmp	.+224    	; 0x1d14 <MDIO_stderrorSetPinDirection+0x136>
    1c34:	29 85       	ldd	r18, Y+9	; 0x09
    1c36:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c38:	23 30       	cpi	r18, 0x03	; 3
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	c9 f1       	breq	.+114    	; 0x1cb0 <MDIO_stderrorSetPinDirection+0xd2>
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	84 30       	cpi	r24, 0x04	; 4
    1c44:	91 05       	cpc	r25, r1
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <MDIO_stderrorSetPinDirection+0x6c>
    1c48:	4c c0       	rjmp	.+152    	; 0x1ce2 <MDIO_stderrorSetPinDirection+0x104>
    1c4a:	64 c0       	rjmp	.+200    	; 0x1d14 <MDIO_stderrorSetPinDirection+0x136>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    1c4c:	a9 e3       	ldi	r26, 0x39	; 57
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e9 e3       	ldi	r30, 0x39	; 57
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	81 81       	ldd	r24, Z+1	; 0x01
    1c56:	48 2f       	mov	r20, r24
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <MDIO_stderrorSetPinDirection+0x8c>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <MDIO_stderrorSetPinDirection+0x88>
    1c6e:	80 95       	com	r24
    1c70:	84 23       	and	r24, r20
    1c72:	11 96       	adiw	r26, 0x01	; 1
    1c74:	8c 93       	st	X, r24
    1c76:	11 97       	sbiw	r26, 0x01	; 1
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	b0 c1       	rjmp	.+864    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTB:CLEAR_BIT(GPIOB->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    1c7e:	a6 e3       	ldi	r26, 0x36	; 54
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e6 e3       	ldi	r30, 0x36	; 54
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	81 81       	ldd	r24, Z+1	; 0x01
    1c88:	48 2f       	mov	r20, r24
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <MDIO_stderrorSetPinDirection+0xbe>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <MDIO_stderrorSetPinDirection+0xba>
    1ca0:	80 95       	com	r24
    1ca2:	84 23       	and	r24, r20
    1ca4:	11 96       	adiw	r26, 0x01	; 1
    1ca6:	8c 93       	st	X, r24
    1ca8:	11 97       	sbiw	r26, 0x01	; 1
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	97 c1       	rjmp	.+814    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTC:CLEAR_BIT(GPIOC->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    1cb0:	a3 e3       	ldi	r26, 0x33	; 51
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e3 e3       	ldi	r30, 0x33	; 51
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	81 81       	ldd	r24, Z+1	; 0x01
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <MDIO_stderrorSetPinDirection+0xf0>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <MDIO_stderrorSetPinDirection+0xec>
    1cd2:	80 95       	com	r24
    1cd4:	84 23       	and	r24, r20
    1cd6:	11 96       	adiw	r26, 0x01	; 1
    1cd8:	8c 93       	st	X, r24
    1cda:	11 97       	sbiw	r26, 0x01	; 1
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	7e c1       	rjmp	.+764    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTD:CLEAR_BIT(GPIOD->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    1ce2:	a0 e3       	ldi	r26, 0x30	; 48
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e0 e3       	ldi	r30, 0x30	; 48
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	81 81       	ldd	r24, Z+1	; 0x01
    1cec:	48 2f       	mov	r20, r24
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <MDIO_stderrorSetPinDirection+0x122>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <MDIO_stderrorSetPinDirection+0x11e>
    1d04:	80 95       	com	r24
    1d06:	84 23       	and	r24, r20
    1d08:	11 96       	adiw	r26, 0x01	; 1
    1d0a:	8c 93       	st	X, r24
    1d0c:	11 97       	sbiw	r26, 0x01	; 1
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	65 c1       	rjmp	.+714    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				default:L_stderrorError = E_NOK;break;
    1d14:	19 82       	std	Y+1, r1	; 0x01
    1d16:	63 c1       	rjmp	.+710    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
			}
		}
		else if(ARG_u8Mode==MDIO_OUTPUT)
    1d18:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <MDIO_stderrorSetPinDirection+0x142>
    1d1e:	83 c0       	rjmp	.+262    	; 0x1e26 <MDIO_stderrorSetPinDirection+0x248>
		{
			switch(ARG_u8Port)
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	38 87       	std	Y+8, r19	; 0x08
    1d28:	2f 83       	std	Y+7, r18	; 0x07
    1d2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2c:	98 85       	ldd	r25, Y+8	; 0x08
    1d2e:	82 30       	cpi	r24, 0x02	; 2
    1d30:	91 05       	cpc	r25, r1
    1d32:	79 f1       	breq	.+94     	; 0x1d92 <MDIO_stderrorSetPinDirection+0x1b4>
    1d34:	2f 81       	ldd	r18, Y+7	; 0x07
    1d36:	38 85       	ldd	r19, Y+8	; 0x08
    1d38:	23 30       	cpi	r18, 0x03	; 3
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	34 f4       	brge	.+12     	; 0x1d4a <MDIO_stderrorSetPinDirection+0x16c>
    1d3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d40:	98 85       	ldd	r25, Y+8	; 0x08
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	91 05       	cpc	r25, r1
    1d46:	69 f0       	breq	.+26     	; 0x1d62 <MDIO_stderrorSetPinDirection+0x184>
    1d48:	6c c0       	rjmp	.+216    	; 0x1e22 <MDIO_stderrorSetPinDirection+0x244>
    1d4a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d4c:	38 85       	ldd	r19, Y+8	; 0x08
    1d4e:	23 30       	cpi	r18, 0x03	; 3
    1d50:	31 05       	cpc	r19, r1
    1d52:	b9 f1       	breq	.+110    	; 0x1dc2 <MDIO_stderrorSetPinDirection+0x1e4>
    1d54:	8f 81       	ldd	r24, Y+7	; 0x07
    1d56:	98 85       	ldd	r25, Y+8	; 0x08
    1d58:	84 30       	cpi	r24, 0x04	; 4
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <MDIO_stderrorSetPinDirection+0x182>
    1d5e:	49 c0       	rjmp	.+146    	; 0x1df2 <MDIO_stderrorSetPinDirection+0x214>
    1d60:	60 c0       	rjmp	.+192    	; 0x1e22 <MDIO_stderrorSetPinDirection+0x244>
			{
				case MDIO_PORTA:SET_BIT(GPIOA->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    1d62:	a9 e3       	ldi	r26, 0x39	; 57
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e9 e3       	ldi	r30, 0x39	; 57
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	81 81       	ldd	r24, Z+1	; 0x01
    1d6c:	48 2f       	mov	r20, r24
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 2e       	mov	r0, r18
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <MDIO_stderrorSetPinDirection+0x1a2>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	0a 94       	dec	r0
    1d82:	e2 f7       	brpl	.-8      	; 0x1d7c <MDIO_stderrorSetPinDirection+0x19e>
    1d84:	84 2b       	or	r24, r20
    1d86:	11 96       	adiw	r26, 0x01	; 1
    1d88:	8c 93       	st	X, r24
    1d8a:	11 97       	sbiw	r26, 0x01	; 1
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	26 c1       	rjmp	.+588    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTB:SET_BIT(GPIOB->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    1d92:	a6 e3       	ldi	r26, 0x36	; 54
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e6 e3       	ldi	r30, 0x36	; 54
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	81 81       	ldd	r24, Z+1	; 0x01
    1d9c:	48 2f       	mov	r20, r24
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 2e       	mov	r0, r18
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <MDIO_stderrorSetPinDirection+0x1d2>
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	0a 94       	dec	r0
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <MDIO_stderrorSetPinDirection+0x1ce>
    1db4:	84 2b       	or	r24, r20
    1db6:	11 96       	adiw	r26, 0x01	; 1
    1db8:	8c 93       	st	X, r24
    1dba:	11 97       	sbiw	r26, 0x01	; 1
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	0e c1       	rjmp	.+540    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTC:SET_BIT(GPIOC->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    1dc2:	a3 e3       	ldi	r26, 0x33	; 51
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e3 e3       	ldi	r30, 0x33	; 51
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	81 81       	ldd	r24, Z+1	; 0x01
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <MDIO_stderrorSetPinDirection+0x202>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <MDIO_stderrorSetPinDirection+0x1fe>
    1de4:	84 2b       	or	r24, r20
    1de6:	11 96       	adiw	r26, 0x01	; 1
    1de8:	8c 93       	st	X, r24
    1dea:	11 97       	sbiw	r26, 0x01	; 1
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	f6 c0       	rjmp	.+492    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTD:SET_BIT(GPIOD->DDR, ARG_u8pin);L_stderrorError = E_OK;break;
    1df2:	a0 e3       	ldi	r26, 0x30	; 48
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e0 e3       	ldi	r30, 0x30	; 48
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	81 81       	ldd	r24, Z+1	; 0x01
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <MDIO_stderrorSetPinDirection+0x232>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <MDIO_stderrorSetPinDirection+0x22e>
    1e14:	84 2b       	or	r24, r20
    1e16:	11 96       	adiw	r26, 0x01	; 1
    1e18:	8c 93       	st	X, r24
    1e1a:	11 97       	sbiw	r26, 0x01	; 1
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	de c0       	rjmp	.+444    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				default:L_stderrorError = E_NOK;break;
    1e22:	19 82       	std	Y+1, r1	; 0x01
    1e24:	dc c0       	rjmp	.+440    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
			}
		}
		else if(ARG_u8Mode==MDIO_INPUT_PULLUP)
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	82 30       	cpi	r24, 0x02	; 2
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <MDIO_stderrorSetPinDirection+0x250>
    1e2c:	d5 c0       	rjmp	.+426    	; 0x1fd8 <MDIO_stderrorSetPinDirection+0x3fa>
		{
			switch(ARG_u8Port)
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	3e 83       	std	Y+6, r19	; 0x06
    1e36:	2d 83       	std	Y+5, r18	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	82 30       	cpi	r24, 0x02	; 2
    1e3e:	91 05       	cpc	r25, r1
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <MDIO_stderrorSetPinDirection+0x266>
    1e42:	44 c0       	rjmp	.+136    	; 0x1ecc <MDIO_stderrorSetPinDirection+0x2ee>
    1e44:	2d 81       	ldd	r18, Y+5	; 0x05
    1e46:	3e 81       	ldd	r19, Y+6	; 0x06
    1e48:	23 30       	cpi	r18, 0x03	; 3
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	34 f4       	brge	.+12     	; 0x1e5a <MDIO_stderrorSetPinDirection+0x27c>
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	91 05       	cpc	r25, r1
    1e56:	71 f0       	breq	.+28     	; 0x1e74 <MDIO_stderrorSetPinDirection+0x296>
    1e58:	bd c0       	rjmp	.+378    	; 0x1fd4 <MDIO_stderrorSetPinDirection+0x3f6>
    1e5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e5e:	23 30       	cpi	r18, 0x03	; 3
    1e60:	31 05       	cpc	r19, r1
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <MDIO_stderrorSetPinDirection+0x288>
    1e64:	5f c0       	rjmp	.+190    	; 0x1f24 <MDIO_stderrorSetPinDirection+0x346>
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	84 30       	cpi	r24, 0x04	; 4
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <MDIO_stderrorSetPinDirection+0x294>
    1e70:	85 c0       	rjmp	.+266    	; 0x1f7c <MDIO_stderrorSetPinDirection+0x39e>
    1e72:	b0 c0       	rjmp	.+352    	; 0x1fd4 <MDIO_stderrorSetPinDirection+0x3f6>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA->DDR, ARG_u8pin);SET_BIT(GPIOA->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    1e74:	a9 e3       	ldi	r26, 0x39	; 57
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e9 e3       	ldi	r30, 0x39	; 57
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	81 81       	ldd	r24, Z+1	; 0x01
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <MDIO_stderrorSetPinDirection+0x2b2>
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	2a 95       	dec	r18
    1e92:	e2 f7       	brpl	.-8      	; 0x1e8c <MDIO_stderrorSetPinDirection+0x2ae>
    1e94:	80 95       	com	r24
    1e96:	84 23       	and	r24, r20
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	8c 93       	st	X, r24
    1e9c:	a9 e3       	ldi	r26, 0x39	; 57
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e9 e3       	ldi	r30, 0x39	; 57
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 2e       	mov	r0, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <MDIO_stderrorSetPinDirection+0x2dc>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <MDIO_stderrorSetPinDirection+0x2d8>
    1ebe:	84 2b       	or	r24, r20
    1ec0:	12 96       	adiw	r26, 0x02	; 2
    1ec2:	8c 93       	st	X, r24
    1ec4:	12 97       	sbiw	r26, 0x02	; 2
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	89 c0       	rjmp	.+274    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTB:CLEAR_BIT(GPIOB->DDR, ARG_u8pin);SET_BIT(GPIOB->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    1ecc:	a6 e3       	ldi	r26, 0x36	; 54
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e6 e3       	ldi	r30, 0x36	; 54
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	81 81       	ldd	r24, Z+1	; 0x01
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <MDIO_stderrorSetPinDirection+0x30a>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	2a 95       	dec	r18
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <MDIO_stderrorSetPinDirection+0x306>
    1eec:	80 95       	com	r24
    1eee:	84 23       	and	r24, r20
    1ef0:	11 96       	adiw	r26, 0x01	; 1
    1ef2:	8c 93       	st	X, r24
    1ef4:	a6 e3       	ldi	r26, 0x36	; 54
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e6 e3       	ldi	r30, 0x36	; 54
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	48 2f       	mov	r20, r24
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 2e       	mov	r0, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <MDIO_stderrorSetPinDirection+0x334>
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	0a 94       	dec	r0
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <MDIO_stderrorSetPinDirection+0x330>
    1f16:	84 2b       	or	r24, r20
    1f18:	12 96       	adiw	r26, 0x02	; 2
    1f1a:	8c 93       	st	X, r24
    1f1c:	12 97       	sbiw	r26, 0x02	; 2
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	5d c0       	rjmp	.+186    	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTC:CLEAR_BIT(GPIOC->DDR, ARG_u8pin);SET_BIT(GPIOC->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    1f24:	a3 e3       	ldi	r26, 0x33	; 51
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e3 e3       	ldi	r30, 0x33	; 51
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	81 81       	ldd	r24, Z+1	; 0x01
    1f2e:	48 2f       	mov	r20, r24
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <MDIO_stderrorSetPinDirection+0x362>
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	2a 95       	dec	r18
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <MDIO_stderrorSetPinDirection+0x35e>
    1f44:	80 95       	com	r24
    1f46:	84 23       	and	r24, r20
    1f48:	11 96       	adiw	r26, 0x01	; 1
    1f4a:	8c 93       	st	X, r24
    1f4c:	a3 e3       	ldi	r26, 0x33	; 51
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e3 e3       	ldi	r30, 0x33	; 51
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	48 2f       	mov	r20, r24
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	02 2e       	mov	r0, r18
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <MDIO_stderrorSetPinDirection+0x38c>
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	0a 94       	dec	r0
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <MDIO_stderrorSetPinDirection+0x388>
    1f6e:	84 2b       	or	r24, r20
    1f70:	12 96       	adiw	r26, 0x02	; 2
    1f72:	8c 93       	st	X, r24
    1f74:	12 97       	sbiw	r26, 0x02	; 2
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	31 c0       	rjmp	.+98     	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				case MDIO_PORTD:CLEAR_BIT(GPIOD->DDR, ARG_u8pin);SET_BIT(GPIOD->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    1f7c:	a0 e3       	ldi	r26, 0x30	; 48
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e0 e3       	ldi	r30, 0x30	; 48
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	81 81       	ldd	r24, Z+1	; 0x01
    1f86:	48 2f       	mov	r20, r24
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <MDIO_stderrorSetPinDirection+0x3ba>
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	2a 95       	dec	r18
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <MDIO_stderrorSetPinDirection+0x3b6>
    1f9c:	80 95       	com	r24
    1f9e:	84 23       	and	r24, r20
    1fa0:	11 96       	adiw	r26, 0x01	; 1
    1fa2:	8c 93       	st	X, r24
    1fa4:	a0 e3       	ldi	r26, 0x30	; 48
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e0 e3       	ldi	r30, 0x30	; 48
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <MDIO_stderrorSetPinDirection+0x3e4>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <MDIO_stderrorSetPinDirection+0x3e0>
    1fc6:	84 2b       	or	r24, r20
    1fc8:	12 96       	adiw	r26, 0x02	; 2
    1fca:	8c 93       	st	X, r24
    1fcc:	12 97       	sbiw	r26, 0x02	; 2
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
				default:L_stderrorError = E_NOK;break;
    1fd4:	19 82       	std	Y+1, r1	; 0x01
    1fd6:	03 c0       	rjmp	.+6      	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>
			}
		}
		else
		{
			L_stderrorError=E_NOK;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <MDIO_stderrorSetPinDirection+0x400>

		
	}
	else
	{
		L_stderrorError=E_NOK;
    1fdc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return L_stderrorError;
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe0:	2a 96       	adiw	r28, 0x0a	; 10
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <MDIO_stderrorSetPinValue>:
(
	u8 ARG_u8Port,
	u8 ARG_u8pin,
	u8 ARG_u8Value
)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	28 97       	sbiw	r28, 0x08	; 8
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	8a 83       	std	Y+2, r24	; 0x02
    2008:	6b 83       	std	Y+3, r22	; 0x03
    200a:	4c 83       	std	Y+4, r20	; 0x04
	
	STD_error_t L_stderrorError=E_NOK;
    200c:	19 82       	std	Y+1, r1	; 0x01
	if ((ARG_u8pin>=0)&&(ARG_u8pin<=7))
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	88 30       	cpi	r24, 0x08	; 8
    2012:	08 f0       	brcs	.+2      	; 0x2016 <MDIO_stderrorSetPinValue+0x24>
    2014:	12 c1       	rjmp	.+548    	; 0x223a <MDIO_stderrorSetPinValue+0x248>
	{
		if(ARG_u8Value==MDIO_HIGH)
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	82 30       	cpi	r24, 0x02	; 2
    201a:	09 f0       	breq	.+2      	; 0x201e <MDIO_stderrorSetPinValue+0x2c>
    201c:	83 c0       	rjmp	.+262    	; 0x2124 <MDIO_stderrorSetPinValue+0x132>
		{
			switch(ARG_u8Port)
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	38 87       	std	Y+8, r19	; 0x08
    2026:	2f 83       	std	Y+7, r18	; 0x07
    2028:	8f 81       	ldd	r24, Y+7	; 0x07
    202a:	98 85       	ldd	r25, Y+8	; 0x08
    202c:	82 30       	cpi	r24, 0x02	; 2
    202e:	91 05       	cpc	r25, r1
    2030:	79 f1       	breq	.+94     	; 0x2090 <MDIO_stderrorSetPinValue+0x9e>
    2032:	2f 81       	ldd	r18, Y+7	; 0x07
    2034:	38 85       	ldd	r19, Y+8	; 0x08
    2036:	23 30       	cpi	r18, 0x03	; 3
    2038:	31 05       	cpc	r19, r1
    203a:	34 f4       	brge	.+12     	; 0x2048 <MDIO_stderrorSetPinValue+0x56>
    203c:	8f 81       	ldd	r24, Y+7	; 0x07
    203e:	98 85       	ldd	r25, Y+8	; 0x08
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	91 05       	cpc	r25, r1
    2044:	69 f0       	breq	.+26     	; 0x2060 <MDIO_stderrorSetPinValue+0x6e>
    2046:	6c c0       	rjmp	.+216    	; 0x2120 <MDIO_stderrorSetPinValue+0x12e>
    2048:	2f 81       	ldd	r18, Y+7	; 0x07
    204a:	38 85       	ldd	r19, Y+8	; 0x08
    204c:	23 30       	cpi	r18, 0x03	; 3
    204e:	31 05       	cpc	r19, r1
    2050:	b9 f1       	breq	.+110    	; 0x20c0 <MDIO_stderrorSetPinValue+0xce>
    2052:	8f 81       	ldd	r24, Y+7	; 0x07
    2054:	98 85       	ldd	r25, Y+8	; 0x08
    2056:	84 30       	cpi	r24, 0x04	; 4
    2058:	91 05       	cpc	r25, r1
    205a:	09 f4       	brne	.+2      	; 0x205e <MDIO_stderrorSetPinValue+0x6c>
    205c:	49 c0       	rjmp	.+146    	; 0x20f0 <MDIO_stderrorSetPinValue+0xfe>
    205e:	60 c0       	rjmp	.+192    	; 0x2120 <MDIO_stderrorSetPinValue+0x12e>
			{
				case MDIO_PORTA:SET_BIT(GPIOA->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    2060:	a9 e3       	ldi	r26, 0x39	; 57
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e9 e3       	ldi	r30, 0x39	; 57
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	48 2f       	mov	r20, r24
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	02 2e       	mov	r0, r18
    2078:	02 c0       	rjmp	.+4      	; 0x207e <MDIO_stderrorSetPinValue+0x8c>
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	0a 94       	dec	r0
    2080:	e2 f7       	brpl	.-8      	; 0x207a <MDIO_stderrorSetPinValue+0x88>
    2082:	84 2b       	or	r24, r20
    2084:	12 96       	adiw	r26, 0x02	; 2
    2086:	8c 93       	st	X, r24
    2088:	12 97       	sbiw	r26, 0x02	; 2
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	d6 c0       	rjmp	.+428    	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTB:SET_BIT(GPIOB->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    2090:	a6 e3       	ldi	r26, 0x36	; 54
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e6 e3       	ldi	r30, 0x36	; 54
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	48 2f       	mov	r20, r24
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 2e       	mov	r0, r18
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <MDIO_stderrorSetPinValue+0xbc>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	0a 94       	dec	r0
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <MDIO_stderrorSetPinValue+0xb8>
    20b2:	84 2b       	or	r24, r20
    20b4:	12 96       	adiw	r26, 0x02	; 2
    20b6:	8c 93       	st	X, r24
    20b8:	12 97       	sbiw	r26, 0x02	; 2
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	be c0       	rjmp	.+380    	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTC:SET_BIT(GPIOC->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    20c0:	a3 e3       	ldi	r26, 0x33	; 51
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e3 e3       	ldi	r30, 0x33	; 51
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	48 2f       	mov	r20, r24
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <MDIO_stderrorSetPinValue+0xec>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <MDIO_stderrorSetPinValue+0xe8>
    20e2:	84 2b       	or	r24, r20
    20e4:	12 96       	adiw	r26, 0x02	; 2
    20e6:	8c 93       	st	X, r24
    20e8:	12 97       	sbiw	r26, 0x02	; 2
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	a6 c0       	rjmp	.+332    	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTD:SET_BIT(GPIOD->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    20f0:	a0 e3       	ldi	r26, 0x30	; 48
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e0 e3       	ldi	r30, 0x30	; 48
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	48 2f       	mov	r20, r24
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	02 2e       	mov	r0, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <MDIO_stderrorSetPinValue+0x11c>
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	0a 94       	dec	r0
    2110:	e2 f7       	brpl	.-8      	; 0x210a <MDIO_stderrorSetPinValue+0x118>
    2112:	84 2b       	or	r24, r20
    2114:	12 96       	adiw	r26, 0x02	; 2
    2116:	8c 93       	st	X, r24
    2118:	12 97       	sbiw	r26, 0x02	; 2
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	8e c0       	rjmp	.+284    	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
				default:L_stderrorError = E_NOK;break;
    2120:	19 82       	std	Y+1, r1	; 0x01
    2122:	8c c0       	rjmp	.+280    	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
			}
		}
		else if(ARG_u8Value==MDIO_LOW)
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	09 f0       	breq	.+2      	; 0x212c <MDIO_stderrorSetPinValue+0x13a>
    212a:	88 c0       	rjmp	.+272    	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
		{
			switch(ARG_u8Port)
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	3e 83       	std	Y+6, r19	; 0x06
    2134:	2d 83       	std	Y+5, r18	; 0x05
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	82 30       	cpi	r24, 0x02	; 2
    213c:	91 05       	cpc	r25, r1
    213e:	81 f1       	breq	.+96     	; 0x21a0 <MDIO_stderrorSetPinValue+0x1ae>
    2140:	2d 81       	ldd	r18, Y+5	; 0x05
    2142:	3e 81       	ldd	r19, Y+6	; 0x06
    2144:	23 30       	cpi	r18, 0x03	; 3
    2146:	31 05       	cpc	r19, r1
    2148:	34 f4       	brge	.+12     	; 0x2156 <MDIO_stderrorSetPinValue+0x164>
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	9e 81       	ldd	r25, Y+6	; 0x06
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	91 05       	cpc	r25, r1
    2152:	69 f0       	breq	.+26     	; 0x216e <MDIO_stderrorSetPinValue+0x17c>
    2154:	70 c0       	rjmp	.+224    	; 0x2236 <MDIO_stderrorSetPinValue+0x244>
    2156:	2d 81       	ldd	r18, Y+5	; 0x05
    2158:	3e 81       	ldd	r19, Y+6	; 0x06
    215a:	23 30       	cpi	r18, 0x03	; 3
    215c:	31 05       	cpc	r19, r1
    215e:	c9 f1       	breq	.+114    	; 0x21d2 <MDIO_stderrorSetPinValue+0x1e0>
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	84 30       	cpi	r24, 0x04	; 4
    2166:	91 05       	cpc	r25, r1
    2168:	09 f4       	brne	.+2      	; 0x216c <MDIO_stderrorSetPinValue+0x17a>
    216a:	4c c0       	rjmp	.+152    	; 0x2204 <MDIO_stderrorSetPinValue+0x212>
    216c:	64 c0       	rjmp	.+200    	; 0x2236 <MDIO_stderrorSetPinValue+0x244>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    216e:	a9 e3       	ldi	r26, 0x39	; 57
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e9 e3       	ldi	r30, 0x39	; 57
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	48 2f       	mov	r20, r24
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	02 2e       	mov	r0, r18
    2186:	02 c0       	rjmp	.+4      	; 0x218c <MDIO_stderrorSetPinValue+0x19a>
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	0a 94       	dec	r0
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <MDIO_stderrorSetPinValue+0x196>
    2190:	80 95       	com	r24
    2192:	84 23       	and	r24, r20
    2194:	12 96       	adiw	r26, 0x02	; 2
    2196:	8c 93       	st	X, r24
    2198:	12 97       	sbiw	r26, 0x02	; 2
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	89 83       	std	Y+1, r24	; 0x01
    219e:	4e c0       	rjmp	.+156    	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTB:CLEAR_BIT(GPIOB->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    21a0:	a6 e3       	ldi	r26, 0x36	; 54
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e6 e3       	ldi	r30, 0x36	; 54
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	82 81       	ldd	r24, Z+2	; 0x02
    21aa:	48 2f       	mov	r20, r24
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	02 2e       	mov	r0, r18
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <MDIO_stderrorSetPinValue+0x1cc>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	0a 94       	dec	r0
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <MDIO_stderrorSetPinValue+0x1c8>
    21c2:	80 95       	com	r24
    21c4:	84 23       	and	r24, r20
    21c6:	12 96       	adiw	r26, 0x02	; 2
    21c8:	8c 93       	st	X, r24
    21ca:	12 97       	sbiw	r26, 0x02	; 2
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	35 c0       	rjmp	.+106    	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTC:CLEAR_BIT(GPIOC->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    21d2:	a3 e3       	ldi	r26, 0x33	; 51
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e3 e3       	ldi	r30, 0x33	; 51
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	48 2f       	mov	r20, r24
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 2e       	mov	r0, r18
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <MDIO_stderrorSetPinValue+0x1fe>
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	0a 94       	dec	r0
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <MDIO_stderrorSetPinValue+0x1fa>
    21f4:	80 95       	com	r24
    21f6:	84 23       	and	r24, r20
    21f8:	12 96       	adiw	r26, 0x02	; 2
    21fa:	8c 93       	st	X, r24
    21fc:	12 97       	sbiw	r26, 0x02	; 2
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	1c c0       	rjmp	.+56     	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
				case MDIO_PORTD:CLEAR_BIT(GPIOD->PORT, ARG_u8pin);L_stderrorError = E_OK;break;
    2204:	a0 e3       	ldi	r26, 0x30	; 48
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e0 e3       	ldi	r30, 0x30	; 48
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	48 2f       	mov	r20, r24
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <MDIO_stderrorSetPinValue+0x230>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <MDIO_stderrorSetPinValue+0x22c>
    2226:	80 95       	com	r24
    2228:	84 23       	and	r24, r20
    222a:	12 96       	adiw	r26, 0x02	; 2
    222c:	8c 93       	st	X, r24
    222e:	12 97       	sbiw	r26, 0x02	; 2
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	03 c0       	rjmp	.+6      	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
				default:L_stderrorError = E_NOK;break;
    2236:	19 82       	std	Y+1, r1	; 0x01
    2238:	01 c0       	rjmp	.+2      	; 0x223c <MDIO_stderrorSetPinValue+0x24a>
		}
			
	}
	else
	{
		L_stderrorError=E_NOK;
    223a:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_stderrorError;
    223c:	89 81       	ldd	r24, Y+1	; 0x01
}
    223e:	28 96       	adiw	r28, 0x08	; 8
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <MDIO_stderrorGetPinValue>:
(
	u8 ARG_u8Port,
	u8 ARG_u8pin,
	u8* ARG_pu8Value
)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	27 97       	sbiw	r28, 0x07	; 7
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	8a 83       	std	Y+2, r24	; 0x02
    2266:	6b 83       	std	Y+3, r22	; 0x03
    2268:	5d 83       	std	Y+5, r21	; 0x05
    226a:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrorError=E_NOK;
    226c:	19 82       	std	Y+1, r1	; 0x01
	
	if(ARG_pu8Value==NULL_POINTER)
    226e:	8c 81       	ldd	r24, Y+4	; 0x04
    2270:	9d 81       	ldd	r25, Y+5	; 0x05
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	19 f4       	brne	.+6      	; 0x227c <MDIO_stderrorGetPinValue+0x2c>
	{
		L_stderrorError=E_NULL_POINTER;
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	80 c0       	rjmp	.+256    	; 0x237c <MDIO_stderrorGetPinValue+0x12c>
	}
	else if ((ARG_u8pin>=0)&&(ARG_u8pin<=7))
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	88 30       	cpi	r24, 0x08	; 8
    2280:	08 f0       	brcs	.+2      	; 0x2284 <MDIO_stderrorGetPinValue+0x34>
    2282:	7b c0       	rjmp	.+246    	; 0x237a <MDIO_stderrorGetPinValue+0x12a>
	{
		switch(ARG_u8Port)
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	3f 83       	std	Y+7, r19	; 0x07
    228c:	2e 83       	std	Y+6, r18	; 0x06
    228e:	4e 81       	ldd	r20, Y+6	; 0x06
    2290:	5f 81       	ldd	r21, Y+7	; 0x07
    2292:	42 30       	cpi	r20, 0x02	; 2
    2294:	51 05       	cpc	r21, r1
    2296:	69 f1       	breq	.+90     	; 0x22f2 <MDIO_stderrorGetPinValue+0xa2>
    2298:	8e 81       	ldd	r24, Y+6	; 0x06
    229a:	9f 81       	ldd	r25, Y+7	; 0x07
    229c:	83 30       	cpi	r24, 0x03	; 3
    229e:	91 05       	cpc	r25, r1
    22a0:	34 f4       	brge	.+12     	; 0x22ae <MDIO_stderrorGetPinValue+0x5e>
    22a2:	2e 81       	ldd	r18, Y+6	; 0x06
    22a4:	3f 81       	ldd	r19, Y+7	; 0x07
    22a6:	21 30       	cpi	r18, 0x01	; 1
    22a8:	31 05       	cpc	r19, r1
    22aa:	69 f0       	breq	.+26     	; 0x22c6 <MDIO_stderrorGetPinValue+0x76>
    22ac:	64 c0       	rjmp	.+200    	; 0x2376 <MDIO_stderrorGetPinValue+0x126>
    22ae:	4e 81       	ldd	r20, Y+6	; 0x06
    22b0:	5f 81       	ldd	r21, Y+7	; 0x07
    22b2:	43 30       	cpi	r20, 0x03	; 3
    22b4:	51 05       	cpc	r21, r1
    22b6:	99 f1       	breq	.+102    	; 0x231e <MDIO_stderrorGetPinValue+0xce>
    22b8:	8e 81       	ldd	r24, Y+6	; 0x06
    22ba:	9f 81       	ldd	r25, Y+7	; 0x07
    22bc:	84 30       	cpi	r24, 0x04	; 4
    22be:	91 05       	cpc	r25, r1
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <MDIO_stderrorGetPinValue+0x74>
    22c2:	43 c0       	rjmp	.+134    	; 0x234a <MDIO_stderrorGetPinValue+0xfa>
    22c4:	58 c0       	rjmp	.+176    	; 0x2376 <MDIO_stderrorGetPinValue+0x126>
		{
			case MDIO_PORTA: *ARG_pu8Value= GET_BIT(GPIOA->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    22c6:	e9 e3       	ldi	r30, 0x39	; 57
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a9 01       	movw	r20, r18
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <MDIO_stderrorGetPinValue+0x8e>
    22da:	55 95       	asr	r21
    22dc:	47 95       	ror	r20
    22de:	8a 95       	dec	r24
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <MDIO_stderrorGetPinValue+0x8a>
    22e2:	ca 01       	movw	r24, r20
    22e4:	81 70       	andi	r24, 0x01	; 1
    22e6:	ec 81       	ldd	r30, Y+4	; 0x04
    22e8:	fd 81       	ldd	r31, Y+5	; 0x05
    22ea:	80 83       	st	Z, r24
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	45 c0       	rjmp	.+138    	; 0x237c <MDIO_stderrorGetPinValue+0x12c>
			case MDIO_PORTB: *ARG_pu8Value= GET_BIT(GPIOB->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    22f2:	e6 e3       	ldi	r30, 0x36	; 54
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a9 01       	movw	r20, r18
    2304:	02 c0       	rjmp	.+4      	; 0x230a <MDIO_stderrorGetPinValue+0xba>
    2306:	55 95       	asr	r21
    2308:	47 95       	ror	r20
    230a:	8a 95       	dec	r24
    230c:	e2 f7       	brpl	.-8      	; 0x2306 <MDIO_stderrorGetPinValue+0xb6>
    230e:	ca 01       	movw	r24, r20
    2310:	81 70       	andi	r24, 0x01	; 1
    2312:	ec 81       	ldd	r30, Y+4	; 0x04
    2314:	fd 81       	ldd	r31, Y+5	; 0x05
    2316:	80 83       	st	Z, r24
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	2f c0       	rjmp	.+94     	; 0x237c <MDIO_stderrorGetPinValue+0x12c>
			case MDIO_PORTC: *ARG_pu8Value= GET_BIT(GPIOC->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    231e:	e3 e3       	ldi	r30, 0x33	; 51
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	88 2f       	mov	r24, r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	a9 01       	movw	r20, r18
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <MDIO_stderrorGetPinValue+0xe6>
    2332:	55 95       	asr	r21
    2334:	47 95       	ror	r20
    2336:	8a 95       	dec	r24
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <MDIO_stderrorGetPinValue+0xe2>
    233a:	ca 01       	movw	r24, r20
    233c:	81 70       	andi	r24, 0x01	; 1
    233e:	ec 81       	ldd	r30, Y+4	; 0x04
    2340:	fd 81       	ldd	r31, Y+5	; 0x05
    2342:	80 83       	st	Z, r24
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	19 c0       	rjmp	.+50     	; 0x237c <MDIO_stderrorGetPinValue+0x12c>
			case MDIO_PORTD: *ARG_pu8Value= GET_BIT(GPIOD->PIN, ARG_u8pin);L_stderrorError = E_OK;break;
    234a:	e0 e3       	ldi	r30, 0x30	; 48
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	88 2f       	mov	r24, r24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a9 01       	movw	r20, r18
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <MDIO_stderrorGetPinValue+0x112>
    235e:	55 95       	asr	r21
    2360:	47 95       	ror	r20
    2362:	8a 95       	dec	r24
    2364:	e2 f7       	brpl	.-8      	; 0x235e <MDIO_stderrorGetPinValue+0x10e>
    2366:	ca 01       	movw	r24, r20
    2368:	81 70       	andi	r24, 0x01	; 1
    236a:	ec 81       	ldd	r30, Y+4	; 0x04
    236c:	fd 81       	ldd	r31, Y+5	; 0x05
    236e:	80 83       	st	Z, r24
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	03 c0       	rjmp	.+6      	; 0x237c <MDIO_stderrorGetPinValue+0x12c>
			default:L_stderrorError = E_NOK;break;
    2376:	19 82       	std	Y+1, r1	; 0x01
    2378:	01 c0       	rjmp	.+2      	; 0x237c <MDIO_stderrorGetPinValue+0x12c>
		}
	}
	else
	{
		
		L_stderrorError=E_NOK;
    237a:	19 82       	std	Y+1, r1	; 0x01
		
	}
	
	return L_stderrorError;
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	27 96       	adiw	r28, 0x07	; 7
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <MTWI_stderrInit>:
#define Fcpu  8000000UL

static void (*MTWI_pvoidfUserFunction)();

STD_error_t MTWI_stderrInit(u32 ARG_u32DataRate , u8 ARG_u8Prescalar )
{
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	28 97       	sbiw	r28, 0x08	; 8
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	6a 83       	std	Y+2, r22	; 0x02
    23aa:	7b 83       	std	Y+3, r23	; 0x03
    23ac:	8c 83       	std	Y+4, r24	; 0x04
    23ae:	9d 83       	std	Y+5, r25	; 0x05
    23b0:	4e 83       	std	Y+6, r20	; 0x06
	STD_error_t L_stderrStat = E_OK ;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	89 83       	std	Y+1, r24	; 0x01
	switch(ARG_u8Prescalar)
    23b6:	8e 81       	ldd	r24, Y+6	; 0x06
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	38 87       	std	Y+8, r19	; 0x08
    23be:	2f 83       	std	Y+7, r18	; 0x07
    23c0:	8f 81       	ldd	r24, Y+7	; 0x07
    23c2:	98 85       	ldd	r25, Y+8	; 0x08
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	91 05       	cpc	r25, r1
    23c8:	91 f1       	breq	.+100    	; 0x242e <MTWI_stderrInit+0x9e>
    23ca:	ef 81       	ldd	r30, Y+7	; 0x07
    23cc:	f8 85       	ldd	r31, Y+8	; 0x08
    23ce:	e2 30       	cpi	r30, 0x02	; 2
    23d0:	f1 05       	cpc	r31, r1
    23d2:	34 f4       	brge	.+12     	; 0x23e0 <MTWI_stderrInit+0x50>
    23d4:	2f 81       	ldd	r18, Y+7	; 0x07
    23d6:	38 85       	ldd	r19, Y+8	; 0x08
    23d8:	21 15       	cp	r18, r1
    23da:	31 05       	cpc	r19, r1
    23dc:	71 f0       	breq	.+28     	; 0x23fa <MTWI_stderrInit+0x6a>
    23de:	81 c0       	rjmp	.+258    	; 0x24e2 <MTWI_stderrInit+0x152>
    23e0:	8f 81       	ldd	r24, Y+7	; 0x07
    23e2:	98 85       	ldd	r25, Y+8	; 0x08
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	91 05       	cpc	r25, r1
    23e8:	09 f4       	brne	.+2      	; 0x23ec <MTWI_stderrInit+0x5c>
    23ea:	3f c0       	rjmp	.+126    	; 0x246a <MTWI_stderrInit+0xda>
    23ec:	ef 81       	ldd	r30, Y+7	; 0x07
    23ee:	f8 85       	ldd	r31, Y+8	; 0x08
    23f0:	e3 30       	cpi	r30, 0x03	; 3
    23f2:	f1 05       	cpc	r31, r1
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <MTWI_stderrInit+0x68>
    23f6:	57 c0       	rjmp	.+174    	; 0x24a6 <MTWI_stderrInit+0x116>
    23f8:	74 c0       	rjmp	.+232    	; 0x24e2 <MTWI_stderrInit+0x152>
	{
		case MTWI_PRESCALAR_1:  TWBR = (((F_CPU)/ARG_u32DataRate)-16)/(2*1);break;
    23fa:	00 e2       	ldi	r16, 0x20	; 32
    23fc:	10 e0       	ldi	r17, 0x00	; 0
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	92 e1       	ldi	r25, 0x12	; 18
    2402:	aa e7       	ldi	r26, 0x7A	; 122
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	2a 81       	ldd	r18, Y+2	; 0x02
    2408:	3b 81       	ldd	r19, Y+3	; 0x03
    240a:	4c 81       	ldd	r20, Y+4	; 0x04
    240c:	5d 81       	ldd	r21, Y+5	; 0x05
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodsi4>
    2416:	da 01       	movw	r26, r20
    2418:	c9 01       	movw	r24, r18
    241a:	40 97       	sbiw	r24, 0x10	; 16
    241c:	a1 09       	sbc	r26, r1
    241e:	b1 09       	sbc	r27, r1
    2420:	b6 95       	lsr	r27
    2422:	a7 95       	ror	r26
    2424:	97 95       	ror	r25
    2426:	87 95       	ror	r24
    2428:	f8 01       	movw	r30, r16
    242a:	80 83       	st	Z, r24
    242c:	5b c0       	rjmp	.+182    	; 0x24e4 <MTWI_stderrInit+0x154>
		case MTWI_PRESCALAR_4:  TWBR = (((F_CPU)/ARG_u32DataRate)-16)/(2*4);break;
    242e:	00 e2       	ldi	r16, 0x20	; 32
    2430:	10 e0       	ldi	r17, 0x00	; 0
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	92 e1       	ldi	r25, 0x12	; 18
    2436:	aa e7       	ldi	r26, 0x7A	; 122
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	2a 81       	ldd	r18, Y+2	; 0x02
    243c:	3b 81       	ldd	r19, Y+3	; 0x03
    243e:	4c 81       	ldd	r20, Y+4	; 0x04
    2440:	5d 81       	ldd	r21, Y+5	; 0x05
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodsi4>
    244a:	da 01       	movw	r26, r20
    244c:	c9 01       	movw	r24, r18
    244e:	40 97       	sbiw	r24, 0x10	; 16
    2450:	a1 09       	sbc	r26, r1
    2452:	b1 09       	sbc	r27, r1
    2454:	68 94       	set
    2456:	12 f8       	bld	r1, 2
    2458:	b6 95       	lsr	r27
    245a:	a7 95       	ror	r26
    245c:	97 95       	ror	r25
    245e:	87 95       	ror	r24
    2460:	16 94       	lsr	r1
    2462:	d1 f7       	brne	.-12     	; 0x2458 <MTWI_stderrInit+0xc8>
    2464:	f8 01       	movw	r30, r16
    2466:	80 83       	st	Z, r24
    2468:	3d c0       	rjmp	.+122    	; 0x24e4 <MTWI_stderrInit+0x154>
		case MTWI_PRESCALAR_16: TWBR = (((F_CPU)/ARG_u32DataRate)-16)/(2*16);break;
    246a:	00 e2       	ldi	r16, 0x20	; 32
    246c:	10 e0       	ldi	r17, 0x00	; 0
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	92 e1       	ldi	r25, 0x12	; 18
    2472:	aa e7       	ldi	r26, 0x7A	; 122
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	2a 81       	ldd	r18, Y+2	; 0x02
    2478:	3b 81       	ldd	r19, Y+3	; 0x03
    247a:	4c 81       	ldd	r20, Y+4	; 0x04
    247c:	5d 81       	ldd	r21, Y+5	; 0x05
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodsi4>
    2486:	da 01       	movw	r26, r20
    2488:	c9 01       	movw	r24, r18
    248a:	40 97       	sbiw	r24, 0x10	; 16
    248c:	a1 09       	sbc	r26, r1
    248e:	b1 09       	sbc	r27, r1
    2490:	68 94       	set
    2492:	14 f8       	bld	r1, 4
    2494:	b6 95       	lsr	r27
    2496:	a7 95       	ror	r26
    2498:	97 95       	ror	r25
    249a:	87 95       	ror	r24
    249c:	16 94       	lsr	r1
    249e:	d1 f7       	brne	.-12     	; 0x2494 <MTWI_stderrInit+0x104>
    24a0:	f8 01       	movw	r30, r16
    24a2:	80 83       	st	Z, r24
    24a4:	1f c0       	rjmp	.+62     	; 0x24e4 <MTWI_stderrInit+0x154>
		case MTWI_PRESCALAR_64: TWBR = (((F_CPU)/ARG_u32DataRate)-16)/(2*64);break;
    24a6:	00 e2       	ldi	r16, 0x20	; 32
    24a8:	10 e0       	ldi	r17, 0x00	; 0
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	92 e1       	ldi	r25, 0x12	; 18
    24ae:	aa e7       	ldi	r26, 0x7A	; 122
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	2a 81       	ldd	r18, Y+2	; 0x02
    24b4:	3b 81       	ldd	r19, Y+3	; 0x03
    24b6:	4c 81       	ldd	r20, Y+4	; 0x04
    24b8:	5d 81       	ldd	r21, Y+5	; 0x05
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodsi4>
    24c2:	da 01       	movw	r26, r20
    24c4:	c9 01       	movw	r24, r18
    24c6:	40 97       	sbiw	r24, 0x10	; 16
    24c8:	a1 09       	sbc	r26, r1
    24ca:	b1 09       	sbc	r27, r1
    24cc:	68 94       	set
    24ce:	16 f8       	bld	r1, 6
    24d0:	b6 95       	lsr	r27
    24d2:	a7 95       	ror	r26
    24d4:	97 95       	ror	r25
    24d6:	87 95       	ror	r24
    24d8:	16 94       	lsr	r1
    24da:	d1 f7       	brne	.-12     	; 0x24d0 <MTWI_stderrInit+0x140>
    24dc:	f8 01       	movw	r30, r16
    24de:	80 83       	st	Z, r24
    24e0:	01 c0       	rjmp	.+2      	; 0x24e4 <MTWI_stderrInit+0x154>
		default: L_stderrStat = E_NOK ; break;
    24e2:	19 82       	std	Y+1, r1	; 0x01
	}
	if(ARG_u8Prescalar<=3)
    24e4:	8e 81       	ldd	r24, Y+6	; 0x06
    24e6:	84 30       	cpi	r24, 0x04	; 4
    24e8:	58 f4       	brcc	.+22     	; 0x2500 <MTWI_stderrInit+0x170>
	{
		TWSR = (TWSR & 0xFC) | (ARG_u8Prescalar) ;
    24ea:	a1 e2       	ldi	r26, 0x21	; 33
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e1 e2       	ldi	r30, 0x21	; 33
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	98 2f       	mov	r25, r24
    24f6:	9c 7f       	andi	r25, 0xFC	; 252
    24f8:	8e 81       	ldd	r24, Y+6	; 0x06
    24fa:	89 2b       	or	r24, r25
    24fc:	8c 93       	st	X, r24
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <MTWI_stderrInit+0x172>
	}
	else
	{
		L_stderrStat =E_NOK ;
    2500:	19 82       	std	Y+1, r1	; 0x01
	}	
	return  L_stderrStat ;
    2502:	89 81       	ldd	r24, Y+1	; 0x01
}
    2504:	28 96       	adiw	r28, 0x08	; 8
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	08 95       	ret

0000251a <MTWI_voidEnable>:

void 	MTWI_voidEnable(void)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR , TWEN);
    2522:	a6 e5       	ldi	r26, 0x56	; 86
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e6 e5       	ldi	r30, 0x56	; 86
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	84 60       	ori	r24, 0x04	; 4
    252e:	8c 93       	st	X, r24
}
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <MTWI_voidDisable>:
void	MTWI_voidDisable(void)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWCR , TWEN);
    253e:	a6 e5       	ldi	r26, 0x56	; 86
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e6 e5       	ldi	r30, 0x56	; 86
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	8b 7f       	andi	r24, 0xFB	; 251
    254a:	8c 93       	st	X, r24
}
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <MTWI_voidEnableInterrupt>:

void 	MTWI_voidEnableInterrupt(void)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR , TWIE);
    255a:	a6 e5       	ldi	r26, 0x56	; 86
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e6 e5       	ldi	r30, 0x56	; 86
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	81 60       	ori	r24, 0x01	; 1
    2566:	8c 93       	st	X, r24
}
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <MTWI_voidDisableInterrupt>:

void 	MTWI_voidDisableInterrupt(void)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWCR , TWIE);
    2576:	a6 e5       	ldi	r26, 0x56	; 86
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e6 e5       	ldi	r30, 0x56	; 86
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	8e 7f       	andi	r24, 0xFE	; 254
    2582:	8c 93       	st	X, r24
}
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <MTWI_stderrSetcallback>:

STD_error_t MTWI_stderrSetcallback(void(*ARG_pvoidfUserFunction)(void))
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	00 d0       	rcall	.+0      	; 0x2590 <MTWI_stderrSetcallback+0x6>
    2590:	0f 92       	push	r0
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	9b 83       	std	Y+3, r25	; 0x03
    2598:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrStat = E_OK ;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	89 83       	std	Y+1, r24	; 0x01
	if(ARG_pvoidfUserFunction != NULL_POINTER)
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	9b 81       	ldd	r25, Y+3	; 0x03
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	39 f0       	breq	.+14     	; 0x25b4 <MTWI_stderrSetcallback+0x2a>
	{
		MTWI_pvoidfUserFunction =ARG_pvoidfUserFunction;
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	90 93 9d 00 	sts	0x009D, r25
    25ae:	80 93 9c 00 	sts	0x009C, r24
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <MTWI_stderrSetcallback+0x2e>
	}
	else{
		L_stderrStat = E_NULL_POINTER ;
    25b4:	82 e0       	ldi	r24, 0x02	; 2
    25b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrStat;
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <MTWI_voidStartCondition>:

void 	MTWI_voidStartCondition(void)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (TWCR & 0x5F) | (1<<TWINT)|(1<<TWSTA) ;
    25ce:	a6 e5       	ldi	r26, 0x56	; 86
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e6 e5       	ldi	r30, 0x56	; 86
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	80 6a       	ori	r24, 0xA0	; 160
    25da:	8c 93       	st	X, r24
}
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <MTWI_voidStopCondition>:
void 	MTWI_voidStopCondition(void)
{
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
	TWCR = (TWCR & 0x6F) | (1<<TWINT)|(1<<TWSTO) ;
    25ea:	a6 e5       	ldi	r26, 0x56	; 86
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e6 e5       	ldi	r30, 0x56	; 86
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	80 69       	ori	r24, 0x90	; 144
    25f6:	8c 93       	st	X, r24
}
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <MTWI_voidEnableACK>:

void 	MTWI_voidEnableACK(void)
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWEA);
    2606:	a6 e5       	ldi	r26, 0x56	; 86
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e6 e5       	ldi	r30, 0x56	; 86
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	80 64       	ori	r24, 0x40	; 64
    2612:	8c 93       	st	X, r24
}
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <MTWI_voidDisableACK>:
void 	MTWI_voidDisableACK(void)
{
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWCR,TWEA);
    2622:	a6 e5       	ldi	r26, 0x56	; 86
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e6 e5       	ldi	r30, 0x56	; 86
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	8f 7b       	andi	r24, 0xBF	; 191
    262e:	8c 93       	st	X, r24
}
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <MTWI_voidSetSlaveAddress>:

void 	MTWI_voidSetSlaveAddress(u8 ARG_u8SlaveAddres) 
{
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	0f 92       	push	r0
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	89 83       	std	Y+1, r24	; 0x01
	TWAR = (TWAR & 0x01 ) |(ARG_u8SlaveAddres <<1) ;
    2642:	a2 e2       	ldi	r26, 0x22	; 34
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	e2 e2       	ldi	r30, 0x22	; 34
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	28 2f       	mov	r18, r24
    264e:	21 70       	andi	r18, 0x01	; 1
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	88 2f       	mov	r24, r24
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	82 2b       	or	r24, r18
    265c:	8c 93       	st	X, r24
}
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <MTWI_voidEnableGennralCall>:

void	MTWI_voidEnableGennralCall(void)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWAR,TWGCE);
    266e:	a2 e2       	ldi	r26, 0x22	; 34
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e2 e2       	ldi	r30, 0x22	; 34
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	81 60       	ori	r24, 0x01	; 1
    267a:	8c 93       	st	X, r24
}
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <MTWI_voidDisableGennralCall>:
void	MTWI_voidDisableGennralCall(void)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWAR,TWGCE);
    268a:	a2 e2       	ldi	r26, 0x22	; 34
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e2 e2       	ldi	r30, 0x22	; 34
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	8e 7f       	andi	r24, 0xFE	; 254
    2696:	8c 93       	st	X, r24
}
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <MTWI_twistatusCheckStatus>:

MTWI_status 	MTWI_twistatusCheckStatus(void)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & TWS_MASK);  /* */
    26a6:	e1 e2       	ldi	r30, 0x21	; 33
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	88 7f       	andi	r24, 0xF8	; 248
}
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <MTWI_voidFlagPolly>:

void 	MTWI_voidFlagPolly(void)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(TWCR,TWINT));
    26bc:	e6 e5       	ldi	r30, 0x56	; 86
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	88 23       	and	r24, r24
    26c4:	dc f7       	brge	.-10     	; 0x26bc <MTWI_voidFlagPolly+0x8>
}
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <MTWI_voidClearFlag>:
void 	MTWI_voidClearFlag(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62

	TWCR = (TWCR &0x4F) | (1<< TWINT );
    26d4:	a6 e5       	ldi	r26, 0x56	; 86
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e6 e5       	ldi	r30, 0x56	; 86
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	8f 74       	andi	r24, 0x4F	; 79
    26e0:	80 68       	ori	r24, 0x80	; 128
    26e2:	8c 93       	st	X, r24
}
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <MTWI_voidLoadTWDR>:

void 	MTWI_voidLoadTWDR(u8 ARG_u8Data)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	0f 92       	push	r0
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	89 83       	std	Y+1, r24	; 0x01
	TWDR = ARG_u8Data ;
    26f6:	e3 e2       	ldi	r30, 0x23	; 35
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	80 83       	st	Z, r24
}
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <MTWI_charReadTWDR>:

char 	MTWI_charReadTWDR(void)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
	return TWDR ;
    270e:	e3 e2       	ldi	r30, 0x23	; 35
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
}
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <MTWI_voidSendChar>:

void 	MTWI_voidSendChar(u8 ARG_u8SlaveAddress , char Arg_charChar) /*set fram for comunicat */
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	00 d0       	rcall	.+0      	; 0x2720 <MTWI_voidSendChar+0x6>
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	6a 83       	std	Y+2, r22	; 0x02
	MTWI_voidStartCondition();
    2728:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <MTWI_voidStartCondition>
	MTWI_voidFlagPolly();
    272c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
	if(MTWI_twistatusCheckStatus()== MTWI_STATUS_MASTER_START_CONDITION )
    2730:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    2734:	88 30       	cpi	r24, 0x08	; 8
    2736:	19 f5       	brne	.+70     	; 0x277e <MTWI_voidSendChar+0x64>
	{
		MTWI_voidLoadTWDR(((ARG_u8SlaveAddress << 1) & (0xFE))|(0));
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	88 2f       	mov	r24, r24
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	0e 94 75 13 	call	0x26ea	; 0x26ea <MTWI_voidLoadTWDR>
		MTWI_voidClearFlag();
    2746:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
		MTWI_voidFlagPolly();
    274a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
		if(MTWI_STATUS_MASTER_TX_SLA_W_ACK == MTWI_twistatusCheckStatus())
    274e:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    2752:	88 31       	cpi	r24, 0x18	; 24
    2754:	71 f4       	brne	.+28     	; 0x2772 <MTWI_voidSendChar+0x58>
		{
			MTWI_voidLoadTWDR(Arg_charChar);
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	0e 94 75 13 	call	0x26ea	; 0x26ea <MTWI_voidLoadTWDR>
			MTWI_voidClearFlag();
    275c:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
			MTWI_voidFlagPolly();
    2760:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
			if(MTWI_STATUS_MASTER_TX_DATA_ACK == MTWI_twistatusCheckStatus())
    2764:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    2768:	88 32       	cpi	r24, 0x28	; 40
    276a:	49 f4       	brne	.+18     	; 0x277e <MTWI_voidSendChar+0x64>
			{
				MTWI_voidStopCondition();
    276c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <MTWI_voidStopCondition>
    2770:	06 c0       	rjmp	.+12     	; 0x277e <MTWI_voidSendChar+0x64>
			}
		}
		else if(MTWI_STATUS_MASTER_TX_SLA_W_NACK ==  MTWI_twistatusCheckStatus())
    2772:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    2776:	80 32       	cpi	r24, 0x20	; 32
    2778:	11 f4       	brne	.+4      	; 0x277e <MTWI_voidSendChar+0x64>
		{
			MTWI_voidStopCondition();
    277a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <MTWI_voidStopCondition>
		}
	}
	
}
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <MTWI_voidSendMultipleChars>:
void	MTWI_voidSendMultipleChars(u8 ARG_u8SlaveAddress, const char *ARG_ccharpChar ) /*constant as we send addres of first char at string  */
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <MTWI_voidSendMultipleChars+0x6>
    278e:	00 d0       	rcall	.+0      	; 0x2790 <MTWI_voidSendMultipleChars+0x8>
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	8b 83       	std	Y+3, r24	; 0x03
    2798:	7d 83       	std	Y+5, r23	; 0x05
    279a:	6c 83       	std	Y+4, r22	; 0x04
	MTWI_voidStartCondition();
    279c:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <MTWI_voidStartCondition>
	MTWI_voidFlagPolly();
    27a0:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
	if(MTWI_twistatusCheckStatus()== MTWI_STATUS_MASTER_START_CONDITION )
    27a4:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    27a8:	88 30       	cpi	r24, 0x08	; 8
    27aa:	b1 f5       	brne	.+108    	; 0x2818 <MTWI_voidSendMultipleChars+0x90>
	{
		MTWI_voidLoadTWDR(((ARG_u8SlaveAddress << 1) & (0xFE))|(0));
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	0e 94 75 13 	call	0x26ea	; 0x26ea <MTWI_voidLoadTWDR>
		MTWI_voidClearFlag();
    27ba:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
		MTWI_voidFlagPolly();
    27be:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
		if(MTWI_STATUS_MASTER_TX_SLA_W_ACK == MTWI_twistatusCheckStatus())
    27c2:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    27c6:	88 31       	cpi	r24, 0x18	; 24
    27c8:	09 f5       	brne	.+66     	; 0x280c <MTWI_voidSendMultipleChars+0x84>
		{
			u16 L_u16i =0 ;
    27ca:	1a 82       	std	Y+2, r1	; 0x02
    27cc:	19 82       	std	Y+1, r1	; 0x01
			do
			{
				MTWI_voidLoadTWDR(ARG_ccharpChar[L_u16i]);
    27ce:	2c 81       	ldd	r18, Y+4	; 0x04
    27d0:	3d 81       	ldd	r19, Y+5	; 0x05
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	f9 01       	movw	r30, r18
    27d8:	e8 0f       	add	r30, r24
    27da:	f9 1f       	adc	r31, r25
    27dc:	80 81       	ld	r24, Z
    27de:	0e 94 75 13 	call	0x26ea	; 0x26ea <MTWI_voidLoadTWDR>
				MTWI_voidClearFlag();
    27e2:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
				MTWI_voidFlagPolly();
    27e6:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
				
			}while(MTWI_STATUS_MASTER_TX_DATA_ACK == MTWI_twistatusCheckStatus() && ARG_ccharpChar[L_u16i] != '\0' );
    27ea:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    27ee:	88 32       	cpi	r24, 0x28	; 40
    27f0:	51 f4       	brne	.+20     	; 0x2806 <MTWI_voidSendMultipleChars+0x7e>
    27f2:	2c 81       	ldd	r18, Y+4	; 0x04
    27f4:	3d 81       	ldd	r19, Y+5	; 0x05
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	9a 81       	ldd	r25, Y+2	; 0x02
    27fa:	f9 01       	movw	r30, r18
    27fc:	e8 0f       	add	r30, r24
    27fe:	f9 1f       	adc	r31, r25
    2800:	80 81       	ld	r24, Z
    2802:	88 23       	and	r24, r24
    2804:	21 f7       	brne	.-56     	; 0x27ce <MTWI_voidSendMultipleChars+0x46>

			MTWI_voidStopCondition();
    2806:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <MTWI_voidStopCondition>
    280a:	06 c0       	rjmp	.+12     	; 0x2818 <MTWI_voidSendMultipleChars+0x90>

		}
		else if(MTWI_STATUS_MASTER_TX_SLA_W_NACK ==  MTWI_twistatusCheckStatus())
    280c:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    2810:	80 32       	cpi	r24, 0x20	; 32
    2812:	11 f4       	brne	.+4      	; 0x2818 <MTWI_voidSendMultipleChars+0x90>
		{
			MTWI_voidStopCondition();
    2814:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <MTWI_voidStopCondition>
		}
	}
	
}
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <MTWI_charSlaveReceive>:

char 	MTWI_charSlaveReceive(void)
{
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	0f 92       	push	r0
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
	u8 	L_u8DataReceive =0 ;
    2832:	19 82       	std	Y+1, r1	; 0x01
	MTWI_voidFlagPolly();
    2834:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
	if(MTWI_STATUS_SLAVE_RX_SLA_W_ACK ==  MTWI_twistatusCheckStatus())
    2838:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    283c:	80 36       	cpi	r24, 0x60	; 96
    283e:	89 f4       	brne	.+34     	; 0x2862 <MTWI_charSlaveReceive+0x3a>
	{
		MTWI_voidClearFlag();
    2840:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
		MTWI_voidFlagPolly();
    2844:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <MTWI_voidFlagPolly>
		if(MTWI_STATUS_SLAVE_RX_SLA_W_DATA_ACK ==  MTWI_twistatusCheckStatus())
    2848:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    284c:	80 38       	cpi	r24, 0x80	; 128
    284e:	49 f4       	brne	.+18     	; 0x2862 <MTWI_charSlaveReceive+0x3a>
		{
			L_u8DataReceive =MTWI_charReadTWDR();
    2850:	0e 94 83 13 	call	0x2706	; 0x2706 <MTWI_charReadTWDR>
    2854:	89 83       	std	Y+1, r24	; 0x01
			if(MTWI_STATUS_SLAVE_RX_STOP_RSTART ==  MTWI_twistatusCheckStatus())
    2856:	0e 94 4f 13 	call	0x269e	; 0x269e <MTWI_twistatusCheckStatus>
    285a:	80 3a       	cpi	r24, 0xA0	; 160
    285c:	11 f4       	brne	.+4      	; 0x2862 <MTWI_charSlaveReceive+0x3a>
			{
				MTWI_voidClearFlag();
    285e:	0e 94 66 13 	call	0x26cc	; 0x26cc <MTWI_voidClearFlag>
			}

		}
	}
	return L_u8DataReceive ;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
}
    2864:	0f 90       	pop	r0
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <main>:
#include "MTWI_interface.h"
#include "HLCD_interface.h"
#include "HNVM_interface.h"

int main(void)
{
    286c:	0f 93       	push	r16
    286e:	1f 93       	push	r17
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	c2 58       	subi	r28, 0x82	; 130
    287a:	d0 40       	sbci	r29, 0x00	; 0
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8B1, L_u8B2, L_u8B3, L_u8Data;
	MDIO_stderrorSetPinDirection(MDIO_PORTA,MDIO_PIN0,MDIO_INPUT_PULLUP);
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	42 e0       	ldi	r20, 0x02	; 2
    288c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(MDIO_PORTA,MDIO_PIN1,MDIO_INPUT_PULLUP);
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	61 e0       	ldi	r22, 0x01	; 1
    2894:	42 e0       	ldi	r20, 0x02	; 2
    2896:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(MDIO_PORTA,MDIO_PIN2,MDIO_INPUT_PULLUP);
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	62 e0       	ldi	r22, 0x02	; 2
    289e:	42 e0       	ldi	r20, 0x02	; 2
    28a0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <MDIO_stderrorSetPinDirection>

	MDIO_stderrorSetPinDirection(MDIO_PORTC,MDIO_PIN0,MDIO_INPUT_PULLUP);
    28a4:	83 e0       	ldi	r24, 0x03	; 3
    28a6:	60 e0       	ldi	r22, 0x00	; 0
    28a8:	42 e0       	ldi	r20, 0x02	; 2
    28aa:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <MDIO_stderrorSetPinDirection>
	MDIO_stderrorSetPinDirection(MDIO_PORTC,MDIO_PIN1,MDIO_INPUT_PULLUP);
    28ae:	83 e0       	ldi	r24, 0x03	; 3
    28b0:	61 e0       	ldi	r22, 0x01	; 1
    28b2:	42 e0       	ldi	r20, 0x02	; 2
    28b4:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <MDIO_stderrorSetPinDirection>

	HNVM_stderrInit();
    28b8:	0e 94 2d 0c 	call	0x185a	; 0x185a <HNVM_stderrInit>
	HLCD_voidInit();
    28bc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_voidInit>
	HLCD_voidSendString("Welcome");
    28c0:	80 e6       	ldi	r24, 0x60	; 96
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <HLCD_voidSendString>
    28c8:	fe 01       	movw	r30, r28
    28ca:	e5 58       	subi	r30, 0x85	; 133
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	aa e7       	ldi	r26, 0x7A	; 122
    28d4:	b4 e4       	ldi	r27, 0x44	; 68
    28d6:	80 83       	st	Z, r24
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	a2 83       	std	Z+2, r26	; 0x02
    28dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	8e 01       	movw	r16, r28
    28e0:	09 58       	subi	r16, 0x89	; 137
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	fe 01       	movw	r30, r28
    28e6:	e5 58       	subi	r30, 0x85	; 133
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	4a ef       	ldi	r20, 0xFA	; 250
    28f8:	54 e4       	ldi	r21, 0x44	; 68
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	f8 01       	movw	r30, r16
    2904:	80 83       	st	Z, r24
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	a2 83       	std	Z+2, r26	; 0x02
    290a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    290c:	fe 01       	movw	r30, r28
    290e:	e9 58       	subi	r30, 0x89	; 137
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	60 81       	ld	r22, Z
    2914:	71 81       	ldd	r23, Z+1	; 0x01
    2916:	82 81       	ldd	r24, Z+2	; 0x02
    2918:	93 81       	ldd	r25, Z+3	; 0x03
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5f e3       	ldi	r21, 0x3F	; 63
    2922:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2926:	88 23       	and	r24, r24
    2928:	44 f4       	brge	.+16     	; 0x293a <main+0xce>
		__ticks = 1;
    292a:	fe 01       	movw	r30, r28
    292c:	eb 58       	subi	r30, 0x8B	; 139
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24
    2938:	64 c0       	rjmp	.+200    	; 0x2a02 <main+0x196>
	else if (__tmp > 65535)
    293a:	fe 01       	movw	r30, r28
    293c:	e9 58       	subi	r30, 0x89	; 137
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	4f e7       	ldi	r20, 0x7F	; 127
    294e:	57 e4       	ldi	r21, 0x47	; 71
    2950:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2954:	18 16       	cp	r1, r24
    2956:	0c f0       	brlt	.+2      	; 0x295a <main+0xee>
    2958:	43 c0       	rjmp	.+134    	; 0x29e0 <main+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295a:	fe 01       	movw	r30, r28
    295c:	e5 58       	subi	r30, 0x85	; 133
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e2       	ldi	r20, 0x20	; 32
    296e:	51 e4       	ldi	r21, 0x41	; 65
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8e 01       	movw	r16, r28
    297a:	0b 58       	subi	r16, 0x8B	; 139
    297c:	1f 4f       	sbci	r17, 0xFF	; 255
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	f8 01       	movw	r30, r16
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	80 83       	st	Z, r24
    2990:	1f c0       	rjmp	.+62     	; 0x29d0 <main+0x164>
    2992:	fe 01       	movw	r30, r28
    2994:	ed 58       	subi	r30, 0x8D	; 141
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	88 ec       	ldi	r24, 0xC8	; 200
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	fe 01       	movw	r30, r28
    29a2:	ed 58       	subi	r30, 0x8D	; 141
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	91 81       	ldd	r25, Z+1	; 0x01
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <main+0x13e>
    29ae:	fe 01       	movw	r30, r28
    29b0:	ed 58       	subi	r30, 0x8D	; 141
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b8:	de 01       	movw	r26, r28
    29ba:	ab 58       	subi	r26, 0x8B	; 139
    29bc:	bf 4f       	sbci	r27, 0xFF	; 255
    29be:	fe 01       	movw	r30, r28
    29c0:	eb 58       	subi	r30, 0x8B	; 139
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	80 81       	ld	r24, Z
    29c6:	91 81       	ldd	r25, Z+1	; 0x01
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	11 96       	adiw	r26, 0x01	; 1
    29cc:	9c 93       	st	X, r25
    29ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d0:	fe 01       	movw	r30, r28
    29d2:	eb 58       	subi	r30, 0x8B	; 139
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	91 81       	ldd	r25, Z+1	; 0x01
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	d1 f6       	brne	.-76     	; 0x2992 <main+0x126>
    29de:	27 c0       	rjmp	.+78     	; 0x2a2e <main+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e0:	8e 01       	movw	r16, r28
    29e2:	0b 58       	subi	r16, 0x8B	; 139
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	fe 01       	movw	r30, r28
    29e8:	e9 58       	subi	r30, 0x89	; 137
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	60 81       	ld	r22, Z
    29ee:	71 81       	ldd	r23, Z+1	; 0x01
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	f8 01       	movw	r30, r16
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
    2a02:	de 01       	movw	r26, r28
    2a04:	af 58       	subi	r26, 0x8F	; 143
    2a06:	bf 4f       	sbci	r27, 0xFF	; 255
    2a08:	fe 01       	movw	r30, r28
    2a0a:	eb 58       	subi	r30, 0x8B	; 139
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	8d 93       	st	X+, r24
    2a14:	9c 93       	st	X, r25
    2a16:	fe 01       	movw	r30, r28
    2a18:	ef 58       	subi	r30, 0x8F	; 143
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	80 81       	ld	r24, Z
    2a1e:	91 81       	ldd	r25, Z+1	; 0x01
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <main+0x1b4>
    2a24:	fe 01       	movw	r30, r28
    2a26:	ef 58       	subi	r30, 0x8F	; 143
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	91 83       	std	Z+1, r25	; 0x01
    2a2c:	80 83       	st	Z, r24
	_delay_ms(1000);
	HLCD_voidSendCmd(0x01);
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
    2a34:	fe 01       	movw	r30, r28
    2a36:	e3 59       	subi	r30, 0x93	; 147
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a0 e0       	ldi	r26, 0x00	; 0
    2a40:	b0 e4       	ldi	r27, 0x40	; 64
    2a42:	80 83       	st	Z, r24
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	a2 83       	std	Z+2, r26	; 0x02
    2a48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	8e 01       	movw	r16, r28
    2a4c:	07 59       	subi	r16, 0x97	; 151
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	fe 01       	movw	r30, r28
    2a52:	e3 59       	subi	r30, 0x93	; 147
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	60 81       	ld	r22, Z
    2a58:	71 81       	ldd	r23, Z+1	; 0x01
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	93 81       	ldd	r25, Z+3	; 0x03
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	4a ef       	ldi	r20, 0xFA	; 250
    2a64:	54 e4       	ldi	r21, 0x44	; 68
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	f8 01       	movw	r30, r16
    2a70:	80 83       	st	Z, r24
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	a2 83       	std	Z+2, r26	; 0x02
    2a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e7 59       	subi	r30, 0x97	; 151
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	44 f4       	brge	.+16     	; 0x2aa6 <main+0x23a>
		__ticks = 1;
    2a96:	fe 01       	movw	r30, r28
    2a98:	e9 59       	subi	r30, 0x99	; 153
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	64 c0       	rjmp	.+200    	; 0x2b6e <main+0x302>
	else if (__tmp > 65535)
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e7 59       	subi	r30, 0x97	; 151
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	60 81       	ld	r22, Z
    2aae:	71 81       	ldd	r23, Z+1	; 0x01
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	93 81       	ldd	r25, Z+3	; 0x03
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	57 e4       	ldi	r21, 0x47	; 71
    2abc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	0c f0       	brlt	.+2      	; 0x2ac6 <main+0x25a>
    2ac4:	43 c0       	rjmp	.+134    	; 0x2b4c <main+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e3 59       	subi	r30, 0x93	; 147
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8e 01       	movw	r16, r28
    2ae6:	09 59       	subi	r16, 0x99	; 153
    2ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	f8 01       	movw	r30, r16
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	80 83       	st	Z, r24
    2afc:	1f c0       	rjmp	.+62     	; 0x2b3c <main+0x2d0>
    2afe:	fe 01       	movw	r30, r28
    2b00:	eb 59       	subi	r30, 0x9B	; 155
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	88 ec       	ldi	r24, 0xC8	; 200
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	80 83       	st	Z, r24
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	eb 59       	subi	r30, 0x9B	; 155
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	91 81       	ldd	r25, Z+1	; 0x01
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <main+0x2aa>
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	eb 59       	subi	r30, 0x9B	; 155
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b24:	de 01       	movw	r26, r28
    2b26:	a9 59       	subi	r26, 0x99	; 153
    2b28:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e9 59       	subi	r30, 0x99	; 153
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	11 96       	adiw	r26, 0x01	; 1
    2b38:	9c 93       	st	X, r25
    2b3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e9 59       	subi	r30, 0x99	; 153
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	d1 f6       	brne	.-76     	; 0x2afe <main+0x292>
    2b4a:	27 c0       	rjmp	.+78     	; 0x2b9a <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4c:	8e 01       	movw	r16, r28
    2b4e:	09 59       	subi	r16, 0x99	; 153
    2b50:	1f 4f       	sbci	r17, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	e7 59       	subi	r30, 0x97	; 151
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	f8 01       	movw	r30, r16
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
    2b6e:	de 01       	movw	r26, r28
    2b70:	ad 59       	subi	r26, 0x9D	; 157
    2b72:	bf 4f       	sbci	r27, 0xFF	; 255
    2b74:	fe 01       	movw	r30, r28
    2b76:	e9 59       	subi	r30, 0x99	; 153
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	80 81       	ld	r24, Z
    2b7c:	91 81       	ldd	r25, Z+1	; 0x01
    2b7e:	8d 93       	st	X+, r24
    2b80:	9c 93       	st	X, r25
    2b82:	fe 01       	movw	r30, r28
    2b84:	ed 59       	subi	r30, 0x9D	; 157
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <main+0x320>
    2b90:	fe 01       	movw	r30, r28
    2b92:	ed 59       	subi	r30, 0x9D	; 157
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	80 83       	st	Z, r24
	_delay_ms(2);
	while(1)
	{

		MDIO_stderrorGetPinValue(MDIO_PORTA,MDIO_PIN0,&L_u8B1);
    2b9a:	9e 01       	movw	r18, r28
    2b9c:	20 58       	subi	r18, 0x80	; 128
    2b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	a9 01       	movw	r20, r18
    2ba6:	0e 94 28 11 	call	0x2250	; 0x2250 <MDIO_stderrorGetPinValue>
		MDIO_stderrorGetPinValue(MDIO_PORTA,MDIO_PIN1,&L_u8B2);
    2baa:	9e 01       	movw	r18, r28
    2bac:	2f 57       	subi	r18, 0x7F	; 127
    2bae:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	61 e0       	ldi	r22, 0x01	; 1
    2bb4:	a9 01       	movw	r20, r18
    2bb6:	0e 94 28 11 	call	0x2250	; 0x2250 <MDIO_stderrorGetPinValue>
		MDIO_stderrorGetPinValue(MDIO_PORTA,MDIO_PIN2,&L_u8B3);
    2bba:	9e 01       	movw	r18, r28
    2bbc:	2e 57       	subi	r18, 0x7E	; 126
    2bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	62 e0       	ldi	r22, 0x02	; 2
    2bc4:	a9 01       	movw	r20, r18
    2bc6:	0e 94 28 11 	call	0x2250	; 0x2250 <MDIO_stderrorGetPinValue>
		if(!L_u8B1)
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e0 58       	subi	r30, 0x80	; 128
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	88 23       	and	r24, r24
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <main+0x36c>
    2bd6:	74 c1       	rjmp	.+744    	; 0x2ec0 <main+0x654>
		{
			HNVM_voidWrite(0x00, 'M');
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	6d e4       	ldi	r22, 0x4D	; 77
    2bde:	0e 94 43 0c 	call	0x1886	; 0x1886 <HNVM_voidWrite>
			HLCD_voidSendString("Data written: M");
    2be2:	88 e6       	ldi	r24, 0x68	; 104
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <HLCD_voidSendString>
    2bea:	fe 01       	movw	r30, r28
    2bec:	e1 5a       	subi	r30, 0xA1	; 161
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	aa e7       	ldi	r26, 0x7A	; 122
    2bf6:	b4 e4       	ldi	r27, 0x44	; 68
    2bf8:	80 83       	st	Z, r24
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	a2 83       	std	Z+2, r26	; 0x02
    2bfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	8e 01       	movw	r16, r28
    2c02:	05 5a       	subi	r16, 0xA5	; 165
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	fe 01       	movw	r30, r28
    2c08:	e1 5a       	subi	r30, 0xA1	; 161
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	60 81       	ld	r22, Z
    2c0e:	71 81       	ldd	r23, Z+1	; 0x01
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	93 81       	ldd	r25, Z+3	; 0x03
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	4a ef       	ldi	r20, 0xFA	; 250
    2c1a:	54 e4       	ldi	r21, 0x44	; 68
    2c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	f8 01       	movw	r30, r16
    2c26:	80 83       	st	Z, r24
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	a2 83       	std	Z+2, r26	; 0x02
    2c2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c2e:	fe 01       	movw	r30, r28
    2c30:	e5 5a       	subi	r30, 0xA5	; 165
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	60 81       	ld	r22, Z
    2c36:	71 81       	ldd	r23, Z+1	; 0x01
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c48:	88 23       	and	r24, r24
    2c4a:	44 f4       	brge	.+16     	; 0x2c5c <main+0x3f0>
		__ticks = 1;
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e7 5a       	subi	r30, 0xA7	; 167
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	91 83       	std	Z+1, r25	; 0x01
    2c58:	80 83       	st	Z, r24
    2c5a:	64 c0       	rjmp	.+200    	; 0x2d24 <main+0x4b8>
	else if (__tmp > 65535)
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e5 5a       	subi	r30, 0xA5	; 165
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	60 81       	ld	r22, Z
    2c64:	71 81       	ldd	r23, Z+1	; 0x01
    2c66:	82 81       	ldd	r24, Z+2	; 0x02
    2c68:	93 81       	ldd	r25, Z+3	; 0x03
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	3f ef       	ldi	r19, 0xFF	; 255
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	57 e4       	ldi	r21, 0x47	; 71
    2c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	0c f0       	brlt	.+2      	; 0x2c7c <main+0x410>
    2c7a:	43 c0       	rjmp	.+134    	; 0x2d02 <main+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e1 5a       	subi	r30, 0xA1	; 161
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e2       	ldi	r20, 0x20	; 32
    2c90:	51 e4       	ldi	r21, 0x41	; 65
    2c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	8e 01       	movw	r16, r28
    2c9c:	07 5a       	subi	r16, 0xA7	; 167
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	f8 01       	movw	r30, r16
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	80 83       	st	Z, r24
    2cb2:	1f c0       	rjmp	.+62     	; 0x2cf2 <main+0x486>
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e9 5a       	subi	r30, 0xA9	; 169
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	88 ec       	ldi	r24, 0xC8	; 200
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	91 83       	std	Z+1, r25	; 0x01
    2cc0:	80 83       	st	Z, r24
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e9 5a       	subi	r30, 0xA9	; 169
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 81       	ld	r24, Z
    2cca:	91 81       	ldd	r25, Z+1	; 0x01
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <main+0x460>
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e9 5a       	subi	r30, 0xA9	; 169
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cda:	de 01       	movw	r26, r28
    2cdc:	a7 5a       	subi	r26, 0xA7	; 167
    2cde:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e7 5a       	subi	r30, 0xA7	; 167
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	80 81       	ld	r24, Z
    2ce8:	91 81       	ldd	r25, Z+1	; 0x01
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	11 96       	adiw	r26, 0x01	; 1
    2cee:	9c 93       	st	X, r25
    2cf0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e7 5a       	subi	r30, 0xA7	; 167
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	d1 f6       	brne	.-76     	; 0x2cb4 <main+0x448>
    2d00:	27 c0       	rjmp	.+78     	; 0x2d50 <main+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d02:	8e 01       	movw	r16, r28
    2d04:	07 5a       	subi	r16, 0xA7	; 167
    2d06:	1f 4f       	sbci	r17, 0xFF	; 255
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e5 5a       	subi	r30, 0xA5	; 165
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	60 81       	ld	r22, Z
    2d10:	71 81       	ldd	r23, Z+1	; 0x01
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	f8 01       	movw	r30, r16
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
    2d24:	de 01       	movw	r26, r28
    2d26:	ab 5a       	subi	r26, 0xAB	; 171
    2d28:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e7 5a       	subi	r30, 0xA7	; 167
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	8d 93       	st	X+, r24
    2d36:	9c 93       	st	X, r25
    2d38:	fe 01       	movw	r30, r28
    2d3a:	eb 5a       	subi	r30, 0xAB	; 171
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <main+0x4d6>
    2d46:	fe 01       	movw	r30, r28
    2d48:	eb 5a       	subi	r30, 0xAB	; 171
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	80 83       	st	Z, r24
			_delay_ms(1000);
			HLCD_voidSendCmd(0x01);
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
    2d56:	fe 01       	movw	r30, r28
    2d58:	ef 5a       	subi	r30, 0xAF	; 175
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	a0 e0       	ldi	r26, 0x00	; 0
    2d62:	b0 e4       	ldi	r27, 0x40	; 64
    2d64:	80 83       	st	Z, r24
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	a2 83       	std	Z+2, r26	; 0x02
    2d6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6c:	8e 01       	movw	r16, r28
    2d6e:	03 5b       	subi	r16, 0xB3	; 179
    2d70:	1f 4f       	sbci	r17, 0xFF	; 255
    2d72:	fe 01       	movw	r30, r28
    2d74:	ef 5a       	subi	r30, 0xAF	; 175
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	60 81       	ld	r22, Z
    2d7a:	71 81       	ldd	r23, Z+1	; 0x01
    2d7c:	82 81       	ldd	r24, Z+2	; 0x02
    2d7e:	93 81       	ldd	r25, Z+3	; 0x03
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	4a ef       	ldi	r20, 0xFA	; 250
    2d86:	54 e4       	ldi	r21, 0x44	; 68
    2d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	f8 01       	movw	r30, r16
    2d92:	80 83       	st	Z, r24
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	a2 83       	std	Z+2, r26	; 0x02
    2d98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e3 5b       	subi	r30, 0xB3	; 179
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	60 81       	ld	r22, Z
    2da2:	71 81       	ldd	r23, Z+1	; 0x01
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e8       	ldi	r20, 0x80	; 128
    2dae:	5f e3       	ldi	r21, 0x3F	; 63
    2db0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2db4:	88 23       	and	r24, r24
    2db6:	44 f4       	brge	.+16     	; 0x2dc8 <main+0x55c>
		__ticks = 1;
    2db8:	fe 01       	movw	r30, r28
    2dba:	e5 5b       	subi	r30, 0xB5	; 181
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	80 83       	st	Z, r24
    2dc6:	64 c0       	rjmp	.+200    	; 0x2e90 <main+0x624>
	else if (__tmp > 65535)
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e3 5b       	subi	r30, 0xB3	; 179
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	3f ef       	ldi	r19, 0xFF	; 255
    2dda:	4f e7       	ldi	r20, 0x7F	; 127
    2ddc:	57 e4       	ldi	r21, 0x47	; 71
    2dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de2:	18 16       	cp	r1, r24
    2de4:	0c f0       	brlt	.+2      	; 0x2de8 <main+0x57c>
    2de6:	43 c0       	rjmp	.+134    	; 0x2e6e <main+0x602>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de8:	fe 01       	movw	r30, r28
    2dea:	ef 5a       	subi	r30, 0xAF	; 175
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	60 81       	ld	r22, Z
    2df0:	71 81       	ldd	r23, Z+1	; 0x01
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e2       	ldi	r20, 0x20	; 32
    2dfc:	51 e4       	ldi	r21, 0x41	; 65
    2dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	8e 01       	movw	r16, r28
    2e08:	05 5b       	subi	r16, 0xB5	; 181
    2e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0c:	bc 01       	movw	r22, r24
    2e0e:	cd 01       	movw	r24, r26
    2e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	f8 01       	movw	r30, r16
    2e1a:	91 83       	std	Z+1, r25	; 0x01
    2e1c:	80 83       	st	Z, r24
    2e1e:	1f c0       	rjmp	.+62     	; 0x2e5e <main+0x5f2>
    2e20:	fe 01       	movw	r30, r28
    2e22:	e7 5b       	subi	r30, 0xB7	; 183
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	88 ec       	ldi	r24, 0xC8	; 200
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	80 83       	st	Z, r24
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e7 5b       	subi	r30, 0xB7	; 183
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	80 81       	ld	r24, Z
    2e36:	91 81       	ldd	r25, Z+1	; 0x01
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <main+0x5cc>
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e7 5b       	subi	r30, 0xB7	; 183
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e46:	de 01       	movw	r26, r28
    2e48:	a5 5b       	subi	r26, 0xB5	; 181
    2e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e5 5b       	subi	r30, 0xB5	; 181
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	11 96       	adiw	r26, 0x01	; 1
    2e5a:	9c 93       	st	X, r25
    2e5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5e:	fe 01       	movw	r30, r28
    2e60:	e5 5b       	subi	r30, 0xB5	; 181
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	80 81       	ld	r24, Z
    2e66:	91 81       	ldd	r25, Z+1	; 0x01
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	d1 f6       	brne	.-76     	; 0x2e20 <main+0x5b4>
    2e6c:	34 c2       	rjmp	.+1128   	; 0x32d6 <main+0xa6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6e:	8e 01       	movw	r16, r28
    2e70:	05 5b       	subi	r16, 0xB5	; 181
    2e72:	1f 4f       	sbci	r17, 0xFF	; 255
    2e74:	fe 01       	movw	r30, r28
    2e76:	e3 5b       	subi	r30, 0xB3	; 179
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	60 81       	ld	r22, Z
    2e7c:	71 81       	ldd	r23, Z+1	; 0x01
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	f8 01       	movw	r30, r16
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	80 83       	st	Z, r24
    2e90:	de 01       	movw	r26, r28
    2e92:	a9 5b       	subi	r26, 0xB9	; 185
    2e94:	bf 4f       	sbci	r27, 0xFF	; 255
    2e96:	fe 01       	movw	r30, r28
    2e98:	e5 5b       	subi	r30, 0xB5	; 181
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	80 81       	ld	r24, Z
    2e9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ea0:	11 96       	adiw	r26, 0x01	; 1
    2ea2:	9c 93       	st	X, r25
    2ea4:	8e 93       	st	-X, r24
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e9 5b       	subi	r30, 0xB9	; 185
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <main+0x644>
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e9 5b       	subi	r30, 0xB9	; 185
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	91 83       	std	Z+1, r25	; 0x01
    2ebc:	80 83       	st	Z, r24
    2ebe:	0b c2       	rjmp	.+1046   	; 0x32d6 <main+0xa6a>
			_delay_ms(2);
		}
		else if(!L_u8B2)
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	ef 57       	subi	r30, 0x7F	; 127
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	88 23       	and	r24, r24
    2eca:	09 f0       	breq	.+2      	; 0x2ece <main+0x662>
    2ecc:	04 c1       	rjmp	.+520    	; 0x30d6 <main+0x86a>
		{
			HNVM_voidWrite(0x00, 'E');
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	65 e4       	ldi	r22, 0x45	; 69
    2ed4:	0e 94 43 0c 	call	0x1886	; 0x1886 <HNVM_voidWrite>
			HLCD_voidSendString("Data written: E");
    2ed8:	88 e7       	ldi	r24, 0x78	; 120
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <HLCD_voidSendString>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	ed 5b       	subi	r30, 0xBD	; 189
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	aa e7       	ldi	r26, 0x7A	; 122
    2eec:	b4 e4       	ldi	r27, 0x44	; 68
    2eee:	80 83       	st	Z, r24
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	a2 83       	std	Z+2, r26	; 0x02
    2ef4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef6:	8e 01       	movw	r16, r28
    2ef8:	01 5c       	subi	r16, 0xC1	; 193
    2efa:	1f 4f       	sbci	r17, 0xFF	; 255
    2efc:	fe 01       	movw	r30, r28
    2efe:	ed 5b       	subi	r30, 0xBD	; 189
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a ef       	ldi	r20, 0xFA	; 250
    2f10:	54 e4       	ldi	r21, 0x44	; 68
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	80 83       	st	Z, r24
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	a2 83       	std	Z+2, r26	; 0x02
    2f22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f24:	fe 01       	movw	r30, r28
    2f26:	ff 96       	adiw	r30, 0x3f	; 63
    2f28:	60 81       	ld	r22, Z
    2f2a:	71 81       	ldd	r23, Z+1	; 0x01
    2f2c:	82 81       	ldd	r24, Z+2	; 0x02
    2f2e:	93 81       	ldd	r25, Z+3	; 0x03
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e8       	ldi	r20, 0x80	; 128
    2f36:	5f e3       	ldi	r21, 0x3F	; 63
    2f38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f3c:	88 23       	and	r24, r24
    2f3e:	2c f4       	brge	.+10     	; 0x2f4a <main+0x6de>
		__ticks = 1;
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	9e af       	std	Y+62, r25	; 0x3e
    2f46:	8d af       	std	Y+61, r24	; 0x3d
    2f48:	46 c0       	rjmp	.+140    	; 0x2fd6 <main+0x76a>
	else if (__tmp > 65535)
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ff 96       	adiw	r30, 0x3f	; 63
    2f4e:	60 81       	ld	r22, Z
    2f50:	71 81       	ldd	r23, Z+1	; 0x01
    2f52:	82 81       	ldd	r24, Z+2	; 0x02
    2f54:	93 81       	ldd	r25, Z+3	; 0x03
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	3f ef       	ldi	r19, 0xFF	; 255
    2f5a:	4f e7       	ldi	r20, 0x7F	; 127
    2f5c:	57 e4       	ldi	r21, 0x47	; 71
    2f5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f62:	18 16       	cp	r1, r24
    2f64:	64 f5       	brge	.+88     	; 0x2fbe <main+0x752>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f66:	fe 01       	movw	r30, r28
    2f68:	ed 5b       	subi	r30, 0xBD	; 189
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	40 e2       	ldi	r20, 0x20	; 32
    2f7a:	51 e4       	ldi	r21, 0x41	; 65
    2f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	bc 01       	movw	r22, r24
    2f86:	cd 01       	movw	r24, r26
    2f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	9e af       	std	Y+62, r25	; 0x3e
    2f92:	8d af       	std	Y+61, r24	; 0x3d
    2f94:	0f c0       	rjmp	.+30     	; 0x2fb4 <main+0x748>
    2f96:	88 ec       	ldi	r24, 0xC8	; 200
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	9c af       	std	Y+60, r25	; 0x3c
    2f9c:	8b af       	std	Y+59, r24	; 0x3b
    2f9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fa0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	f1 f7       	brne	.-4      	; 0x2fa2 <main+0x736>
    2fa6:	9c af       	std	Y+60, r25	; 0x3c
    2fa8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2faa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fac:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	9e af       	std	Y+62, r25	; 0x3e
    2fb2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fb8:	00 97       	sbiw	r24, 0x00	; 0
    2fba:	69 f7       	brne	.-38     	; 0x2f96 <main+0x72a>
    2fbc:	16 c0       	rjmp	.+44     	; 0x2fea <main+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	ff 96       	adiw	r30, 0x3f	; 63
    2fc2:	60 81       	ld	r22, Z
    2fc4:	71 81       	ldd	r23, Z+1	; 0x01
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	93 81       	ldd	r25, Z+3	; 0x03
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9e af       	std	Y+62, r25	; 0x3e
    2fd4:	8d af       	std	Y+61, r24	; 0x3d
    2fd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fda:	9a af       	std	Y+58, r25	; 0x3a
    2fdc:	89 af       	std	Y+57, r24	; 0x39
    2fde:	89 ad       	ldd	r24, Y+57	; 0x39
    2fe0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <main+0x776>
    2fe6:	9a af       	std	Y+58, r25	; 0x3a
    2fe8:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			HLCD_voidSendCmd(0x01);
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	a0 e0       	ldi	r26, 0x00	; 0
    2ff6:	b0 e4       	ldi	r27, 0x40	; 64
    2ff8:	8d ab       	std	Y+53, r24	; 0x35
    2ffa:	9e ab       	std	Y+54, r25	; 0x36
    2ffc:	af ab       	std	Y+55, r26	; 0x37
    2ffe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3000:	6d a9       	ldd	r22, Y+53	; 0x35
    3002:	7e a9       	ldd	r23, Y+54	; 0x36
    3004:	8f a9       	ldd	r24, Y+55	; 0x37
    3006:	98 ad       	ldd	r25, Y+56	; 0x38
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	4a ef       	ldi	r20, 0xFA	; 250
    300e:	54 e4       	ldi	r21, 0x44	; 68
    3010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	89 ab       	std	Y+49, r24	; 0x31
    301a:	9a ab       	std	Y+50, r25	; 0x32
    301c:	ab ab       	std	Y+51, r26	; 0x33
    301e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3020:	69 a9       	ldd	r22, Y+49	; 0x31
    3022:	7a a9       	ldd	r23, Y+50	; 0x32
    3024:	8b a9       	ldd	r24, Y+51	; 0x33
    3026:	9c a9       	ldd	r25, Y+52	; 0x34
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e8       	ldi	r20, 0x80	; 128
    302e:	5f e3       	ldi	r21, 0x3F	; 63
    3030:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3034:	88 23       	and	r24, r24
    3036:	2c f4       	brge	.+10     	; 0x3042 <main+0x7d6>
		__ticks = 1;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	98 ab       	std	Y+48, r25	; 0x30
    303e:	8f a7       	std	Y+47, r24	; 0x2f
    3040:	3f c0       	rjmp	.+126    	; 0x30c0 <main+0x854>
	else if (__tmp > 65535)
    3042:	69 a9       	ldd	r22, Y+49	; 0x31
    3044:	7a a9       	ldd	r23, Y+50	; 0x32
    3046:	8b a9       	ldd	r24, Y+51	; 0x33
    3048:	9c a9       	ldd	r25, Y+52	; 0x34
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	3f ef       	ldi	r19, 0xFF	; 255
    304e:	4f e7       	ldi	r20, 0x7F	; 127
    3050:	57 e4       	ldi	r21, 0x47	; 71
    3052:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3056:	18 16       	cp	r1, r24
    3058:	4c f5       	brge	.+82     	; 0x30ac <main+0x840>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305a:	6d a9       	ldd	r22, Y+53	; 0x35
    305c:	7e a9       	ldd	r23, Y+54	; 0x36
    305e:	8f a9       	ldd	r24, Y+55	; 0x37
    3060:	98 ad       	ldd	r25, Y+56	; 0x38
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e2       	ldi	r20, 0x20	; 32
    3068:	51 e4       	ldi	r21, 0x41	; 65
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	bc 01       	movw	r22, r24
    3074:	cd 01       	movw	r24, r26
    3076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	98 ab       	std	Y+48, r25	; 0x30
    3080:	8f a7       	std	Y+47, r24	; 0x2f
    3082:	0f c0       	rjmp	.+30     	; 0x30a2 <main+0x836>
    3084:	88 ec       	ldi	r24, 0xC8	; 200
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	9e a7       	std	Y+46, r25	; 0x2e
    308a:	8d a7       	std	Y+45, r24	; 0x2d
    308c:	8d a5       	ldd	r24, Y+45	; 0x2d
    308e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <main+0x824>
    3094:	9e a7       	std	Y+46, r25	; 0x2e
    3096:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3098:	8f a5       	ldd	r24, Y+47	; 0x2f
    309a:	98 a9       	ldd	r25, Y+48	; 0x30
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	98 ab       	std	Y+48, r25	; 0x30
    30a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30a4:	98 a9       	ldd	r25, Y+48	; 0x30
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	69 f7       	brne	.-38     	; 0x3084 <main+0x818>
    30aa:	15 c1       	rjmp	.+554    	; 0x32d6 <main+0xa6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ac:	69 a9       	ldd	r22, Y+49	; 0x31
    30ae:	7a a9       	ldd	r23, Y+50	; 0x32
    30b0:	8b a9       	ldd	r24, Y+51	; 0x33
    30b2:	9c a9       	ldd	r25, Y+52	; 0x34
    30b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	98 ab       	std	Y+48, r25	; 0x30
    30be:	8f a7       	std	Y+47, r24	; 0x2f
    30c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30c2:	98 a9       	ldd	r25, Y+48	; 0x30
    30c4:	9c a7       	std	Y+44, r25	; 0x2c
    30c6:	8b a7       	std	Y+43, r24	; 0x2b
    30c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <main+0x860>
    30d0:	9c a7       	std	Y+44, r25	; 0x2c
    30d2:	8b a7       	std	Y+43, r24	; 0x2b
    30d4:	00 c1       	rjmp	.+512    	; 0x32d6 <main+0xa6a>
			_delay_ms(2);
		}
		else if(!L_u8B3)
    30d6:	fe 01       	movw	r30, r28
    30d8:	ee 57       	subi	r30, 0x7E	; 126
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 81       	ld	r24, Z
    30de:	88 23       	and	r24, r24
    30e0:	09 f0       	breq	.+2      	; 0x30e4 <main+0x878>
    30e2:	f9 c0       	rjmp	.+498    	; 0x32d6 <main+0xa6a>
		{
			L_u8Data = HNVM_u8Read(0x00);
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 93 0c 	call	0x1926	; 0x1926 <HNVM_u8Read>
    30ec:	fe 01       	movw	r30, r28
    30ee:	e1 58       	subi	r30, 0x81	; 129
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 83       	st	Z, r24
			HLCD_voidSendString("Read Data: ");
    30f4:	88 e8       	ldi	r24, 0x88	; 136
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <HLCD_voidSendString>
			HLCD_voidSendChar(L_u8Data);
    30fc:	fe 01       	movw	r30, r28
    30fe:	e1 58       	subi	r30, 0x81	; 129
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	80 81       	ld	r24, Z
    3104:	0e 94 79 08 	call	0x10f2	; 0x10f2 <HLCD_voidSendChar>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	aa e7       	ldi	r26, 0x7A	; 122
    310e:	b4 e4       	ldi	r27, 0x44	; 68
    3110:	8f a3       	std	Y+39, r24	; 0x27
    3112:	98 a7       	std	Y+40, r25	; 0x28
    3114:	a9 a7       	std	Y+41, r26	; 0x29
    3116:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3118:	6f a1       	ldd	r22, Y+39	; 0x27
    311a:	78 a5       	ldd	r23, Y+40	; 0x28
    311c:	89 a5       	ldd	r24, Y+41	; 0x29
    311e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	4a ef       	ldi	r20, 0xFA	; 250
    3126:	54 e4       	ldi	r21, 0x44	; 68
    3128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	8b a3       	std	Y+35, r24	; 0x23
    3132:	9c a3       	std	Y+36, r25	; 0x24
    3134:	ad a3       	std	Y+37, r26	; 0x25
    3136:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3138:	6b a1       	ldd	r22, Y+35	; 0x23
    313a:	7c a1       	ldd	r23, Y+36	; 0x24
    313c:	8d a1       	ldd	r24, Y+37	; 0x25
    313e:	9e a1       	ldd	r25, Y+38	; 0x26
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	40 e8       	ldi	r20, 0x80	; 128
    3146:	5f e3       	ldi	r21, 0x3F	; 63
    3148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    314c:	88 23       	and	r24, r24
    314e:	2c f4       	brge	.+10     	; 0x315a <main+0x8ee>
		__ticks = 1;
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	9a a3       	std	Y+34, r25	; 0x22
    3156:	89 a3       	std	Y+33, r24	; 0x21
    3158:	3f c0       	rjmp	.+126    	; 0x31d8 <main+0x96c>
	else if (__tmp > 65535)
    315a:	6b a1       	ldd	r22, Y+35	; 0x23
    315c:	7c a1       	ldd	r23, Y+36	; 0x24
    315e:	8d a1       	ldd	r24, Y+37	; 0x25
    3160:	9e a1       	ldd	r25, Y+38	; 0x26
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	3f ef       	ldi	r19, 0xFF	; 255
    3166:	4f e7       	ldi	r20, 0x7F	; 127
    3168:	57 e4       	ldi	r21, 0x47	; 71
    316a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    316e:	18 16       	cp	r1, r24
    3170:	4c f5       	brge	.+82     	; 0x31c4 <main+0x958>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3172:	6f a1       	ldd	r22, Y+39	; 0x27
    3174:	78 a5       	ldd	r23, Y+40	; 0x28
    3176:	89 a5       	ldd	r24, Y+41	; 0x29
    3178:	9a a5       	ldd	r25, Y+42	; 0x2a
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e2       	ldi	r20, 0x20	; 32
    3180:	51 e4       	ldi	r21, 0x41	; 65
    3182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	bc 01       	movw	r22, r24
    318c:	cd 01       	movw	r24, r26
    318e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	9a a3       	std	Y+34, r25	; 0x22
    3198:	89 a3       	std	Y+33, r24	; 0x21
    319a:	0f c0       	rjmp	.+30     	; 0x31ba <main+0x94e>
    319c:	88 ec       	ldi	r24, 0xC8	; 200
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	98 a3       	std	Y+32, r25	; 0x20
    31a2:	8f 8f       	std	Y+31, r24	; 0x1f
    31a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31a6:	98 a1       	ldd	r25, Y+32	; 0x20
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	f1 f7       	brne	.-4      	; 0x31a8 <main+0x93c>
    31ac:	98 a3       	std	Y+32, r25	; 0x20
    31ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b0:	89 a1       	ldd	r24, Y+33	; 0x21
    31b2:	9a a1       	ldd	r25, Y+34	; 0x22
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	9a a3       	std	Y+34, r25	; 0x22
    31b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ba:	89 a1       	ldd	r24, Y+33	; 0x21
    31bc:	9a a1       	ldd	r25, Y+34	; 0x22
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	69 f7       	brne	.-38     	; 0x319c <main+0x930>
    31c2:	14 c0       	rjmp	.+40     	; 0x31ec <main+0x980>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c4:	6b a1       	ldd	r22, Y+35	; 0x23
    31c6:	7c a1       	ldd	r23, Y+36	; 0x24
    31c8:	8d a1       	ldd	r24, Y+37	; 0x25
    31ca:	9e a1       	ldd	r25, Y+38	; 0x26
    31cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	9a a3       	std	Y+34, r25	; 0x22
    31d6:	89 a3       	std	Y+33, r24	; 0x21
    31d8:	89 a1       	ldd	r24, Y+33	; 0x21
    31da:	9a a1       	ldd	r25, Y+34	; 0x22
    31dc:	9e 8f       	std	Y+30, r25	; 0x1e
    31de:	8d 8f       	std	Y+29, r24	; 0x1d
    31e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	f1 f7       	brne	.-4      	; 0x31e4 <main+0x978>
    31e8:	9e 8f       	std	Y+30, r25	; 0x1e
    31ea:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			HLCD_voidSendCmd(0x01);
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	0e 94 6d 0a 	call	0x14da	; 0x14da <HLCD_voidSendCmd>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a0 e0       	ldi	r26, 0x00	; 0
    31f8:	b0 e4       	ldi	r27, 0x40	; 64
    31fa:	89 8f       	std	Y+25, r24	; 0x19
    31fc:	9a 8f       	std	Y+26, r25	; 0x1a
    31fe:	ab 8f       	std	Y+27, r26	; 0x1b
    3200:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3202:	69 8d       	ldd	r22, Y+25	; 0x19
    3204:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3208:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4a ef       	ldi	r20, 0xFA	; 250
    3210:	54 e4       	ldi	r21, 0x44	; 68
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	8d 8b       	std	Y+21, r24	; 0x15
    321c:	9e 8b       	std	Y+22, r25	; 0x16
    321e:	af 8b       	std	Y+23, r26	; 0x17
    3220:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3222:	6d 89       	ldd	r22, Y+21	; 0x15
    3224:	7e 89       	ldd	r23, Y+22	; 0x16
    3226:	8f 89       	ldd	r24, Y+23	; 0x17
    3228:	98 8d       	ldd	r25, Y+24	; 0x18
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	2c f4       	brge	.+10     	; 0x3244 <main+0x9d8>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9c 8b       	std	Y+20, r25	; 0x14
    3240:	8b 8b       	std	Y+19, r24	; 0x13
    3242:	3f c0       	rjmp	.+126    	; 0x32c2 <main+0xa56>
	else if (__tmp > 65535)
    3244:	6d 89       	ldd	r22, Y+21	; 0x15
    3246:	7e 89       	ldd	r23, Y+22	; 0x16
    3248:	8f 89       	ldd	r24, Y+23	; 0x17
    324a:	98 8d       	ldd	r25, Y+24	; 0x18
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	4c f5       	brge	.+82     	; 0x32ae <main+0xa42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	69 8d       	ldd	r22, Y+25	; 0x19
    325e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3260:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3262:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e2       	ldi	r20, 0x20	; 32
    326a:	51 e4       	ldi	r21, 0x41	; 65
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9c 8b       	std	Y+20, r25	; 0x14
    3282:	8b 8b       	std	Y+19, r24	; 0x13
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <main+0xa38>
    3286:	88 ec       	ldi	r24, 0xC8	; 200
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9a 8b       	std	Y+18, r25	; 0x12
    328c:	89 8b       	std	Y+17, r24	; 0x11
    328e:	89 89       	ldd	r24, Y+17	; 0x11
    3290:	9a 89       	ldd	r25, Y+18	; 0x12
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <main+0xa26>
    3296:	9a 8b       	std	Y+18, r25	; 0x12
    3298:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	8b 89       	ldd	r24, Y+19	; 0x13
    329c:	9c 89       	ldd	r25, Y+20	; 0x14
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	9c 8b       	std	Y+20, r25	; 0x14
    32a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a4:	8b 89       	ldd	r24, Y+19	; 0x13
    32a6:	9c 89       	ldd	r25, Y+20	; 0x14
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	69 f7       	brne	.-38     	; 0x3286 <main+0xa1a>
    32ac:	14 c0       	rjmp	.+40     	; 0x32d6 <main+0xa6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	6d 89       	ldd	r22, Y+21	; 0x15
    32b0:	7e 89       	ldd	r23, Y+22	; 0x16
    32b2:	8f 89       	ldd	r24, Y+23	; 0x17
    32b4:	98 8d       	ldd	r25, Y+24	; 0x18
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9c 8b       	std	Y+20, r25	; 0x14
    32c0:	8b 8b       	std	Y+19, r24	; 0x13
    32c2:	8b 89       	ldd	r24, Y+19	; 0x13
    32c4:	9c 89       	ldd	r25, Y+20	; 0x14
    32c6:	98 8b       	std	Y+16, r25	; 0x10
    32c8:	8f 87       	std	Y+15, r24	; 0x0f
    32ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    32cc:	98 89       	ldd	r25, Y+16	; 0x10
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <main+0xa62>
    32d2:	98 8b       	std	Y+16, r25	; 0x10
    32d4:	8f 87       	std	Y+15, r24	; 0x0f
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	aa e7       	ldi	r26, 0x7A	; 122
    32dc:	b3 e4       	ldi	r27, 0x43	; 67
    32de:	8b 87       	std	Y+11, r24	; 0x0b
    32e0:	9c 87       	std	Y+12, r25	; 0x0c
    32e2:	ad 87       	std	Y+13, r26	; 0x0d
    32e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	4a ef       	ldi	r20, 0xFA	; 250
    32f4:	54 e4       	ldi	r21, 0x44	; 68
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	8f 83       	std	Y+7, r24	; 0x07
    3300:	98 87       	std	Y+8, r25	; 0x08
    3302:	a9 87       	std	Y+9, r26	; 0x09
    3304:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3306:	6f 81       	ldd	r22, Y+7	; 0x07
    3308:	78 85       	ldd	r23, Y+8	; 0x08
    330a:	89 85       	ldd	r24, Y+9	; 0x09
    330c:	9a 85       	ldd	r25, Y+10	; 0x0a
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e8       	ldi	r20, 0x80	; 128
    3314:	5f e3       	ldi	r21, 0x3F	; 63
    3316:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    331a:	88 23       	and	r24, r24
    331c:	2c f4       	brge	.+10     	; 0x3328 <main+0xabc>
		__ticks = 1;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	8d 83       	std	Y+5, r24	; 0x05
    3326:	3f c0       	rjmp	.+126    	; 0x33a6 <main+0xb3a>
	else if (__tmp > 65535)
    3328:	6f 81       	ldd	r22, Y+7	; 0x07
    332a:	78 85       	ldd	r23, Y+8	; 0x08
    332c:	89 85       	ldd	r24, Y+9	; 0x09
    332e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	3f ef       	ldi	r19, 0xFF	; 255
    3334:	4f e7       	ldi	r20, 0x7F	; 127
    3336:	57 e4       	ldi	r21, 0x47	; 71
    3338:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    333c:	18 16       	cp	r1, r24
    333e:	4c f5       	brge	.+82     	; 0x3392 <main+0xb26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3340:	6b 85       	ldd	r22, Y+11	; 0x0b
    3342:	7c 85       	ldd	r23, Y+12	; 0x0c
    3344:	8d 85       	ldd	r24, Y+13	; 0x0d
    3346:	9e 85       	ldd	r25, Y+14	; 0x0e
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	40 e2       	ldi	r20, 0x20	; 32
    334e:	51 e4       	ldi	r21, 0x41	; 65
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	9e 83       	std	Y+6, r25	; 0x06
    3366:	8d 83       	std	Y+5, r24	; 0x05
    3368:	0f c0       	rjmp	.+30     	; 0x3388 <main+0xb1c>
    336a:	88 ec       	ldi	r24, 0xC8	; 200
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9c 83       	std	Y+4, r25	; 0x04
    3370:	8b 83       	std	Y+3, r24	; 0x03
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	9c 81       	ldd	r25, Y+4	; 0x04
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <main+0xb0a>
    337a:	9c 83       	std	Y+4, r25	; 0x04
    337c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337e:	8d 81       	ldd	r24, Y+5	; 0x05
    3380:	9e 81       	ldd	r25, Y+6	; 0x06
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	9e 83       	std	Y+6, r25	; 0x06
    3386:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3388:	8d 81       	ldd	r24, Y+5	; 0x05
    338a:	9e 81       	ldd	r25, Y+6	; 0x06
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	69 f7       	brne	.-38     	; 0x336a <main+0xafe>
    3390:	04 cc       	rjmp	.-2040   	; 0x2b9a <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3392:	6f 81       	ldd	r22, Y+7	; 0x07
    3394:	78 85       	ldd	r23, Y+8	; 0x08
    3396:	89 85       	ldd	r24, Y+9	; 0x09
    3398:	9a 85       	ldd	r25, Y+10	; 0x0a
    339a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	9e 83       	std	Y+6, r25	; 0x06
    33a4:	8d 83       	std	Y+5, r24	; 0x05
    33a6:	8d 81       	ldd	r24, Y+5	; 0x05
    33a8:	9e 81       	ldd	r25, Y+6	; 0x06
    33aa:	9a 83       	std	Y+2, r25	; 0x02
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
    33b0:	9a 81       	ldd	r25, Y+2	; 0x02
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <main+0xb46>
    33b6:	9a 83       	std	Y+2, r25	; 0x02
    33b8:	89 83       	std	Y+1, r24	; 0x01
    33ba:	ef cb       	rjmp	.-2082   	; 0x2b9a <main+0x32e>

000033bc <__udivmodsi4>:
    33bc:	a1 e2       	ldi	r26, 0x21	; 33
    33be:	1a 2e       	mov	r1, r26
    33c0:	aa 1b       	sub	r26, r26
    33c2:	bb 1b       	sub	r27, r27
    33c4:	fd 01       	movw	r30, r26
    33c6:	0d c0       	rjmp	.+26     	; 0x33e2 <__udivmodsi4_ep>

000033c8 <__udivmodsi4_loop>:
    33c8:	aa 1f       	adc	r26, r26
    33ca:	bb 1f       	adc	r27, r27
    33cc:	ee 1f       	adc	r30, r30
    33ce:	ff 1f       	adc	r31, r31
    33d0:	a2 17       	cp	r26, r18
    33d2:	b3 07       	cpc	r27, r19
    33d4:	e4 07       	cpc	r30, r20
    33d6:	f5 07       	cpc	r31, r21
    33d8:	20 f0       	brcs	.+8      	; 0x33e2 <__udivmodsi4_ep>
    33da:	a2 1b       	sub	r26, r18
    33dc:	b3 0b       	sbc	r27, r19
    33de:	e4 0b       	sbc	r30, r20
    33e0:	f5 0b       	sbc	r31, r21

000033e2 <__udivmodsi4_ep>:
    33e2:	66 1f       	adc	r22, r22
    33e4:	77 1f       	adc	r23, r23
    33e6:	88 1f       	adc	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	1a 94       	dec	r1
    33ec:	69 f7       	brne	.-38     	; 0x33c8 <__udivmodsi4_loop>
    33ee:	60 95       	com	r22
    33f0:	70 95       	com	r23
    33f2:	80 95       	com	r24
    33f4:	90 95       	com	r25
    33f6:	9b 01       	movw	r18, r22
    33f8:	ac 01       	movw	r20, r24
    33fa:	bd 01       	movw	r22, r26
    33fc:	cf 01       	movw	r24, r30
    33fe:	08 95       	ret

00003400 <__prologue_saves__>:
    3400:	2f 92       	push	r2
    3402:	3f 92       	push	r3
    3404:	4f 92       	push	r4
    3406:	5f 92       	push	r5
    3408:	6f 92       	push	r6
    340a:	7f 92       	push	r7
    340c:	8f 92       	push	r8
    340e:	9f 92       	push	r9
    3410:	af 92       	push	r10
    3412:	bf 92       	push	r11
    3414:	cf 92       	push	r12
    3416:	df 92       	push	r13
    3418:	ef 92       	push	r14
    341a:	ff 92       	push	r15
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    3428:	ca 1b       	sub	r28, r26
    342a:	db 0b       	sbc	r29, r27
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	09 94       	ijmp

00003438 <__epilogue_restores__>:
    3438:	2a 88       	ldd	r2, Y+18	; 0x12
    343a:	39 88       	ldd	r3, Y+17	; 0x11
    343c:	48 88       	ldd	r4, Y+16	; 0x10
    343e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3440:	6e 84       	ldd	r6, Y+14	; 0x0e
    3442:	7d 84       	ldd	r7, Y+13	; 0x0d
    3444:	8c 84       	ldd	r8, Y+12	; 0x0c
    3446:	9b 84       	ldd	r9, Y+11	; 0x0b
    3448:	aa 84       	ldd	r10, Y+10	; 0x0a
    344a:	b9 84       	ldd	r11, Y+9	; 0x09
    344c:	c8 84       	ldd	r12, Y+8	; 0x08
    344e:	df 80       	ldd	r13, Y+7	; 0x07
    3450:	ee 80       	ldd	r14, Y+6	; 0x06
    3452:	fd 80       	ldd	r15, Y+5	; 0x05
    3454:	0c 81       	ldd	r16, Y+4	; 0x04
    3456:	1b 81       	ldd	r17, Y+3	; 0x03
    3458:	aa 81       	ldd	r26, Y+2	; 0x02
    345a:	b9 81       	ldd	r27, Y+1	; 0x01
    345c:	ce 0f       	add	r28, r30
    345e:	d1 1d       	adc	r29, r1
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
    346a:	ed 01       	movw	r28, r26
    346c:	08 95       	ret

0000346e <itoa>:
    346e:	fb 01       	movw	r30, r22
    3470:	9f 01       	movw	r18, r30
    3472:	e8 94       	clt
    3474:	42 30       	cpi	r20, 0x02	; 2
    3476:	c4 f0       	brlt	.+48     	; 0x34a8 <itoa+0x3a>
    3478:	45 32       	cpi	r20, 0x25	; 37
    347a:	b4 f4       	brge	.+44     	; 0x34a8 <itoa+0x3a>
    347c:	4a 30       	cpi	r20, 0x0A	; 10
    347e:	29 f4       	brne	.+10     	; 0x348a <itoa+0x1c>
    3480:	97 fb       	bst	r25, 7
    3482:	1e f4       	brtc	.+6      	; 0x348a <itoa+0x1c>
    3484:	90 95       	com	r25
    3486:	81 95       	neg	r24
    3488:	9f 4f       	sbci	r25, 0xFF	; 255
    348a:	64 2f       	mov	r22, r20
    348c:	77 27       	eor	r23, r23
    348e:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__udivmodhi4>
    3492:	80 5d       	subi	r24, 0xD0	; 208
    3494:	8a 33       	cpi	r24, 0x3A	; 58
    3496:	0c f0       	brlt	.+2      	; 0x349a <itoa+0x2c>
    3498:	89 5d       	subi	r24, 0xD9	; 217
    349a:	81 93       	st	Z+, r24
    349c:	cb 01       	movw	r24, r22
    349e:	00 97       	sbiw	r24, 0x00	; 0
    34a0:	a1 f7       	brne	.-24     	; 0x348a <itoa+0x1c>
    34a2:	16 f4       	brtc	.+4      	; 0x34a8 <itoa+0x3a>
    34a4:	5d e2       	ldi	r21, 0x2D	; 45
    34a6:	51 93       	st	Z+, r21
    34a8:	10 82       	st	Z, r1
    34aa:	c9 01       	movw	r24, r18
    34ac:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <strrev>

000034b0 <strrev>:
    34b0:	dc 01       	movw	r26, r24
    34b2:	fc 01       	movw	r30, r24
    34b4:	67 2f       	mov	r22, r23
    34b6:	71 91       	ld	r23, Z+
    34b8:	77 23       	and	r23, r23
    34ba:	e1 f7       	brne	.-8      	; 0x34b4 <strrev+0x4>
    34bc:	32 97       	sbiw	r30, 0x02	; 2
    34be:	04 c0       	rjmp	.+8      	; 0x34c8 <strrev+0x18>
    34c0:	7c 91       	ld	r23, X
    34c2:	6d 93       	st	X+, r22
    34c4:	70 83       	st	Z, r23
    34c6:	62 91       	ld	r22, -Z
    34c8:	ae 17       	cp	r26, r30
    34ca:	bf 07       	cpc	r27, r31
    34cc:	c8 f3       	brcs	.-14     	; 0x34c0 <strrev+0x10>
    34ce:	08 95       	ret

000034d0 <__udivmodhi4>:
    34d0:	aa 1b       	sub	r26, r26
    34d2:	bb 1b       	sub	r27, r27
    34d4:	51 e1       	ldi	r21, 0x11	; 17
    34d6:	07 c0       	rjmp	.+14     	; 0x34e6 <__udivmodhi4_ep>

000034d8 <__udivmodhi4_loop>:
    34d8:	aa 1f       	adc	r26, r26
    34da:	bb 1f       	adc	r27, r27
    34dc:	a6 17       	cp	r26, r22
    34de:	b7 07       	cpc	r27, r23
    34e0:	10 f0       	brcs	.+4      	; 0x34e6 <__udivmodhi4_ep>
    34e2:	a6 1b       	sub	r26, r22
    34e4:	b7 0b       	sbc	r27, r23

000034e6 <__udivmodhi4_ep>:
    34e6:	88 1f       	adc	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	5a 95       	dec	r21
    34ec:	a9 f7       	brne	.-22     	; 0x34d8 <__udivmodhi4_loop>
    34ee:	80 95       	com	r24
    34f0:	90 95       	com	r25
    34f2:	bc 01       	movw	r22, r24
    34f4:	cd 01       	movw	r24, r26
    34f6:	08 95       	ret

000034f8 <_exit>:
    34f8:	f8 94       	cli

000034fa <__stop_program>:
    34fa:	ff cf       	rjmp	.-2      	; 0x34fa <__stop_program>
